
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000347c  0800c730  0800c730  0001c730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbac  0800fbac  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbac  0800fbac  0001fbac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbb4  0800fbb4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbb4  0800fbb4  0001fbb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbb8  0800fbb8  0001fbb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800fbbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          000003c8  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005b0  200005b0  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000217c4  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004581  00000000  00000000  000419dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001740  00000000  00000000  00045f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001588  00000000  00000000  000476a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027517  00000000  00000000  00048c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa2e  00000000  00000000  0007013f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e134f  00000000  00000000  0008fb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00170ebc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000074a0  00000000  00000000  00170f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c718 	.word	0x0800c718

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800c718 	.word	0x0800c718

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ffe:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <MX_ADC1_Init+0x108>)
 8001000:	4a3d      	ldr	r2, [pc, #244]	; (80010f8 <MX_ADC1_Init+0x10c>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001004:	4b3b      	ldr	r3, [pc, #236]	; (80010f4 <MX_ADC1_Init+0x108>)
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800100a:	4b3a      	ldr	r3, [pc, #232]	; (80010f4 <MX_ADC1_Init+0x108>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001010:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <MX_ADC1_Init+0x108>)
 8001012:	2201      	movs	r2, #1
 8001014:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001016:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <MX_ADC1_Init+0x108>)
 8001018:	2200      	movs	r2, #0
 800101a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101c:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <MX_ADC1_Init+0x108>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <MX_ADC1_Init+0x108>)
 8001026:	2200      	movs	r2, #0
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102a:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <MX_ADC1_Init+0x108>)
 800102c:	4a33      	ldr	r2, [pc, #204]	; (80010fc <MX_ADC1_Init+0x110>)
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001030:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <MX_ADC1_Init+0x108>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001036:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <MX_ADC1_Init+0x108>)
 8001038:	2205      	movs	r2, #5
 800103a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <MX_ADC1_Init+0x108>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <MX_ADC1_Init+0x108>)
 8001046:	2201      	movs	r2, #1
 8001048:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104a:	482a      	ldr	r0, [pc, #168]	; (80010f4 <MX_ADC1_Init+0x108>)
 800104c:	f002 f826 	bl	800309c <HAL_ADC_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001056:	f001 fa25 	bl	80024a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800105a:	2308      	movs	r3, #8
 800105c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800105e:	2301      	movs	r3, #1
 8001060:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001066:	463b      	mov	r3, r7
 8001068:	4619      	mov	r1, r3
 800106a:	4822      	ldr	r0, [pc, #136]	; (80010f4 <MX_ADC1_Init+0x108>)
 800106c:	f002 f988 	bl	8003380 <HAL_ADC_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001076:	f001 fa15 	bl	80024a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800107a:	2309      	movs	r3, #9
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800107e:	2302      	movs	r3, #2
 8001080:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	4619      	mov	r1, r3
 8001086:	481b      	ldr	r0, [pc, #108]	; (80010f4 <MX_ADC1_Init+0x108>)
 8001088:	f002 f97a 	bl	8003380 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001092:	f001 fa07 	bl	80024a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001096:	230a      	movs	r3, #10
 8001098:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800109a:	2303      	movs	r3, #3
 800109c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4814      	ldr	r0, [pc, #80]	; (80010f4 <MX_ADC1_Init+0x108>)
 80010a4:	f002 f96c 	bl	8003380 <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80010ae:	f001 f9f9 	bl	80024a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010b2:	230b      	movs	r3, #11
 80010b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ba:	463b      	mov	r3, r7
 80010bc:	4619      	mov	r1, r3
 80010be:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_ADC1_Init+0x108>)
 80010c0:	f002 f95e 	bl	8003380 <HAL_ADC_ConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80010ca:	f001 f9eb 	bl	80024a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010ce:	230c      	movs	r3, #12
 80010d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80010d2:	2305      	movs	r3, #5
 80010d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_ADC1_Init+0x108>)
 80010dc:	f002 f950 	bl	8003380 <HAL_ADC_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80010e6:	f001 f9dd 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000230 	.word	0x20000230
 80010f8:	40012000 	.word	0x40012000
 80010fc:	0f000001 	.word	0x0f000001

08001100 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a3c      	ldr	r2, [pc, #240]	; (8001210 <HAL_ADC_MspInit+0x110>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d171      	bne.n	8001206 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <HAL_ADC_MspInit+0x114>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a3a      	ldr	r2, [pc, #232]	; (8001214 <HAL_ADC_MspInit+0x114>)
 800112c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b38      	ldr	r3, [pc, #224]	; (8001214 <HAL_ADC_MspInit+0x114>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b34      	ldr	r3, [pc, #208]	; (8001214 <HAL_ADC_MspInit+0x114>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a33      	ldr	r2, [pc, #204]	; (8001214 <HAL_ADC_MspInit+0x114>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b31      	ldr	r3, [pc, #196]	; (8001214 <HAL_ADC_MspInit+0x114>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_ADC_MspInit+0x114>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a2c      	ldr	r2, [pc, #176]	; (8001214 <HAL_ADC_MspInit+0x114>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <HAL_ADC_MspInit+0x114>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001176:	2307      	movs	r3, #7
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117a:	2303      	movs	r3, #3
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4823      	ldr	r0, [pc, #140]	; (8001218 <HAL_ADC_MspInit+0x118>)
 800118a:	f003 f8ad 	bl	80042e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800118e:	2303      	movs	r3, #3
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001192:	2303      	movs	r3, #3
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	481e      	ldr	r0, [pc, #120]	; (800121c <HAL_ADC_MspInit+0x11c>)
 80011a2:	f003 f8a1 	bl	80042e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_ADC_MspInit+0x120>)
 80011a8:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <HAL_ADC_MspInit+0x124>)
 80011aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <HAL_ADC_MspInit+0x120>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_ADC_MspInit+0x120>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_ADC_MspInit+0x120>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_ADC_MspInit+0x120>)
 80011c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_ADC_MspInit+0x120>)
 80011c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_ADC_MspInit+0x120>)
 80011d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_ADC_MspInit+0x120>)
 80011d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_ADC_MspInit+0x120>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_ADC_MspInit+0x120>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <HAL_ADC_MspInit+0x120>)
 80011ec:	f002 fc7a 	bl	8003ae4 <HAL_DMA_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80011f6:	f001 f955 	bl	80024a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a08      	ldr	r2, [pc, #32]	; (8001220 <HAL_ADC_MspInit+0x120>)
 80011fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_ADC_MspInit+0x120>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40012000 	.word	0x40012000
 8001214:	40023800 	.word	0x40023800
 8001218:	40020800 	.word	0x40020800
 800121c:	40020400 	.word	0x40020400
 8001220:	20000278 	.word	0x20000278
 8001224:	40026410 	.word	0x40026410

08001228 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800122c:	2201      	movs	r2, #1
 800122e:	2108      	movs	r1, #8
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <button_init+0x14>)
 8001232:	f003 f9f5 	bl	8004620 <HAL_GPIO_WritePin>
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40020c00 	.word	0x40020c00

08001240 <button_Scan>:

void button_Scan(){
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2108      	movs	r1, #8
 800124a:	482f      	ldr	r0, [pc, #188]	; (8001308 <button_Scan+0xc8>)
 800124c:	f003 f9e8 	bl	8004620 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	2108      	movs	r1, #8
 8001254:	482c      	ldr	r0, [pc, #176]	; (8001308 <button_Scan+0xc8>)
 8001256:	f003 f9e3 	bl	8004620 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800125a:	230a      	movs	r3, #10
 800125c:	2202      	movs	r2, #2
 800125e:	492b      	ldr	r1, [pc, #172]	; (800130c <button_Scan+0xcc>)
 8001260:	482b      	ldr	r0, [pc, #172]	; (8001310 <button_Scan+0xd0>)
 8001262:	f004 f98e 	bl	8005582 <HAL_SPI_Receive>
	  int button_index = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800126a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800126e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	e03f      	b.n	80012f6 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db06      	blt.n	800128a <button_Scan+0x4a>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b03      	cmp	r3, #3
 8001280:	dc03      	bgt.n	800128a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3304      	adds	r3, #4
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e018      	b.n	80012bc <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b03      	cmp	r3, #3
 800128e:	dd07      	ble.n	80012a0 <button_Scan+0x60>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b07      	cmp	r3, #7
 8001294:	dc04      	bgt.n	80012a0 <button_Scan+0x60>
			  button_index = 7 - i;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f1c3 0307 	rsb	r3, r3, #7
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	e00d      	b.n	80012bc <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	dd06      	ble.n	80012b4 <button_Scan+0x74>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0b      	cmp	r3, #11
 80012aa:	dc03      	bgt.n	80012b4 <button_Scan+0x74>
			  button_index = i + 4;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3304      	adds	r3, #4
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	e003      	b.n	80012bc <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f1c3 0317 	rsb	r3, r3, #23
 80012ba:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <button_Scan+0xcc>)
 80012be:	881a      	ldrh	r2, [r3, #0]
 80012c0:	897b      	ldrh	r3, [r7, #10]
 80012c2:	4013      	ands	r3, r2
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <button_Scan+0x96>
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <button_Scan+0xd4>)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2100      	movs	r1, #0
 80012d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012d4:	e009      	b.n	80012ea <button_Scan+0xaa>
		  else button_count[button_index]++;
 80012d6:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <button_Scan+0xd4>)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012de:	3301      	adds	r3, #1
 80012e0:	b299      	uxth	r1, r3
 80012e2:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <button_Scan+0xd4>)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80012ea:	897b      	ldrh	r3, [r7, #10]
 80012ec:	085b      	lsrs	r3, r3, #1
 80012ee:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3301      	adds	r3, #1
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	ddbc      	ble.n	8001276 <button_Scan+0x36>
	  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020c00 	.word	0x40020c00
 800130c:	20000204 	.word	0x20000204
 8001310:	200003e4 	.word	0x200003e4
 8001314:	200002d8 	.word	0x200002d8

08001318 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_DMA_Init+0x3c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <MX_DMA_Init+0x3c>)
 8001328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_DMA_Init+0x3c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2038      	movs	r0, #56	; 0x38
 8001340:	f002 fb99 	bl	8003a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001344:	2038      	movs	r0, #56	; 0x38
 8001346:	f002 fbb2 	bl	8003aae <HAL_NVIC_EnableIRQ>

}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800

08001358 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	; 0x38
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
 800136e:	615a      	str	r2, [r3, #20]
 8001370:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001384:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <MX_FSMC_Init+0xec>)
 8001386:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800138a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <MX_FSMC_Init+0xec>)
 800138e:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <MX_FSMC_Init+0xf0>)
 8001390:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001392:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <MX_FSMC_Init+0xec>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001398:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <MX_FSMC_Init+0xec>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800139e:	4b29      	ldr	r3, [pc, #164]	; (8001444 <MX_FSMC_Init+0xec>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <MX_FSMC_Init+0xec>)
 80013a6:	2210      	movs	r2, #16
 80013a8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <MX_FSMC_Init+0xec>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <MX_FSMC_Init+0xec>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_FSMC_Init+0xec>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_FSMC_Init+0xec>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_FSMC_Init+0xec>)
 80013c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_FSMC_Init+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_FSMC_Init+0xec>)
 80013d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_FSMC_Init+0xec>)
 80013da:	2200      	movs	r2, #0
 80013dc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_FSMC_Init+0xec>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_FSMC_Init+0xec>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80013ea:	230f      	movs	r3, #15
 80013ec:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80013ee:	230f      	movs	r3, #15
 80013f0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80013f2:	233c      	movs	r3, #60	; 0x3c
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80013fa:	2310      	movs	r3, #16
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80013fe:	2311      	movs	r3, #17
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001402:	2300      	movs	r3, #0
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001406:	2308      	movs	r3, #8
 8001408:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800140a:	230f      	movs	r3, #15
 800140c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800140e:	2309      	movs	r3, #9
 8001410:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001416:	2310      	movs	r3, #16
 8001418:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800141a:	2311      	movs	r3, #17
 800141c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001422:	463a      	mov	r2, r7
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MX_FSMC_Init+0xec>)
 800142c:	f004 fc8c 	bl	8005d48 <HAL_SRAM_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001436:	f001 f835 	bl	80024a4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800143a:	bf00      	nop
 800143c:	3738      	adds	r7, #56	; 0x38
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200002f8 	.word	0x200002f8
 8001448:	a0000104 	.word	0xa0000104

0800144c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_FSMC_MspInit+0x88>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d131      	bne.n	80014cc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <HAL_FSMC_MspInit+0x88>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_FSMC_MspInit+0x8c>)
 8001474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001476:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <HAL_FSMC_MspInit+0x8c>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6393      	str	r3, [r2, #56]	; 0x38
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_FSMC_MspInit+0x8c>)
 8001480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800148a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800148e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800149c:	230c      	movs	r3, #12
 800149e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <HAL_FSMC_MspInit+0x90>)
 80014a6:	f002 ff1f 	bl	80042e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80014aa:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80014ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014bc:	230c      	movs	r3, #12
 80014be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4806      	ldr	r0, [pc, #24]	; (80014e0 <HAL_FSMC_MspInit+0x94>)
 80014c6:	f002 ff0f 	bl	80042e8 <HAL_GPIO_Init>
 80014ca:	e000      	b.n	80014ce <HAL_FSMC_MspInit+0x82>
    return;
 80014cc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000208 	.word	0x20000208
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40020c00 	.word	0x40020c00

080014e4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80014ec:	f7ff ffae 	bl	800144c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
 8001512:	4b8f      	ldr	r3, [pc, #572]	; (8001750 <MX_GPIO_Init+0x258>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a8e      	ldr	r2, [pc, #568]	; (8001750 <MX_GPIO_Init+0x258>)
 8001518:	f043 0310 	orr.w	r3, r3, #16
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b8c      	ldr	r3, [pc, #560]	; (8001750 <MX_GPIO_Init+0x258>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	623b      	str	r3, [r7, #32]
 8001528:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	4b88      	ldr	r3, [pc, #544]	; (8001750 <MX_GPIO_Init+0x258>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a87      	ldr	r2, [pc, #540]	; (8001750 <MX_GPIO_Init+0x258>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b85      	ldr	r3, [pc, #532]	; (8001750 <MX_GPIO_Init+0x258>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	4b81      	ldr	r3, [pc, #516]	; (8001750 <MX_GPIO_Init+0x258>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a80      	ldr	r2, [pc, #512]	; (8001750 <MX_GPIO_Init+0x258>)
 8001550:	f043 0320 	orr.w	r3, r3, #32
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b7e      	ldr	r3, [pc, #504]	; (8001750 <MX_GPIO_Init+0x258>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0320 	and.w	r3, r3, #32
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	4b7a      	ldr	r3, [pc, #488]	; (8001750 <MX_GPIO_Init+0x258>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a79      	ldr	r2, [pc, #484]	; (8001750 <MX_GPIO_Init+0x258>)
 800156c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b77      	ldr	r3, [pc, #476]	; (8001750 <MX_GPIO_Init+0x258>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b73      	ldr	r3, [pc, #460]	; (8001750 <MX_GPIO_Init+0x258>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a72      	ldr	r2, [pc, #456]	; (8001750 <MX_GPIO_Init+0x258>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b70      	ldr	r3, [pc, #448]	; (8001750 <MX_GPIO_Init+0x258>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b6c      	ldr	r3, [pc, #432]	; (8001750 <MX_GPIO_Init+0x258>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a6b      	ldr	r2, [pc, #428]	; (8001750 <MX_GPIO_Init+0x258>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b69      	ldr	r3, [pc, #420]	; (8001750 <MX_GPIO_Init+0x258>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b65      	ldr	r3, [pc, #404]	; (8001750 <MX_GPIO_Init+0x258>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a64      	ldr	r2, [pc, #400]	; (8001750 <MX_GPIO_Init+0x258>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b62      	ldr	r3, [pc, #392]	; (8001750 <MX_GPIO_Init+0x258>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b5e      	ldr	r3, [pc, #376]	; (8001750 <MX_GPIO_Init+0x258>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a5d      	ldr	r2, [pc, #372]	; (8001750 <MX_GPIO_Init+0x258>)
 80015dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b5b      	ldr	r3, [pc, #364]	; (8001750 <MX_GPIO_Init+0x258>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2170      	movs	r1, #112	; 0x70
 80015f2:	4858      	ldr	r0, [pc, #352]	; (8001754 <MX_GPIO_Init+0x25c>)
 80015f4:	f003 f814 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80015fe:	4856      	ldr	r0, [pc, #344]	; (8001758 <MX_GPIO_Init+0x260>)
 8001600:	f003 f80e 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800160a:	4854      	ldr	r0, [pc, #336]	; (800175c <MX_GPIO_Init+0x264>)
 800160c:	f003 f808 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001616:	4852      	ldr	r0, [pc, #328]	; (8001760 <MX_GPIO_Init+0x268>)
 8001618:	f003 f802 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001622:	4850      	ldr	r0, [pc, #320]	; (8001764 <MX_GPIO_Init+0x26c>)
 8001624:	f002 fffc 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2108      	movs	r1, #8
 800162c:	484e      	ldr	r0, [pc, #312]	; (8001768 <MX_GPIO_Init+0x270>)
 800162e:	f002 fff7 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001632:	2370      	movs	r3, #112	; 0x70
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001646:	4619      	mov	r1, r3
 8001648:	4842      	ldr	r0, [pc, #264]	; (8001754 <MX_GPIO_Init+0x25c>)
 800164a:	f002 fe4d 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 800164e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	483c      	ldr	r0, [pc, #240]	; (8001758 <MX_GPIO_Init+0x260>)
 8001668:	f002 fe3e 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 800166c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	4836      	ldr	r0, [pc, #216]	; (800175c <MX_GPIO_Init+0x264>)
 8001682:	f002 fe31 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8001686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	482f      	ldr	r0, [pc, #188]	; (800175c <MX_GPIO_Init+0x264>)
 80016a0:	f002 fe22 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80016a4:	23c0      	movs	r3, #192	; 0xc0
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b4:	4619      	mov	r1, r3
 80016b6:	482b      	ldr	r0, [pc, #172]	; (8001764 <MX_GPIO_Init+0x26c>)
 80016b8:	f002 fe16 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80016bc:	2330      	movs	r3, #48	; 0x30
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	4822      	ldr	r0, [pc, #136]	; (8001758 <MX_GPIO_Init+0x260>)
 80016d0:	f002 fe0a 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 80016d4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	481c      	ldr	r0, [pc, #112]	; (8001760 <MX_GPIO_Init+0x268>)
 80016ee:	f002 fdfb 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 80016f2:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	4619      	mov	r1, r3
 8001706:	4814      	ldr	r0, [pc, #80]	; (8001758 <MX_GPIO_Init+0x260>)
 8001708:	f002 fdee 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800170c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001722:	4619      	mov	r1, r3
 8001724:	480f      	ldr	r0, [pc, #60]	; (8001764 <MX_GPIO_Init+0x26c>)
 8001726:	f002 fddf 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800172a:	2308      	movs	r3, #8
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173e:	4619      	mov	r1, r3
 8001740:	4809      	ldr	r0, [pc, #36]	; (8001768 <MX_GPIO_Init+0x270>)
 8001742:	f002 fdd1 	bl	80042e8 <HAL_GPIO_Init>

}
 8001746:	bf00      	nop
 8001748:	3738      	adds	r7, #56	; 0x38
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40021000 	.word	0x40021000
 8001758:	40020800 	.word	0x40020800
 800175c:	40021400 	.word	0x40021400
 8001760:	40021800 	.word	0x40021800
 8001764:	40020000 	.word	0x40020000
 8001768:	40020c00 	.word	0x40020c00

0800176c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_I2C1_Init+0x50>)
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <MX_I2C1_Init+0x54>)
 8001774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_I2C1_Init+0x50>)
 8001778:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <MX_I2C1_Init+0x58>)
 800177a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_I2C1_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_I2C1_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_I2C1_Init+0x50>)
 800178a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800178e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_I2C1_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_I2C1_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <MX_I2C1_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_I2C1_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_I2C1_Init+0x50>)
 80017aa:	f002 ff6d 	bl	8004688 <HAL_I2C_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017b4:	f000 fe76 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000348 	.word	0x20000348
 80017c0:	40005400 	.word	0x40005400
 80017c4:	000186a0 	.word	0x000186a0

080017c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_I2C_MspInit+0x84>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d12b      	bne.n	8001842 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_I2C_MspInit+0x88>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_I2C_MspInit+0x88>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_I2C_MspInit+0x88>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001806:	23c0      	movs	r3, #192	; 0xc0
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180a:	2312      	movs	r3, #18
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001816:	2304      	movs	r3, #4
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <HAL_I2C_MspInit+0x8c>)
 8001822:	f002 fd61 	bl	80042e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_I2C_MspInit+0x88>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <HAL_I2C_MspInit+0x88>)
 8001830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_I2C_MspInit+0x88>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40005400 	.word	0x40005400
 8001850:	40023800 	.word	0x40023800
 8001854:	40020400 	.word	0x40020400

08001858 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001862:	4a04      	ldr	r2, [pc, #16]	; (8001874 <LCD_WR_REG+0x1c>)
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	8013      	strh	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	600ffffe 	.word	0x600ffffe

08001878 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <LCD_WR_DATA+0x1c>)
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	8053      	strh	r3, [r2, #2]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	600ffffe 	.word	0x600ffffe

08001898 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <LCD_RD_DATA+0x20>)
 80018a0:	885b      	ldrh	r3, [r3, #2]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	b29b      	uxth	r3, r3
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	600ffffe 	.word	0x600ffffe

080018bc <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4604      	mov	r4, r0
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	80fb      	strh	r3, [r7, #6]
 80018ce:	4603      	mov	r3, r0
 80018d0:	80bb      	strh	r3, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	807b      	strh	r3, [r7, #2]
 80018d6:	4613      	mov	r3, r2
 80018d8:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80018da:	202a      	movs	r0, #42	; 0x2a
 80018dc:	f7ff ffbc 	bl	8001858 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ffc6 	bl	8001878 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ffc0 	bl	8001878 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80018f8:	887b      	ldrh	r3, [r7, #2]
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ffba 	bl	8001878 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	b29b      	uxth	r3, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ffb4 	bl	8001878 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001910:	202b      	movs	r0, #43	; 0x2b
 8001912:	f7ff ffa1 	bl	8001858 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001916:	88bb      	ldrh	r3, [r7, #4]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	b29b      	uxth	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ffab 	bl	8001878 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001922:	88bb      	ldrh	r3, [r7, #4]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	b29b      	uxth	r3, r3
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ffa5 	bl	8001878 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800192e:	883b      	ldrh	r3, [r7, #0]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	b29b      	uxth	r3, r3
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff9f 	bl	8001878 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800193a:	883b      	ldrh	r3, [r7, #0]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff99 	bl	8001878 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001946:	202c      	movs	r0, #44	; 0x2c
 8001948:	f7ff ff86 	bl	8001858 <LCD_WR_REG>
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}

08001954 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <lcd_Clear+0x60>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	3b01      	subs	r3, #1
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <lcd_Clear+0x60>)
 8001968:	885b      	ldrh	r3, [r3, #2]
 800196a:	3b01      	subs	r3, #1
 800196c:	b29b      	uxth	r3, r3
 800196e:	2100      	movs	r1, #0
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff ffa3 	bl	80018bc <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001976:	2300      	movs	r3, #0
 8001978:	81fb      	strh	r3, [r7, #14]
 800197a:	e011      	b.n	80019a0 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 800197c:	2300      	movs	r3, #0
 800197e:	81bb      	strh	r3, [r7, #12]
 8001980:	e006      	b.n	8001990 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff77 	bl	8001878 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800198a:	89bb      	ldrh	r3, [r7, #12]
 800198c:	3301      	adds	r3, #1
 800198e:	81bb      	strh	r3, [r7, #12]
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <lcd_Clear+0x60>)
 8001992:	885b      	ldrh	r3, [r3, #2]
 8001994:	89ba      	ldrh	r2, [r7, #12]
 8001996:	429a      	cmp	r2, r3
 8001998:	d3f3      	bcc.n	8001982 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800199a:	89fb      	ldrh	r3, [r7, #14]
 800199c:	3301      	adds	r3, #1
 800199e:	81fb      	strh	r3, [r7, #14]
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <lcd_Clear+0x60>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	89fa      	ldrh	r2, [r7, #14]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d3e8      	bcc.n	800197c <lcd_Clear+0x28>
		}
	}
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	2000039c 	.word	0x2000039c

080019b8 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
 80019c2:	460b      	mov	r3, r1
 80019c4:	80bb      	strh	r3, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80019ca:	88bb      	ldrh	r3, [r7, #4]
 80019cc:	88fa      	ldrh	r2, [r7, #6]
 80019ce:	88b9      	ldrh	r1, [r7, #4]
 80019d0:	88f8      	ldrh	r0, [r7, #6]
 80019d2:	f7ff ff73 	bl	80018bc <lcd_AddressSet>
	LCD_WR_DATA(color);
 80019d6:	887b      	ldrh	r3, [r7, #2]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff4d 	bl	8001878 <LCD_WR_DATA>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4604      	mov	r4, r0
 80019f0:	4608      	mov	r0, r1
 80019f2:	4611      	mov	r1, r2
 80019f4:	461a      	mov	r2, r3
 80019f6:	4623      	mov	r3, r4
 80019f8:	80fb      	strh	r3, [r7, #6]
 80019fa:	4603      	mov	r3, r0
 80019fc:	80bb      	strh	r3, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	70fb      	strb	r3, [r7, #3]
 8001a02:	4613      	mov	r3, r2
 8001a04:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001a0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a12:	085b      	lsrs	r3, r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf14      	ite	ne
 8001a2a:	2301      	movne	r3, #1
 8001a2c:	2300      	moveq	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	fb12 f303 	smulbb	r3, r2, r3
 8001a3e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	3b20      	subs	r3, #32
 8001a44:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29c      	uxth	r4, r3
 8001a54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	88bb      	ldrh	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	88b9      	ldrh	r1, [r7, #4]
 8001a66:	88f8      	ldrh	r0, [r7, #6]
 8001a68:	4622      	mov	r2, r4
 8001a6a:	f7ff ff27 	bl	80018bc <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	827b      	strh	r3, [r7, #18]
 8001a72:	e07a      	b.n	8001b6a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001a74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d028      	beq.n	8001ace <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001a7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d108      	bne.n	8001a96 <lcd_ShowChar+0xae>
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	8a7b      	ldrh	r3, [r7, #18]
 8001a88:	493c      	ldr	r1, [pc, #240]	; (8001b7c <lcd_ShowChar+0x194>)
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	440a      	add	r2, r1
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	75fb      	strb	r3, [r7, #23]
 8001a94:	e01b      	b.n	8001ace <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001a96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a9a:	2b18      	cmp	r3, #24
 8001a9c:	d10b      	bne.n	8001ab6 <lcd_ShowChar+0xce>
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	8a79      	ldrh	r1, [r7, #18]
 8001aa2:	4837      	ldr	r0, [pc, #220]	; (8001b80 <lcd_ShowChar+0x198>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	4403      	add	r3, r0
 8001aae:	440b      	add	r3, r1
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	75fb      	strb	r3, [r7, #23]
 8001ab4:	e00b      	b.n	8001ace <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001ab6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d15a      	bne.n	8001b74 <lcd_ShowChar+0x18c>
 8001abe:	78fa      	ldrb	r2, [r7, #3]
 8001ac0:	8a7b      	ldrh	r3, [r7, #18]
 8001ac2:	4930      	ldr	r1, [pc, #192]	; (8001b84 <lcd_ShowChar+0x19c>)
 8001ac4:	0192      	lsls	r2, r2, #6
 8001ac6:	440a      	add	r2, r1
 8001ac8:	4413      	add	r3, r2
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75bb      	strb	r3, [r7, #22]
 8001ad2:	e044      	b.n	8001b5e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001ad4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d120      	bne.n	8001b1e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001adc:	7dfa      	ldrb	r2, [r7, #23]
 8001ade:	7dbb      	ldrb	r3, [r7, #22]
 8001ae0:	fa42 f303 	asr.w	r3, r2, r3
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <lcd_ShowChar+0x10e>
 8001aec:	883b      	ldrh	r3, [r7, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fec2 	bl	8001878 <LCD_WR_DATA>
 8001af4:	e003      	b.n	8001afe <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001af6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff febd 	bl	8001878 <LCD_WR_DATA>
				m++;
 8001afe:	7d7b      	ldrb	r3, [r7, #21]
 8001b00:	3301      	adds	r3, #1
 8001b02:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001b04:	7d7b      	ldrb	r3, [r7, #21]
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b0c:	fb02 f201 	mul.w	r2, r2, r1
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d11f      	bne.n	8001b58 <lcd_ShowChar+0x170>
				{
					m=0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	757b      	strb	r3, [r7, #21]
					break;
 8001b1c:	e022      	b.n	8001b64 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001b1e:	7dfa      	ldrb	r2, [r7, #23]
 8001b20:	7dbb      	ldrb	r3, [r7, #22]
 8001b22:	fa42 f303 	asr.w	r3, r2, r3
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <lcd_ShowChar+0x152>
 8001b2e:	883a      	ldrh	r2, [r7, #0]
 8001b30:	88b9      	ldrh	r1, [r7, #4]
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff3f 	bl	80019b8 <lcd_DrawPoint>
				x++;
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001b40:	88fa      	ldrh	r2, [r7, #6]
 8001b42:	8a3b      	ldrh	r3, [r7, #16]
 8001b44:	1ad2      	subs	r2, r2, r3
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d105      	bne.n	8001b58 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001b4c:	8a3b      	ldrh	r3, [r7, #16]
 8001b4e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001b50:	88bb      	ldrh	r3, [r7, #4]
 8001b52:	3301      	adds	r3, #1
 8001b54:	80bb      	strh	r3, [r7, #4]
					break;
 8001b56:	e005      	b.n	8001b64 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001b58:	7dbb      	ldrb	r3, [r7, #22]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	75bb      	strb	r3, [r7, #22]
 8001b5e:	7dbb      	ldrb	r3, [r7, #22]
 8001b60:	2b07      	cmp	r3, #7
 8001b62:	d9b7      	bls.n	8001ad4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001b64:	8a7b      	ldrh	r3, [r7, #18]
 8001b66:	3301      	adds	r3, #1
 8001b68:	827b      	strh	r3, [r7, #18]
 8001b6a:	8a7a      	ldrh	r2, [r7, #18]
 8001b6c:	89bb      	ldrh	r3, [r7, #12]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d380      	bcc.n	8001a74 <lcd_ShowChar+0x8c>
 8001b72:	e000      	b.n	8001b76 <lcd_ShowChar+0x18e>
		else return;
 8001b74:	bf00      	nop
				}
			}
		}
	}
}
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd90      	pop	{r4, r7, pc}
 8001b7c:	0800c754 	.word	0x0800c754
 8001b80:	0800cd44 	.word	0x0800cd44
 8001b84:	0800df14 	.word	0x0800df14

08001b88 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	460a      	mov	r2, r1
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001b9c:	e004      	b.n	8001ba8 <mypow+0x20>
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	1e5a      	subs	r2, r3, #1
 8001bac:	71ba      	strb	r2, [r7, #6]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f5      	bne.n	8001b9e <mypow+0x16>
	return result;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <lcd_ShowFloatNum>:
	}
}


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b08b      	sub	sp, #44	; 0x2c
 8001bc4:	af04      	add	r7, sp, #16
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4608      	mov	r0, r1
 8001bca:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	81fb      	strh	r3, [r7, #14]
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	81bb      	strh	r3, [r7, #12]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	71fb      	strb	r3, [r7, #7]
 8001bde:	4613      	mov	r3, r2
 8001be0:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001be2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001be6:	085b      	lsrs	r3, r3, #1
 8001be8:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001bea:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bee:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001cc8 <lcd_ShowFloatNum+0x108>
 8001bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfa:	ee17 3a90 	vmov	r3, s15
 8001bfe:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	75fb      	strb	r3, [r7, #23]
 8001c04:	e057      	b.n	8001cb6 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001c06:	8abc      	ldrh	r4, [r7, #20]
 8001c08:	79fa      	ldrb	r2, [r7, #7]
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4619      	mov	r1, r3
 8001c16:	200a      	movs	r0, #10
 8001c18:	f7ff ffb6 	bl	8001b88 <mypow>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	fbb4 f1f3 	udiv	r1, r4, r3
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <lcd_ShowFloatNum+0x10c>)
 8001c24:	fba3 2301 	umull	r2, r3, r3, r1
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	1aca      	subs	r2, r1, r3
 8001c34:	4613      	mov	r3, r2
 8001c36:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001c38:	7dfa      	ldrb	r2, [r7, #23]
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	3b02      	subs	r3, #2
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d11d      	bne.n	8001c7e <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	3b02      	subs	r3, #2
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	7dbb      	ldrb	r3, [r7, #22]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	fb12 f303 	smulbb	r3, r2, r3
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	89fb      	ldrh	r3, [r7, #14]
 8001c54:	4413      	add	r3, r2
 8001c56:	b298      	uxth	r0, r3
 8001c58:	88ba      	ldrh	r2, [r7, #4]
 8001c5a:	89b9      	ldrh	r1, [r7, #12]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	222e      	movs	r2, #46	; 0x2e
 8001c6e:	f7ff febb 	bl	80019e8 <lcd_ShowChar>
			t++;
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
 8001c74:	3301      	adds	r3, #1
 8001c76:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	7dbb      	ldrb	r3, [r7, #22]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	fb12 f303 	smulbb	r3, r2, r3
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	89fb      	ldrh	r3, [r7, #14]
 8001c8e:	4413      	add	r3, r2
 8001c90:	b298      	uxth	r0, r3
 8001c92:	7cfb      	ldrb	r3, [r7, #19]
 8001c94:	3330      	adds	r3, #48	; 0x30
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	88bc      	ldrh	r4, [r7, #4]
 8001c9a:	89b9      	ldrh	r1, [r7, #12]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	4623      	mov	r3, r4
 8001cac:	f7ff fe9c 	bl	80019e8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	75fb      	strb	r3, [r7, #23]
 8001cb6:	7dfa      	ldrb	r2, [r7, #23]
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d3a3      	bcc.n	8001c06 <lcd_ShowFloatNum+0x46>
	}
}
 8001cbe:	bf00      	nop
 8001cc0:	bf00      	nop
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd90      	pop	{r4, r7, pc}
 8001cc8:	42c80000 	.word	0x42c80000
 8001ccc:	cccccccd 	.word	0xcccccccd

08001cd0 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <lcd_SetDir+0x44>)
 8001cec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cf0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <lcd_SetDir+0x44>)
 8001cf4:	22f0      	movs	r2, #240	; 0xf0
 8001cf6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001cf8:	e006      	b.n	8001d08 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <lcd_SetDir+0x44>)
 8001cfc:	22f0      	movs	r2, #240	; 0xf0
 8001cfe:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <lcd_SetDir+0x44>)
 8001d02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d06:	805a      	strh	r2, [r3, #2]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	2000039c 	.word	0x2000039c

08001d18 <lcd_init>:


void lcd_init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d22:	48aa      	ldr	r0, [pc, #680]	; (8001fcc <lcd_init+0x2b4>)
 8001d24:	f002 fc7c 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001d28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d2c:	f001 f992 	bl	8003054 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d36:	48a5      	ldr	r0, [pc, #660]	; (8001fcc <lcd_init+0x2b4>)
 8001d38:	f002 fc72 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001d3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d40:	f001 f988 	bl	8003054 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff ffc3 	bl	8001cd0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001d4a:	20d3      	movs	r0, #211	; 0xd3
 8001d4c:	f7ff fd84 	bl	8001858 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001d50:	f7ff fda2 	bl	8001898 <LCD_RD_DATA>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b9d      	ldr	r3, [pc, #628]	; (8001fd0 <lcd_init+0x2b8>)
 8001d5a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d5c:	f7ff fd9c 	bl	8001898 <LCD_RD_DATA>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b9a      	ldr	r3, [pc, #616]	; (8001fd0 <lcd_init+0x2b8>)
 8001d66:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d68:	f7ff fd96 	bl	8001898 <LCD_RD_DATA>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b97      	ldr	r3, [pc, #604]	; (8001fd0 <lcd_init+0x2b8>)
 8001d72:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001d74:	4b96      	ldr	r3, [pc, #600]	; (8001fd0 <lcd_init+0x2b8>)
 8001d76:	889b      	ldrh	r3, [r3, #4]
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	4b94      	ldr	r3, [pc, #592]	; (8001fd0 <lcd_init+0x2b8>)
 8001d7e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001d80:	f7ff fd8a 	bl	8001898 <LCD_RD_DATA>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b91      	ldr	r3, [pc, #580]	; (8001fd0 <lcd_init+0x2b8>)
 8001d8a:	889b      	ldrh	r3, [r3, #4]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b8f      	ldr	r3, [pc, #572]	; (8001fd0 <lcd_init+0x2b8>)
 8001d92:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001d94:	20cf      	movs	r0, #207	; 0xcf
 8001d96:	f7ff fd5f 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff fd6c 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001da0:	20c1      	movs	r0, #193	; 0xc1
 8001da2:	f7ff fd69 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001da6:	2030      	movs	r0, #48	; 0x30
 8001da8:	f7ff fd66 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001dac:	20ed      	movs	r0, #237	; 0xed
 8001dae:	f7ff fd53 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001db2:	2064      	movs	r0, #100	; 0x64
 8001db4:	f7ff fd60 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001db8:	2003      	movs	r0, #3
 8001dba:	f7ff fd5d 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001dbe:	2012      	movs	r0, #18
 8001dc0:	f7ff fd5a 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001dc4:	2081      	movs	r0, #129	; 0x81
 8001dc6:	f7ff fd57 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001dca:	20e8      	movs	r0, #232	; 0xe8
 8001dcc:	f7ff fd44 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001dd0:	2085      	movs	r0, #133	; 0x85
 8001dd2:	f7ff fd51 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001dd6:	2010      	movs	r0, #16
 8001dd8:	f7ff fd4e 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001ddc:	207a      	movs	r0, #122	; 0x7a
 8001dde:	f7ff fd4b 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001de2:	20cb      	movs	r0, #203	; 0xcb
 8001de4:	f7ff fd38 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001de8:	2039      	movs	r0, #57	; 0x39
 8001dea:	f7ff fd45 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001dee:	202c      	movs	r0, #44	; 0x2c
 8001df0:	f7ff fd42 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff fd3f 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001dfa:	2034      	movs	r0, #52	; 0x34
 8001dfc:	f7ff fd3c 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001e00:	2002      	movs	r0, #2
 8001e02:	f7ff fd39 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001e06:	20f7      	movs	r0, #247	; 0xf7
 8001e08:	f7ff fd26 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001e0c:	2020      	movs	r0, #32
 8001e0e:	f7ff fd33 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001e12:	20ea      	movs	r0, #234	; 0xea
 8001e14:	f7ff fd20 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff fd2d 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff fd2a 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001e24:	20c0      	movs	r0, #192	; 0xc0
 8001e26:	f7ff fd17 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001e2a:	201b      	movs	r0, #27
 8001e2c:	f7ff fd24 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001e30:	20c1      	movs	r0, #193	; 0xc1
 8001e32:	f7ff fd11 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001e36:	2001      	movs	r0, #1
 8001e38:	f7ff fd1e 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001e3c:	20c5      	movs	r0, #197	; 0xc5
 8001e3e:	f7ff fd0b 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001e42:	2030      	movs	r0, #48	; 0x30
 8001e44:	f7ff fd18 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001e48:	2030      	movs	r0, #48	; 0x30
 8001e4a:	f7ff fd15 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001e4e:	20c7      	movs	r0, #199	; 0xc7
 8001e50:	f7ff fd02 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001e54:	20b7      	movs	r0, #183	; 0xb7
 8001e56:	f7ff fd0f 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001e5a:	2036      	movs	r0, #54	; 0x36
 8001e5c:	f7ff fcfc 	bl	8001858 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001e60:	2008      	movs	r0, #8
 8001e62:	f7ff fd09 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001e66:	203a      	movs	r0, #58	; 0x3a
 8001e68:	f7ff fcf6 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001e6c:	2055      	movs	r0, #85	; 0x55
 8001e6e:	f7ff fd03 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001e72:	20b1      	movs	r0, #177	; 0xb1
 8001e74:	f7ff fcf0 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff fcfd 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001e7e:	201a      	movs	r0, #26
 8001e80:	f7ff fcfa 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001e84:	20b6      	movs	r0, #182	; 0xb6
 8001e86:	f7ff fce7 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001e8a:	200a      	movs	r0, #10
 8001e8c:	f7ff fcf4 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001e90:	20a2      	movs	r0, #162	; 0xa2
 8001e92:	f7ff fcf1 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001e96:	20f2      	movs	r0, #242	; 0xf2
 8001e98:	f7ff fcde 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff fceb 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001ea2:	2026      	movs	r0, #38	; 0x26
 8001ea4:	f7ff fcd8 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7ff fce5 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001eae:	20e0      	movs	r0, #224	; 0xe0
 8001eb0:	f7ff fcd2 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001eb4:	200f      	movs	r0, #15
 8001eb6:	f7ff fcdf 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001eba:	202a      	movs	r0, #42	; 0x2a
 8001ebc:	f7ff fcdc 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001ec0:	2028      	movs	r0, #40	; 0x28
 8001ec2:	f7ff fcd9 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001ec6:	2008      	movs	r0, #8
 8001ec8:	f7ff fcd6 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001ecc:	200e      	movs	r0, #14
 8001ece:	f7ff fcd3 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001ed2:	2008      	movs	r0, #8
 8001ed4:	f7ff fcd0 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001ed8:	2054      	movs	r0, #84	; 0x54
 8001eda:	f7ff fccd 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001ede:	20a9      	movs	r0, #169	; 0xa9
 8001ee0:	f7ff fcca 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001ee4:	2043      	movs	r0, #67	; 0x43
 8001ee6:	f7ff fcc7 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001eea:	200a      	movs	r0, #10
 8001eec:	f7ff fcc4 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ef0:	200f      	movs	r0, #15
 8001ef2:	f7ff fcc1 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fcbe 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7ff fcbb 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff fcb8 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff fcb5 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001f0e:	20e1      	movs	r0, #225	; 0xe1
 8001f10:	f7ff fca2 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f7ff fcaf 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001f1a:	2015      	movs	r0, #21
 8001f1c:	f7ff fcac 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001f20:	2017      	movs	r0, #23
 8001f22:	f7ff fca9 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001f26:	2007      	movs	r0, #7
 8001f28:	f7ff fca6 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001f2c:	2011      	movs	r0, #17
 8001f2e:	f7ff fca3 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001f32:	2006      	movs	r0, #6
 8001f34:	f7ff fca0 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001f38:	202b      	movs	r0, #43	; 0x2b
 8001f3a:	f7ff fc9d 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001f3e:	2056      	movs	r0, #86	; 0x56
 8001f40:	f7ff fc9a 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001f44:	203c      	movs	r0, #60	; 0x3c
 8001f46:	f7ff fc97 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001f4a:	2005      	movs	r0, #5
 8001f4c:	f7ff fc94 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f50:	2010      	movs	r0, #16
 8001f52:	f7ff fc91 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f56:	200f      	movs	r0, #15
 8001f58:	f7ff fc8e 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001f5c:	203f      	movs	r0, #63	; 0x3f
 8001f5e:	f7ff fc8b 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001f62:	203f      	movs	r0, #63	; 0x3f
 8001f64:	f7ff fc88 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f68:	200f      	movs	r0, #15
 8001f6a:	f7ff fc85 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001f6e:	202b      	movs	r0, #43	; 0x2b
 8001f70:	f7ff fc72 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7ff fc7f 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7ff fc7c 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001f80:	2001      	movs	r0, #1
 8001f82:	f7ff fc79 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001f86:	203f      	movs	r0, #63	; 0x3f
 8001f88:	f7ff fc76 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001f8c:	202a      	movs	r0, #42	; 0x2a
 8001f8e:	f7ff fc63 	bl	8001858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f92:	2000      	movs	r0, #0
 8001f94:	f7ff fc70 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff fc6d 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f7ff fc6a 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001fa4:	20ef      	movs	r0, #239	; 0xef
 8001fa6:	f7ff fc67 	bl	8001878 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001faa:	2011      	movs	r0, #17
 8001fac:	f7ff fc54 	bl	8001858 <LCD_WR_REG>
	HAL_Delay(120);
 8001fb0:	2078      	movs	r0, #120	; 0x78
 8001fb2:	f001 f84f 	bl	8003054 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001fb6:	2029      	movs	r0, #41	; 0x29
 8001fb8:	f7ff fc4e 	bl	8001858 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc2:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <lcd_init+0x2bc>)
 8001fc4:	f002 fb2c 	bl	8004620 <HAL_GPIO_WritePin>
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40020800 	.word	0x40020800
 8001fd0:	2000039c 	.word	0x2000039c
 8001fd4:	40020000 	.word	0x40020000

08001fd8 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b08b      	sub	sp, #44	; 0x2c
 8001fdc:	af04      	add	r7, sp, #16
 8001fde:	60ba      	str	r2, [r7, #8]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	81fb      	strh	r3, [r7, #14]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	81bb      	strh	r3, [r7, #12]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001fee:	89fb      	ldrh	r3, [r7, #14]
 8001ff0:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001ff6:	e048      	b.n	800208a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d145      	bne.n	800208a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001ffe:	89fa      	ldrh	r2, [r7, #14]
 8002000:	4b26      	ldr	r3, [pc, #152]	; (800209c <lcd_ShowStr+0xc4>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	4619      	mov	r1, r3
 8002006:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	1acb      	subs	r3, r1, r3
 8002010:	429a      	cmp	r2, r3
 8002012:	dc3f      	bgt.n	8002094 <lcd_ShowStr+0xbc>
 8002014:	89ba      	ldrh	r2, [r7, #12]
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <lcd_ShowStr+0xc4>)
 8002018:	885b      	ldrh	r3, [r3, #2]
 800201a:	4619      	mov	r1, r3
 800201c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002020:	1acb      	subs	r3, r1, r3
 8002022:	429a      	cmp	r2, r3
 8002024:	dc36      	bgt.n	8002094 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b80      	cmp	r3, #128	; 0x80
 800202c:	d902      	bls.n	8002034 <lcd_ShowStr+0x5c>
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
 8002032:	e02a      	b.n	800208a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b0d      	cmp	r3, #13
 800203a:	d10b      	bne.n	8002054 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800203c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002040:	b29a      	uxth	r2, r3
 8002042:	89bb      	ldrh	r3, [r7, #12]
 8002044:	4413      	add	r3, r2
 8002046:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002048:	8abb      	ldrh	r3, [r7, #20]
 800204a:	81fb      	strh	r3, [r7, #14]
					str++;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	3301      	adds	r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	e017      	b.n	8002084 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	88fc      	ldrh	r4, [r7, #6]
 800205a:	89b9      	ldrh	r1, [r7, #12]
 800205c:	89f8      	ldrh	r0, [r7, #14]
 800205e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002062:	9302      	str	r3, [sp, #8]
 8002064:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	4623      	mov	r3, r4
 8002070:	f7ff fcba 	bl	80019e8 <lcd_ShowChar>
					x+=sizey/2;
 8002074:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002078:	085b      	lsrs	r3, r3, #1
 800207a:	b2db      	uxtb	r3, r3
 800207c:	b29a      	uxth	r2, r3
 800207e:	89fb      	ldrh	r3, [r7, #14]
 8002080:	4413      	add	r3, r2
 8002082:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3301      	adds	r3, #1
 8002088:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1b2      	bne.n	8001ff8 <lcd_ShowStr+0x20>
 8002092:	e000      	b.n	8002096 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002094:	bf00      	nop
			}
		}
	}
}
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd90      	pop	{r4, r7, pc}
 800209c:	2000039c 	.word	0x2000039c

080020a0 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80020a4:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <led7_Scan+0x104>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <led7_Scan+0x104>)
 80020ae:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80020b0:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <led7_Scan+0x108>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a3d      	ldr	r2, [pc, #244]	; (80021ac <led7_Scan+0x10c>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	b21a      	sxth	r2, r3
 80020bc:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <led7_Scan+0x104>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	4313      	orrs	r3, r2
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <led7_Scan+0x104>)
 80020ca:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80020cc:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <led7_Scan+0x108>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d847      	bhi.n	8002164 <led7_Scan+0xc4>
 80020d4:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <led7_Scan+0x3c>)
 80020d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020da:	bf00      	nop
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	0800210b 	.word	0x0800210b
 80020e4:	08002129 	.word	0x08002129
 80020e8:	08002147 	.word	0x08002147
	case 0:
		spi_buffer |= 0x00b0;
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <led7_Scan+0x104>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <led7_Scan+0x104>)
 80020f8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <led7_Scan+0x104>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002102:	b29a      	uxth	r2, r3
 8002104:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <led7_Scan+0x104>)
 8002106:	801a      	strh	r2, [r3, #0]
		break;
 8002108:	e02d      	b.n	8002166 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800210a:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <led7_Scan+0x104>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002112:	b29a      	uxth	r2, r3
 8002114:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <led7_Scan+0x104>)
 8002116:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <led7_Scan+0x104>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	f023 0320 	bic.w	r3, r3, #32
 8002120:	b29a      	uxth	r2, r3
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <led7_Scan+0x104>)
 8002124:	801a      	strh	r2, [r3, #0]
		break;
 8002126:	e01e      	b.n	8002166 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <led7_Scan+0x104>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002130:	b29a      	uxth	r2, r3
 8002132:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <led7_Scan+0x104>)
 8002134:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <led7_Scan+0x104>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	f023 0310 	bic.w	r3, r3, #16
 800213e:	b29a      	uxth	r2, r3
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <led7_Scan+0x104>)
 8002142:	801a      	strh	r2, [r3, #0]
		break;
 8002144:	e00f      	b.n	8002166 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002146:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <led7_Scan+0x104>)
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800214e:	b29a      	uxth	r2, r3
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <led7_Scan+0x104>)
 8002152:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <led7_Scan+0x104>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800215c:	b29a      	uxth	r2, r3
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <led7_Scan+0x104>)
 8002160:	801a      	strh	r2, [r3, #0]
		break;
 8002162:	e000      	b.n	8002166 <led7_Scan+0xc6>
	default:
		break;
 8002164:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <led7_Scan+0x108>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	425a      	negs	r2, r3
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	f002 0203 	and.w	r2, r2, #3
 8002176:	bf58      	it	pl
 8002178:	4253      	negpl	r3, r2
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <led7_Scan+0x108>)
 800217c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2140      	movs	r1, #64	; 0x40
 8002182:	480b      	ldr	r0, [pc, #44]	; (80021b0 <led7_Scan+0x110>)
 8002184:	f002 fa4c 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002188:	2301      	movs	r3, #1
 800218a:	2202      	movs	r2, #2
 800218c:	4905      	ldr	r1, [pc, #20]	; (80021a4 <led7_Scan+0x104>)
 800218e:	4809      	ldr	r0, [pc, #36]	; (80021b4 <led7_Scan+0x114>)
 8002190:	f003 f8bb 	bl	800530a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002194:	2201      	movs	r2, #1
 8002196:	2140      	movs	r1, #64	; 0x40
 8002198:	4805      	ldr	r0, [pc, #20]	; (80021b0 <led7_Scan+0x110>)
 800219a:	f002 fa41 	bl	8004620 <HAL_GPIO_WritePin>
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000004 	.word	0x20000004
 80021a8:	2000020c 	.word	0x2000020c
 80021ac:	20000000 	.word	0x20000000
 80021b0:	40021800 	.word	0x40021800
 80021b4:	200003e4 	.word	0x200003e4

080021b8 <lightProcess>:
 */
#include "light_control.h"

uint8_t light_status = 0;

void lightProcess(){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 80021bc:	4b14      	ldr	r3, [pc, #80]	; (8002210 <lightProcess+0x58>)
 80021be:	8b5b      	ldrh	r3, [r3, #26]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d113      	bne.n	80021ec <lightProcess+0x34>
		light_status = 1 - light_status;
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <lightProcess+0x5c>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f1c3 0301 	rsb	r3, r3, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <lightProcess+0x5c>)
 80021d0:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <lightProcess+0x5c>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d104      	bne.n	80021e4 <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 80021da:	2101      	movs	r1, #1
 80021dc:	480e      	ldr	r0, [pc, #56]	; (8002218 <lightProcess+0x60>)
 80021de:	f000 fd51 	bl	8002c84 <uart_EspSendBytes>
 80021e2:	e003      	b.n	80021ec <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 80021e4:	2101      	movs	r1, #1
 80021e6:	480d      	ldr	r0, [pc, #52]	; (800221c <lightProcess+0x64>)
 80021e8:	f000 fd4c 	bl	8002c84 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <lightProcess+0x5c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d105      	bne.n	8002200 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 80021f4:	2201      	movs	r2, #1
 80021f6:	2120      	movs	r1, #32
 80021f8:	4809      	ldr	r0, [pc, #36]	; (8002220 <lightProcess+0x68>)
 80021fa:	f002 fa11 	bl	8004620 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 80021fe:	e004      	b.n	800220a <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002200:	2200      	movs	r2, #0
 8002202:	2120      	movs	r1, #32
 8002204:	4806      	ldr	r0, [pc, #24]	; (8002220 <lightProcess+0x68>)
 8002206:	f002 fa0b 	bl	8004620 <HAL_GPIO_WritePin>
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200002d8 	.word	0x200002d8
 8002214:	20000210 	.word	0x20000210
 8002218:	0800c730 	.word	0x0800c730
 800221c:	0800c734 	.word	0x0800c734
 8002220:	40021000 	.word	0x40021000

08002224 <test_Esp>:

void test_Esp(){
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af04      	add	r7, sp, #16
	if(uart_EspCheck() == 0) uart_EspSendBytes("o", 1);
 800222a:	f000 fd87 	bl	8002d3c <uart_EspCheck>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d104      	bne.n	800223e <test_Esp+0x1a>
 8002234:	2101      	movs	r1, #1
 8002236:	480a      	ldr	r0, [pc, #40]	; (8002260 <test_Esp+0x3c>)
 8002238:	f000 fd24 	bl	8002c84 <uart_EspSendBytes>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 800223c:	e00c      	b.n	8002258 <test_Esp+0x34>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 800223e:	2300      	movs	r3, #0
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	2318      	movs	r3, #24
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	2300      	movs	r3, #0
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800224e:	4a05      	ldr	r2, [pc, #20]	; (8002264 <test_Esp+0x40>)
 8002250:	2132      	movs	r1, #50	; 0x32
 8002252:	200a      	movs	r0, #10
 8002254:	f7ff fec0 	bl	8001fd8 <lcd_ShowStr>
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	0800c738 	.word	0x0800c738
 8002264:	0800c73c 	.word	0x0800c73c

08002268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800226c:	f000 fe80 	bl	8002f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002270:	f000 f830 	bl	80022d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002274:	f7ff f940 	bl	80014f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002278:	f000 fbba 	bl	80029f0 <MX_TIM2_Init>
  MX_SPI1_Init();
 800227c:	f000 f998 	bl	80025b0 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002280:	f7ff f86a 	bl	8001358 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002284:	f7ff fa72 	bl	800176c <MX_I2C1_Init>
  MX_TIM13_Init();
 8002288:	f000 fbfe 	bl	8002a88 <MX_TIM13_Init>
  MX_DMA_Init();
 800228c:	f7ff f844 	bl	8001318 <MX_DMA_Init>
  MX_ADC1_Init();
 8002290:	f7fe feac 	bl	8000fec <MX_ADC1_Init>
  MX_TIM1_Init();
 8002294:	f000 fb5c 	bl	8002950 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002298:	f000 fd8a 	bl	8002db0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800229c:	f000 fd5e 	bl	8002d5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80022a0:	f000 f882 	bl	80023a8 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff fb55 	bl	8001954 <lcd_Clear>
// uart_init_rs232();
 while (1)
  {
	  // 50ms task
//	  if(flag_timer2 == 1);
	 if(flag_timer2 == 1)
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <main+0x68>)
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d1fb      	bne.n	80022aa <main+0x42>
	 {
		  flag_timer2 = 0;
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <main+0x68>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	801a      	strh	r2, [r3, #0]

		  button_Scan();
 80022b8:	f7fe ffc2 	bl	8001240 <button_Scan>
		  test_Esp();
 80022bc:	f7ff ffb2 	bl	8002224 <test_Esp>
		  lightProcess();
 80022c0:	f7ff ff7a 	bl	80021b8 <lightProcess>
		  test_LedDebug();
 80022c4:	f000 f882 	bl	80023cc <test_LedDebug>
		  sendTemp();
 80022c8:	f000 f8a4 	bl	8002414 <sendTemp>
	 if(flag_timer2 == 1)
 80022cc:	e7ed      	b.n	80022aa <main+0x42>
 80022ce:	bf00      	nop
 80022d0:	20000218 	.word	0x20000218

080022d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b094      	sub	sp, #80	; 0x50
 80022d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022da:	f107 0320 	add.w	r3, r7, #32
 80022de:	2230      	movs	r2, #48	; 0x30
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f005 fdec 	bl	8007ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022e8:	f107 030c 	add.w	r3, r7, #12
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	2300      	movs	r3, #0
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <SystemClock_Config+0xcc>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <SystemClock_Config+0xcc>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002306:	6413      	str	r3, [r2, #64]	; 0x40
 8002308:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <SystemClock_Config+0xcc>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002314:	2300      	movs	r3, #0
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <SystemClock_Config+0xd0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a21      	ldr	r2, [pc, #132]	; (80023a4 <SystemClock_Config+0xd0>)
 800231e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <SystemClock_Config+0xd0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002330:	2302      	movs	r3, #2
 8002332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002334:	2301      	movs	r3, #1
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002338:	2310      	movs	r3, #16
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800233c:	2302      	movs	r3, #2
 800233e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002340:	2300      	movs	r3, #0
 8002342:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002344:	2308      	movs	r3, #8
 8002346:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002348:	23a8      	movs	r3, #168	; 0xa8
 800234a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800234c:	2302      	movs	r3, #2
 800234e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002350:	2304      	movs	r3, #4
 8002352:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002354:	f107 0320 	add.w	r3, r7, #32
 8002358:	4618      	mov	r0, r3
 800235a:	f002 fad9 	bl	8004910 <HAL_RCC_OscConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002364:	f000 f89e 	bl	80024a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002368:	230f      	movs	r3, #15
 800236a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800236c:	2302      	movs	r3, #2
 800236e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002374:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800237a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800237e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	2105      	movs	r1, #5
 8002386:	4618      	mov	r0, r3
 8002388:	f002 fd3a 	bl	8004e00 <HAL_RCC_ClockConfig>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002392:	f000 f887 	bl	80024a4 <Error_Handler>
  }
}
 8002396:	bf00      	nop
 8002398:	3750      	adds	r7, #80	; 0x50
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40007000 	.word	0x40007000

080023a8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
	  timer_init();
 80023ac:	f000 f8ac 	bl	8002508 <timer_init>
	  button_init();
 80023b0:	f7fe ff3a 	bl	8001228 <button_init>
	  lcd_init();
 80023b4:	f7ff fcb0 	bl	8001d18 <lcd_init>
	  uart_init_esp();
 80023b8:	f000 fc4e 	bl	8002c58 <uart_init_esp>
	  setTimer2(50);
 80023bc:	2032      	movs	r0, #50	; 0x32
 80023be:	f000 f8b1 	bl	8002524 <setTimer2>
	  uart_init_rs232();
 80023c2:	f000 fc3b 	bl	8002c3c <uart_init_rs232>
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <test_LedDebug+0x3c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <test_LedDebug+0x40>)
 80023d8:	fb83 1302 	smull	r1, r3, r3, r2
 80023dc:	10d9      	asrs	r1, r3, #3
 80023de:	17d3      	asrs	r3, r2, #31
 80023e0:	1ac9      	subs	r1, r1, r3
 80023e2:	460b      	mov	r3, r1
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	1ad1      	subs	r1, r2, r3
 80023ec:	b2ca      	uxtb	r2, r1
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <test_LedDebug+0x3c>)
 80023f0:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <test_LedDebug+0x3c>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d103      	bne.n	8002402 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80023fa:	2110      	movs	r1, #16
 80023fc:	4804      	ldr	r0, [pc, #16]	; (8002410 <test_LedDebug+0x44>)
 80023fe:	f002 f928 	bl	8004652 <HAL_GPIO_TogglePin>
	}
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000211 	.word	0x20000211
 800240c:	66666667 	.word	0x66666667
 8002410:	40021000 	.word	0x40021000

08002414 <sendTemp>:
//void floatToString(float value, char *buffer, int decimalPlaces) {
//    // Format the float value into the buffer with specified decimal places
//    sprintf(buffer, "%.*f", decimalPlaces, value);
//}
void sendTemp()
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b090      	sub	sp, #64	; 0x40
 8002418:	af02      	add	r7, sp, #8

	count=(count+1)%600;
 800241a:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <sendTemp+0x84>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <sendTemp+0x88>)
 8002422:	fb83 1302 	smull	r1, r3, r3, r2
 8002426:	1199      	asrs	r1, r3, #6
 8002428:	17d3      	asrs	r3, r2, #31
 800242a:	1acb      	subs	r3, r1, r3
 800242c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	4a18      	ldr	r2, [pc, #96]	; (8002498 <sendTemp+0x84>)
 8002438:	6013      	str	r3, [r2, #0]
	if(count==0){
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <sendTemp+0x84>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d126      	bne.n	8002490 <sendTemp+0x7c>
		sensor_Read();
 8002442:	f000 f835 	bl	80024b0 <sensor_Read>
		float a=sensor_GetTemperature();
 8002446:	f000 f841 	bl	80024cc <sensor_GetTemperature>
 800244a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	char tempMessage[50];
	lcd_ShowFloatNum(130, 180,a, 4, RED, BLACK, 16);
 800244e:	2310      	movs	r3, #16
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	2300      	movs	r3, #0
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800245a:	2204      	movs	r2, #4
 800245c:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8002460:	21b4      	movs	r1, #180	; 0xb4
 8002462:	2082      	movs	r0, #130	; 0x82
 8002464:	f7ff fbac 	bl	8001bc0 <lcd_ShowFloatNum>
		sprintf(tempMessage, "!TEMP:%.2f#", a);
 8002468:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800246a:	f7fe f86d 	bl	8000548 <__aeabi_f2d>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4638      	mov	r0, r7
 8002474:	490a      	ldr	r1, [pc, #40]	; (80024a0 <sendTemp+0x8c>)
 8002476:	f006 fbab 	bl	8008bd0 <siprintf>
		 uart_EspSendBytes((uint8_t *)tempMessage, strlen(tempMessage));
 800247a:	463b      	mov	r3, r7
 800247c:	4618      	mov	r0, r3
 800247e:	f7fd fea7 	bl	80001d0 <strlen>
 8002482:	4603      	mov	r3, r0
 8002484:	b29a      	uxth	r2, r3
 8002486:	463b      	mov	r3, r7
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fbfa 	bl	8002c84 <uart_EspSendBytes>

		    // Send the formatted message using uart_EspSendBytes
		  //  uart_EspSendBytes((uint8_t *)a, strlen(a));
	}
}
 8002490:	bf00      	nop
 8002492:	3738      	adds	r7, #56	; 0x38
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000214 	.word	0x20000214
 800249c:	1b4e81b5 	.word	0x1b4e81b5
 80024a0:	0800c748 	.word	0x0800c748

080024a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a8:	b672      	cpsid	i
}
 80024aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024ac:	e7fe      	b.n	80024ac <Error_Handler+0x8>
	...

080024b0 <sensor_Read>:

void sensor_init(){
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}

void sensor_Read(){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80024b4:	2205      	movs	r2, #5
 80024b6:	4903      	ldr	r1, [pc, #12]	; (80024c4 <sensor_Read+0x14>)
 80024b8:	4803      	ldr	r0, [pc, #12]	; (80024c8 <sensor_Read+0x18>)
 80024ba:	f000 fe33 	bl	8003124 <HAL_ADC_Start_DMA>
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200003d8 	.word	0x200003d8
 80024c8:	20000230 	.word	0x20000230

080024cc <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <sensor_GetTemperature+0x30>)
 80024d2:	891b      	ldrh	r3, [r3, #8]
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024dc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002500 <sensor_GetTemperature+0x34>
 80024e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002504 <sensor_GetTemperature+0x38>
 80024e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80024f0:	eeb0 0a67 	vmov.f32	s0, s15
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	200003d8 	.word	0x200003d8
 8002500:	43a50000 	.word	0x43a50000
 8002504:	457ff000 	.word	0x457ff000

08002508 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800250c:	4803      	ldr	r0, [pc, #12]	; (800251c <timer_init+0x14>)
 800250e:	f003 fd17 	bl	8005f40 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002512:	4803      	ldr	r0, [pc, #12]	; (8002520 <timer_init+0x18>)
 8002514:	f003 fcac 	bl	8005e70 <HAL_TIM_Base_Start>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	200004cc 	.word	0x200004cc
 8002520:	20000484 	.word	0x20000484

08002524 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800252e:	4a08      	ldr	r2, [pc, #32]	; (8002550 <setTimer2+0x2c>)
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <setTimer2+0x2c>)
 8002536:	881a      	ldrh	r2, [r3, #0]
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <setTimer2+0x30>)
 800253a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <setTimer2+0x34>)
 800253e:	2200      	movs	r2, #0
 8002540:	801a      	strh	r2, [r3, #0]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	2000021c 	.word	0x2000021c
 8002554:	2000021a 	.word	0x2000021a
 8002558:	20000218 	.word	0x20000218

0800255c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256c:	d116      	bne.n	800259c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d010      	beq.n	8002598 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002580:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800258c:	2201      	movs	r2, #1
 800258e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002592:	881a      	ldrh	r2, [r3, #0]
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002596:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002598:	f7ff fd82 	bl	80020a0 <led7_Scan>
	}
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	2000021a 	.word	0x2000021a
 80025a8:	20000218 	.word	0x20000218
 80025ac:	2000021c 	.word	0x2000021c

080025b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025b4:	4b17      	ldr	r3, [pc, #92]	; (8002614 <MX_SPI1_Init+0x64>)
 80025b6:	4a18      	ldr	r2, [pc, #96]	; (8002618 <MX_SPI1_Init+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <MX_SPI1_Init+0x64>)
 80025bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <MX_SPI1_Init+0x64>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <MX_SPI1_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <MX_SPI1_Init+0x64>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <MX_SPI1_Init+0x64>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <MX_SPI1_Init+0x64>)
 80025dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <MX_SPI1_Init+0x64>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <MX_SPI1_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <MX_SPI1_Init+0x64>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <MX_SPI1_Init+0x64>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <MX_SPI1_Init+0x64>)
 80025fc:	220a      	movs	r2, #10
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <MX_SPI1_Init+0x64>)
 8002602:	f002 fdf9 	bl	80051f8 <HAL_SPI_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800260c:	f7ff ff4a 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200003e4 	.word	0x200003e4
 8002618:	40013000 	.word	0x40013000

0800261c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <HAL_SPI_MspInit+0x84>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d12b      	bne.n	8002696 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <HAL_SPI_MspInit+0x88>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <HAL_SPI_MspInit+0x88>)
 8002648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <HAL_SPI_MspInit+0x88>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_SPI_MspInit+0x88>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a10      	ldr	r2, [pc, #64]	; (80026a4 <HAL_SPI_MspInit+0x88>)
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_SPI_MspInit+0x88>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002676:	2338      	movs	r3, #56	; 0x38
 8002678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002686:	2305      	movs	r3, #5
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	4619      	mov	r1, r3
 8002690:	4805      	ldr	r0, [pc, #20]	; (80026a8 <HAL_SPI_MspInit+0x8c>)
 8002692:	f001 fe29 	bl	80042e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002696:	bf00      	nop
 8002698:	3728      	adds	r7, #40	; 0x28
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40013000 	.word	0x40013000
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40020400 	.word	0x40020400

080026ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_MspInit+0x4c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <HAL_MspInit+0x4c>)
 80026bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c0:	6453      	str	r3, [r2, #68]	; 0x44
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <HAL_MspInit+0x4c>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_MspInit+0x4c>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <HAL_MspInit+0x4c>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_MspInit+0x4c>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <NMI_Handler+0x4>

08002702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <HardFault_Handler+0x4>

08002708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800270c:	e7fe      	b.n	800270c <MemManage_Handler+0x4>

0800270e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <BusFault_Handler+0x4>

08002714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <UsageFault_Handler+0x4>

0800271a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002748:	f000 fc64 	bl	8003014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}

08002750 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <TIM2_IRQHandler+0x10>)
 8002756:	f003 fcbc 	bl	80060d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200004cc 	.word	0x200004cc

08002764 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <USART1_IRQHandler+0x10>)
 800276a:	f004 fbf7 	bl	8006f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000514 	.word	0x20000514

08002778 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <USART2_IRQHandler+0x10>)
 800277e:	f004 fbed 	bl	8006f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000558 	.word	0x20000558

0800278c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <DMA2_Stream0_IRQHandler+0x10>)
 8002792:	f001 fb3f 	bl	8003e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000278 	.word	0x20000278

080027a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
	return 1;
 80027a4:	2301      	movs	r3, #1
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <_kill>:

int _kill(int pid, int sig)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027ba:	f005 fb57 	bl	8007e6c <__errno>
 80027be:	4603      	mov	r3, r0
 80027c0:	2216      	movs	r2, #22
 80027c2:	601a      	str	r2, [r3, #0]
	return -1;
 80027c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_exit>:

void _exit (int status)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ffe7 	bl	80027b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027e2:	e7fe      	b.n	80027e2 <_exit+0x12>

080027e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	e00a      	b.n	800280c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027f6:	f3af 8000 	nop.w
 80027fa:	4601      	mov	r1, r0
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	60ba      	str	r2, [r7, #8]
 8002802:	b2ca      	uxtb	r2, r1
 8002804:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3301      	adds	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	429a      	cmp	r2, r3
 8002812:	dbf0      	blt.n	80027f6 <_read+0x12>
	}

return len;
 8002814:	687b      	ldr	r3, [r7, #4]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	e009      	b.n	8002844 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	60ba      	str	r2, [r7, #8]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	3301      	adds	r3, #1
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	429a      	cmp	r2, r3
 800284a:	dbf1      	blt.n	8002830 <_write+0x12>
	}
	return len;
 800284c:	687b      	ldr	r3, [r7, #4]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <_close>:

int _close(int file)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
	return -1;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800287e:	605a      	str	r2, [r3, #4]
	return 0;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <_isatty>:

int _isatty(int file)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
	return 1;
 8002896:	2301      	movs	r3, #1
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
	return 0;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c8:	4a14      	ldr	r2, [pc, #80]	; (800291c <_sbrk+0x5c>)
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <_sbrk+0x60>)
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d4:	4b13      	ldr	r3, [pc, #76]	; (8002924 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <_sbrk+0x64>)
 80028de:	4a12      	ldr	r2, [pc, #72]	; (8002928 <_sbrk+0x68>)
 80028e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d207      	bcs.n	8002900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f0:	f005 fabc 	bl	8007e6c <__errno>
 80028f4:	4603      	mov	r3, r0
 80028f6:	220c      	movs	r2, #12
 80028f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	e009      	b.n	8002914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002906:	4b07      	ldr	r3, [pc, #28]	; (8002924 <_sbrk+0x64>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	4a05      	ldr	r2, [pc, #20]	; (8002924 <_sbrk+0x64>)
 8002910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002912:	68fb      	ldr	r3, [r7, #12]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20020000 	.word	0x20020000
 8002920:	00000400 	.word	0x00000400
 8002924:	20000220 	.word	0x20000220
 8002928:	200005b0 	.word	0x200005b0

0800292c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <SystemInit+0x20>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	4a05      	ldr	r2, [pc, #20]	; (800294c <SystemInit+0x20>)
 8002938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800293c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002964:	463b      	mov	r3, r7
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <MX_TIM1_Init+0x98>)
 800296e:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <MX_TIM1_Init+0x9c>)
 8002970:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <MX_TIM1_Init+0x98>)
 8002974:	2253      	movs	r2, #83	; 0x53
 8002976:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <MX_TIM1_Init+0x98>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <MX_TIM1_Init+0x98>)
 8002980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002984:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002986:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <MX_TIM1_Init+0x98>)
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800298c:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <MX_TIM1_Init+0x98>)
 800298e:	2200      	movs	r2, #0
 8002990:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <MX_TIM1_Init+0x98>)
 8002994:	2200      	movs	r2, #0
 8002996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002998:	4813      	ldr	r0, [pc, #76]	; (80029e8 <MX_TIM1_Init+0x98>)
 800299a:	f003 fa19 	bl	8005dd0 <HAL_TIM_Base_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80029a4:	f7ff fd7e 	bl	80024a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029ae:	f107 0308 	add.w	r3, r7, #8
 80029b2:	4619      	mov	r1, r3
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <MX_TIM1_Init+0x98>)
 80029b6:	f003 fd57 	bl	8006468 <HAL_TIM_ConfigClockSource>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80029c0:	f7ff fd70 	bl	80024a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c4:	2300      	movs	r3, #0
 80029c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029cc:	463b      	mov	r3, r7
 80029ce:	4619      	mov	r1, r3
 80029d0:	4805      	ldr	r0, [pc, #20]	; (80029e8 <MX_TIM1_Init+0x98>)
 80029d2:	f004 f923 	bl	8006c1c <HAL_TIMEx_MasterConfigSynchronization>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80029dc:	f7ff fd62 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000484 	.word	0x20000484
 80029ec:	40010000 	.word	0x40010000

080029f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f6:	f107 0308 	add.w	r3, r7, #8
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a04:	463b      	mov	r3, r7
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <MX_TIM2_Init+0x94>)
 8002a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <MX_TIM2_Init+0x94>)
 8002a16:	f240 3247 	movw	r2, #839	; 0x347
 8002a1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <MX_TIM2_Init+0x94>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002a22:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <MX_TIM2_Init+0x94>)
 8002a24:	2263      	movs	r2, #99	; 0x63
 8002a26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a28:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <MX_TIM2_Init+0x94>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <MX_TIM2_Init+0x94>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a34:	4813      	ldr	r0, [pc, #76]	; (8002a84 <MX_TIM2_Init+0x94>)
 8002a36:	f003 f9cb 	bl	8005dd0 <HAL_TIM_Base_Init>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a40:	f7ff fd30 	bl	80024a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a4a:	f107 0308 	add.w	r3, r7, #8
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480c      	ldr	r0, [pc, #48]	; (8002a84 <MX_TIM2_Init+0x94>)
 8002a52:	f003 fd09 	bl	8006468 <HAL_TIM_ConfigClockSource>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a5c:	f7ff fd22 	bl	80024a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a60:	2300      	movs	r3, #0
 8002a62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a68:	463b      	mov	r3, r7
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MX_TIM2_Init+0x94>)
 8002a6e:	f004 f8d5 	bl	8006c1c <HAL_TIMEx_MasterConfigSynchronization>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a78:	f7ff fd14 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a7c:	bf00      	nop
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	200004cc 	.word	0x200004cc

08002a88 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
 8002a9c:	615a      	str	r2, [r3, #20]
 8002a9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <MX_TIM13_Init+0x94>)
 8002aa2:	4a1f      	ldr	r2, [pc, #124]	; (8002b20 <MX_TIM13_Init+0x98>)
 8002aa4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <MX_TIM13_Init+0x94>)
 8002aa8:	f240 3247 	movw	r2, #839	; 0x347
 8002aac:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <MX_TIM13_Init+0x94>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <MX_TIM13_Init+0x94>)
 8002ab6:	2263      	movs	r2, #99	; 0x63
 8002ab8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <MX_TIM13_Init+0x94>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac0:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <MX_TIM13_Init+0x94>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002ac6:	4815      	ldr	r0, [pc, #84]	; (8002b1c <MX_TIM13_Init+0x94>)
 8002ac8:	f003 f982 	bl	8005dd0 <HAL_TIM_Base_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002ad2:	f7ff fce7 	bl	80024a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002ad6:	4811      	ldr	r0, [pc, #68]	; (8002b1c <MX_TIM13_Init+0x94>)
 8002ad8:	f003 faa2 	bl	8006020 <HAL_TIM_PWM_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002ae2:	f7ff fcdf 	bl	80024a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae6:	2360      	movs	r3, #96	; 0x60
 8002ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	2200      	movs	r2, #0
 8002afa:	4619      	mov	r1, r3
 8002afc:	4807      	ldr	r0, [pc, #28]	; (8002b1c <MX_TIM13_Init+0x94>)
 8002afe:	f003 fbf1 	bl	80062e4 <HAL_TIM_PWM_ConfigChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002b08:	f7ff fccc 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002b0c:	4803      	ldr	r0, [pc, #12]	; (8002b1c <MX_TIM13_Init+0x94>)
 8002b0e:	f000 f85b 	bl	8002bc8 <HAL_TIM_MspPostInit>

}
 8002b12:	bf00      	nop
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	2000043c 	.word	0x2000043c
 8002b20:	40001c00 	.word	0x40001c00

08002b24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <HAL_TIM_Base_MspInit+0x98>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d10e      	bne.n	8002b54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6453      	str	r3, [r2, #68]	; 0x44
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002b52:	e02e      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d116      	bne.n	8002b8c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4a16      	ldr	r2, [pc, #88]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6e:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	201c      	movs	r0, #28
 8002b80:	f000 ff79 	bl	8003a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b84:	201c      	movs	r0, #28
 8002b86:	f000 ff92 	bl	8003aae <HAL_NVIC_EnableIRQ>
}
 8002b8a:	e012      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <HAL_TIM_Base_MspInit+0xa0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d10d      	bne.n	8002bb2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a08      	ldr	r2, [pc, #32]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40001c00 	.word	0x40001c00

08002bc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <HAL_TIM_MspPostInit+0x68>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d11e      	bne.n	8002c28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <HAL_TIM_MspPostInit+0x6c>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a10      	ldr	r2, [pc, #64]	; (8002c34 <HAL_TIM_MspPostInit+0x6c>)
 8002bf4:	f043 0320 	orr.w	r3, r3, #32
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <HAL_TIM_MspPostInit+0x6c>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002c18:	2309      	movs	r3, #9
 8002c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c1c:	f107 030c 	add.w	r3, r7, #12
 8002c20:	4619      	mov	r1, r3
 8002c22:	4805      	ldr	r0, [pc, #20]	; (8002c38 <HAL_TIM_MspPostInit+0x70>)
 8002c24:	f001 fb60 	bl	80042e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002c28:	bf00      	nop
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40001c00 	.word	0x40001c00
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40021400 	.word	0x40021400

08002c3c <uart_init_rs232>:
uint8_t msg[100];

uint8_t receive_buffer1 = 0, receive_buffer2 = 0;
uint8_t check_esp = 0;

void uart_init_rs232(){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002c40:	2201      	movs	r2, #1
 8002c42:	4903      	ldr	r1, [pc, #12]	; (8002c50 <uart_init_rs232+0x14>)
 8002c44:	4803      	ldr	r0, [pc, #12]	; (8002c54 <uart_init_rs232+0x18>)
 8002c46:	f004 f958 	bl	8006efa <HAL_UART_Receive_IT>
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000224 	.word	0x20000224
 8002c54:	20000514 	.word	0x20000514

08002c58 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	4906      	ldr	r1, [pc, #24]	; (8002c78 <uart_init_esp+0x20>)
 8002c60:	4806      	ldr	r0, [pc, #24]	; (8002c7c <uart_init_esp+0x24>)
 8002c62:	f004 f94a 	bl	8006efa <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8002c66:	2201      	movs	r2, #1
 8002c68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c6c:	4804      	ldr	r0, [pc, #16]	; (8002c80 <uart_init_esp+0x28>)
 8002c6e:	f001 fcd7 	bl	8004620 <HAL_GPIO_WritePin>
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000225 	.word	0x20000225
 8002c7c:	20000558 	.word	0x20000558
 8002c80:	40021400 	.word	0x40021400

08002c84 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8002c90:	887a      	ldrh	r2, [r7, #2]
 8002c92:	230a      	movs	r3, #10
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4803      	ldr	r0, [pc, #12]	; (8002ca4 <uart_EspSendBytes+0x20>)
 8002c98:	f004 f89d 	bl	8006dd6 <HAL_UART_Transmit>
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000558 	.word	0x20000558

08002ca8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a19      	ldr	r2, [pc, #100]	; (8002d1c <HAL_UART_RxCpltCallback+0x74>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002cba:	230a      	movs	r3, #10
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	4918      	ldr	r1, [pc, #96]	; (8002d20 <HAL_UART_RxCpltCallback+0x78>)
 8002cc0:	4818      	ldr	r0, [pc, #96]	; (8002d24 <HAL_UART_RxCpltCallback+0x7c>)
 8002cc2:	f004 f888 	bl	8006dd6 <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4915      	ldr	r1, [pc, #84]	; (8002d20 <HAL_UART_RxCpltCallback+0x78>)
 8002cca:	4816      	ldr	r0, [pc, #88]	; (8002d24 <HAL_UART_RxCpltCallback+0x7c>)
 8002ccc:	f004 f915 	bl	8006efa <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <HAL_UART_RxCpltCallback+0x80>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d11b      	bne.n	8002d12 <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <HAL_UART_RxCpltCallback+0x84>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b4f      	cmp	r3, #79	; 0x4f
 8002ce0:	d103      	bne.n	8002cea <HAL_UART_RxCpltCallback+0x42>
 8002ce2:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <HAL_UART_RxCpltCallback+0x88>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e00e      	b.n	8002d08 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <HAL_UART_RxCpltCallback+0x84>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b61      	cmp	r3, #97	; 0x61
 8002cf0:	d103      	bne.n	8002cfa <HAL_UART_RxCpltCallback+0x52>
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_UART_RxCpltCallback+0x8c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	e006      	b.n	8002d08 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_UART_RxCpltCallback+0x84>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b41      	cmp	r3, #65	; 0x41
 8002d00:	d102      	bne.n	8002d08 <HAL_UART_RxCpltCallback+0x60>
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <HAL_UART_RxCpltCallback+0x8c>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4908      	ldr	r1, [pc, #32]	; (8002d2c <HAL_UART_RxCpltCallback+0x84>)
 8002d0c:	480a      	ldr	r0, [pc, #40]	; (8002d38 <HAL_UART_RxCpltCallback+0x90>)
 8002d0e:	f004 f8f4 	bl	8006efa <HAL_UART_Receive_IT>
	}
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40011000 	.word	0x40011000
 8002d20:	20000224 	.word	0x20000224
 8002d24:	20000514 	.word	0x20000514
 8002d28:	40004400 	.word	0x40004400
 8002d2c:	20000225 	.word	0x20000225
 8002d30:	20000226 	.word	0x20000226
 8002d34:	20000210 	.word	0x20000210
 8002d38:	20000558 	.word	0x20000558

08002d3c <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <uart_EspCheck+0x1c>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <uart_EspCheck+0x10>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <uart_EspCheck+0x12>
	return 0;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	20000226 	.word	0x20000226

08002d5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <MX_USART1_UART_Init+0x50>)
 8002d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d82:	220c      	movs	r2, #12
 8002d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d92:	4805      	ldr	r0, [pc, #20]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d94:	f003 ffd2 	bl	8006d3c <HAL_UART_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d9e:	f7ff fb81 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000514 	.word	0x20000514
 8002dac:	40011000 	.word	0x40011000

08002db0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <MX_USART2_UART_Init+0x50>)
 8002db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dd6:	220c      	movs	r2, #12
 8002dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002de8:	f003 ffa8 	bl	8006d3c <HAL_UART_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002df2:	f7ff fb57 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000558 	.word	0x20000558
 8002e00:	40004400 	.word	0x40004400

08002e04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	; 0x30
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 031c 	add.w	r3, r7, #28
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a3a      	ldr	r2, [pc, #232]	; (8002f0c <HAL_UART_MspInit+0x108>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d135      	bne.n	8002e92 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	4b39      	ldr	r3, [pc, #228]	; (8002f10 <HAL_UART_MspInit+0x10c>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	4a38      	ldr	r2, [pc, #224]	; (8002f10 <HAL_UART_MspInit+0x10c>)
 8002e30:	f043 0310 	orr.w	r3, r3, #16
 8002e34:	6453      	str	r3, [r2, #68]	; 0x44
 8002e36:	4b36      	ldr	r3, [pc, #216]	; (8002f10 <HAL_UART_MspInit+0x10c>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	4b32      	ldr	r3, [pc, #200]	; (8002f10 <HAL_UART_MspInit+0x10c>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a31      	ldr	r2, [pc, #196]	; (8002f10 <HAL_UART_MspInit+0x10c>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <HAL_UART_MspInit+0x10c>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e70:	2307      	movs	r3, #7
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e74:	f107 031c 	add.w	r3, r7, #28
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4826      	ldr	r0, [pc, #152]	; (8002f14 <HAL_UART_MspInit+0x110>)
 8002e7c:	f001 fa34 	bl	80042e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2100      	movs	r1, #0
 8002e84:	2025      	movs	r0, #37	; 0x25
 8002e86:	f000 fdf6 	bl	8003a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e8a:	2025      	movs	r0, #37	; 0x25
 8002e8c:	f000 fe0f 	bl	8003aae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002e90:	e038      	b.n	8002f04 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a20      	ldr	r2, [pc, #128]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d133      	bne.n	8002f04 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <HAL_UART_MspInit+0x10c>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	4a1a      	ldr	r2, [pc, #104]	; (8002f10 <HAL_UART_MspInit+0x10c>)
 8002ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8002eac:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <HAL_UART_MspInit+0x10c>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <HAL_UART_MspInit+0x10c>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <HAL_UART_MspInit+0x10c>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <HAL_UART_MspInit+0x10c>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ed4:	230c      	movs	r3, #12
 8002ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ee4:	2307      	movs	r3, #7
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee8:	f107 031c 	add.w	r3, r7, #28
 8002eec:	4619      	mov	r1, r3
 8002eee:	4809      	ldr	r0, [pc, #36]	; (8002f14 <HAL_UART_MspInit+0x110>)
 8002ef0:	f001 f9fa 	bl	80042e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	2026      	movs	r0, #38	; 0x26
 8002efa:	f000 fdbc 	bl	8003a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002efe:	2026      	movs	r0, #38	; 0x26
 8002f00:	f000 fdd5 	bl	8003aae <HAL_NVIC_EnableIRQ>
}
 8002f04:	bf00      	nop
 8002f06:	3730      	adds	r7, #48	; 0x30
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40011000 	.word	0x40011000
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40020000 	.word	0x40020000
 8002f18:	40004400 	.word	0x40004400

08002f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f20:	480d      	ldr	r0, [pc, #52]	; (8002f58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f22:	490e      	ldr	r1, [pc, #56]	; (8002f5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f24:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f28:	e002      	b.n	8002f30 <LoopCopyDataInit>

08002f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f2e:	3304      	adds	r3, #4

08002f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f34:	d3f9      	bcc.n	8002f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f36:	4a0b      	ldr	r2, [pc, #44]	; (8002f64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f38:	4c0b      	ldr	r4, [pc, #44]	; (8002f68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f3c:	e001      	b.n	8002f42 <LoopFillZerobss>

08002f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f40:	3204      	adds	r2, #4

08002f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f44:	d3fb      	bcc.n	8002f3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f46:	f7ff fcf1 	bl	800292c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f4a:	f004 ff95 	bl	8007e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f4e:	f7ff f98b 	bl	8002268 <main>
  bx  lr    
 8002f52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f5c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002f60:	0800fbbc 	.word	0x0800fbbc
  ldr r2, =_sbss
 8002f64:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002f68:	200005b0 	.word	0x200005b0

08002f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f6c:	e7fe      	b.n	8002f6c <ADC_IRQHandler>
	...

08002f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <HAL_Init+0x40>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <HAL_Init+0x40>)
 8002f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_Init+0x40>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <HAL_Init+0x40>)
 8002f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <HAL_Init+0x40>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a07      	ldr	r2, [pc, #28]	; (8002fb0 <HAL_Init+0x40>)
 8002f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f98:	2003      	movs	r0, #3
 8002f9a:	f000 fd61 	bl	8003a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f9e:	200f      	movs	r0, #15
 8002fa0:	f000 f808 	bl	8002fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa4:	f7ff fb82 	bl	80026ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023c00 	.word	0x40023c00

08002fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fbc:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_InitTick+0x54>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_InitTick+0x58>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fd79 	bl	8003aca <HAL_SYSTICK_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00e      	b.n	8003000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b0f      	cmp	r3, #15
 8002fe6:	d80a      	bhi.n	8002ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	f000 fd41 	bl	8003a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff4:	4a06      	ldr	r2, [pc, #24]	; (8003010 <HAL_InitTick+0x5c>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e000      	b.n	8003000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000008 	.word	0x20000008
 800300c:	20000010 	.word	0x20000010
 8003010:	2000000c 	.word	0x2000000c

08003014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_IncTick+0x20>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_IncTick+0x24>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4413      	add	r3, r2
 8003024:	4a04      	ldr	r2, [pc, #16]	; (8003038 <HAL_IncTick+0x24>)
 8003026:	6013      	str	r3, [r2, #0]
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000010 	.word	0x20000010
 8003038:	2000059c 	.word	0x2000059c

0800303c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return uwTick;
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <HAL_GetTick+0x14>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	2000059c 	.word	0x2000059c

08003054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7ff ffee 	bl	800303c <HAL_GetTick>
 8003060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d005      	beq.n	800307a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_Delay+0x44>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800307a:	bf00      	nop
 800307c:	f7ff ffde 	bl	800303c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	429a      	cmp	r2, r3
 800308a:	d8f7      	bhi.n	800307c <HAL_Delay+0x28>
  {
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000010 	.word	0x20000010

0800309c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e033      	b.n	800311a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe f820 	bl	8001100 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d118      	bne.n	800310c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030e2:	f023 0302 	bic.w	r3, r3, #2
 80030e6:	f043 0202 	orr.w	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fa68 	bl	80035c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	f043 0201 	orr.w	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
 800310a:	e001      	b.n	8003110 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_ADC_Start_DMA+0x1e>
 800313e:	2302      	movs	r3, #2
 8003140:	e0e9      	b.n	8003316 <HAL_ADC_Start_DMA+0x1f2>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d018      	beq.n	800318a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003168:	4b6d      	ldr	r3, [pc, #436]	; (8003320 <HAL_ADC_Start_DMA+0x1fc>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a6d      	ldr	r2, [pc, #436]	; (8003324 <HAL_ADC_Start_DMA+0x200>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0c9a      	lsrs	r2, r3, #18
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800317c:	e002      	b.n	8003184 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	3b01      	subs	r3, #1
 8003182:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f9      	bne.n	800317e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003198:	d107      	bne.n	80031aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	f040 80a1 	bne.w	80032fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d007      	beq.n	80031ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f8:	d106      	bne.n	8003208 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f023 0206 	bic.w	r2, r3, #6
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
 8003206:	e002      	b.n	800320e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003216:	4b44      	ldr	r3, [pc, #272]	; (8003328 <HAL_ADC_Start_DMA+0x204>)
 8003218:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	4a43      	ldr	r2, [pc, #268]	; (800332c <HAL_ADC_Start_DMA+0x208>)
 8003220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	4a42      	ldr	r2, [pc, #264]	; (8003330 <HAL_ADC_Start_DMA+0x20c>)
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	4a41      	ldr	r2, [pc, #260]	; (8003334 <HAL_ADC_Start_DMA+0x210>)
 8003230:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800323a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800324a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800325a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	334c      	adds	r3, #76	; 0x4c
 8003266:	4619      	mov	r1, r3
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f000 fce8 	bl	8003c40 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	2b00      	cmp	r3, #0
 800327a:	d12a      	bne.n	80032d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a2d      	ldr	r2, [pc, #180]	; (8003338 <HAL_ADC_Start_DMA+0x214>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d015      	beq.n	80032b2 <HAL_ADC_Start_DMA+0x18e>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a2c      	ldr	r2, [pc, #176]	; (800333c <HAL_ADC_Start_DMA+0x218>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d105      	bne.n	800329c <HAL_ADC_Start_DMA+0x178>
 8003290:	4b25      	ldr	r3, [pc, #148]	; (8003328 <HAL_ADC_Start_DMA+0x204>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a27      	ldr	r2, [pc, #156]	; (8003340 <HAL_ADC_Start_DMA+0x21c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d136      	bne.n	8003314 <HAL_ADC_Start_DMA+0x1f0>
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_ADC_Start_DMA+0x204>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d130      	bne.n	8003314 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d129      	bne.n	8003314 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	e020      	b.n	8003314 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a18      	ldr	r2, [pc, #96]	; (8003338 <HAL_ADC_Start_DMA+0x214>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d11b      	bne.n	8003314 <HAL_ADC_Start_DMA+0x1f0>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d114      	bne.n	8003314 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	e00b      	b.n	8003314 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f043 0210 	orr.w	r2, r3, #16
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	f043 0201 	orr.w	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000008 	.word	0x20000008
 8003324:	431bde83 	.word	0x431bde83
 8003328:	40012300 	.word	0x40012300
 800332c:	080037bd 	.word	0x080037bd
 8003330:	08003877 	.word	0x08003877
 8003334:	08003893 	.word	0x08003893
 8003338:	40012000 	.word	0x40012000
 800333c:	40012100 	.word	0x40012100
 8003340:	40012200 	.word	0x40012200

08003344 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_ADC_ConfigChannel+0x1c>
 8003398:	2302      	movs	r3, #2
 800339a:	e105      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x228>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b09      	cmp	r3, #9
 80033aa:	d925      	bls.n	80033f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68d9      	ldr	r1, [r3, #12]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	3b1e      	subs	r3, #30
 80033c2:	2207      	movs	r2, #7
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43da      	mvns	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	400a      	ands	r2, r1
 80033d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68d9      	ldr	r1, [r3, #12]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	4603      	mov	r3, r0
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4403      	add	r3, r0
 80033ea:	3b1e      	subs	r3, #30
 80033ec:	409a      	lsls	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	e022      	b.n	800343e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6919      	ldr	r1, [r3, #16]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	b29b      	uxth	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	4613      	mov	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4413      	add	r3, r2
 800340c:	2207      	movs	r2, #7
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43da      	mvns	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	400a      	ands	r2, r1
 800341a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6919      	ldr	r1, [r3, #16]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	4618      	mov	r0, r3
 800342e:	4603      	mov	r3, r0
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4403      	add	r3, r0
 8003434:	409a      	lsls	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b06      	cmp	r3, #6
 8003444:	d824      	bhi.n	8003490 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	3b05      	subs	r3, #5
 8003458:	221f      	movs	r2, #31
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43da      	mvns	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	400a      	ands	r2, r1
 8003466:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	4618      	mov	r0, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	3b05      	subs	r3, #5
 8003482:	fa00 f203 	lsl.w	r2, r0, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	635a      	str	r2, [r3, #52]	; 0x34
 800348e:	e04c      	b.n	800352a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b0c      	cmp	r3, #12
 8003496:	d824      	bhi.n	80034e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	3b23      	subs	r3, #35	; 0x23
 80034aa:	221f      	movs	r2, #31
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43da      	mvns	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	400a      	ands	r2, r1
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	4618      	mov	r0, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	3b23      	subs	r3, #35	; 0x23
 80034d4:	fa00 f203 	lsl.w	r2, r0, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
 80034e0:	e023      	b.n	800352a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	3b41      	subs	r3, #65	; 0x41
 80034f4:	221f      	movs	r2, #31
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43da      	mvns	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	400a      	ands	r2, r1
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	b29b      	uxth	r3, r3
 8003510:	4618      	mov	r0, r3
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	3b41      	subs	r3, #65	; 0x41
 800351e:	fa00 f203 	lsl.w	r2, r0, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <HAL_ADC_ConfigChannel+0x234>)
 800352c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a21      	ldr	r2, [pc, #132]	; (80035b8 <HAL_ADC_ConfigChannel+0x238>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d109      	bne.n	800354c <HAL_ADC_ConfigChannel+0x1cc>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b12      	cmp	r3, #18
 800353e:	d105      	bne.n	800354c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a19      	ldr	r2, [pc, #100]	; (80035b8 <HAL_ADC_ConfigChannel+0x238>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d123      	bne.n	800359e <HAL_ADC_ConfigChannel+0x21e>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b10      	cmp	r3, #16
 800355c:	d003      	beq.n	8003566 <HAL_ADC_ConfigChannel+0x1e6>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b11      	cmp	r3, #17
 8003564:	d11b      	bne.n	800359e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b10      	cmp	r3, #16
 8003578:	d111      	bne.n	800359e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_ADC_ConfigChannel+0x23c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a10      	ldr	r2, [pc, #64]	; (80035c0 <HAL_ADC_ConfigChannel+0x240>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	0c9a      	lsrs	r2, r3, #18
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003590:	e002      	b.n	8003598 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3b01      	subs	r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f9      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40012300 	.word	0x40012300
 80035b8:	40012000 	.word	0x40012000
 80035bc:	20000008 	.word	0x20000008
 80035c0:	431bde83 	.word	0x431bde83

080035c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035cc:	4b79      	ldr	r3, [pc, #484]	; (80037b4 <ADC_Init+0x1f0>)
 80035ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	021a      	lsls	r2, r3, #8
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800361c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800363e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6899      	ldr	r1, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	4a58      	ldr	r2, [pc, #352]	; (80037b8 <ADC_Init+0x1f4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800366a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6899      	ldr	r1, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800368c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6899      	ldr	r1, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	e00f      	b.n	80036c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0202 	bic.w	r2, r2, #2
 80036d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6899      	ldr	r1, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7e1b      	ldrb	r3, [r3, #24]
 80036dc:	005a      	lsls	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01b      	beq.n	8003728 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800370e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	3b01      	subs	r3, #1
 800371c:	035a      	lsls	r2, r3, #13
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	e007      	b.n	8003738 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003736:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	3b01      	subs	r3, #1
 8003754:	051a      	lsls	r2, r3, #20
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800376c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6899      	ldr	r1, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800377a:	025a      	lsls	r2, r3, #9
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6899      	ldr	r1, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	029a      	lsls	r2, r3, #10
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	40012300 	.word	0x40012300
 80037b8:	0f000001 	.word	0x0f000001

080037bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d13c      	bne.n	8003850 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d12b      	bne.n	8003848 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d127      	bne.n	8003848 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003802:	2b00      	cmp	r3, #0
 8003804:	d006      	beq.n	8003814 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003810:	2b00      	cmp	r3, #0
 8003812:	d119      	bne.n	8003848 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0220 	bic.w	r2, r2, #32
 8003822:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d105      	bne.n	8003848 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	f043 0201 	orr.w	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f7ff fd7b 	bl	8003344 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800384e:	e00e      	b.n	800386e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7ff fd85 	bl	800336c <HAL_ADC_ErrorCallback>
}
 8003862:	e004      	b.n	800386e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	4798      	blx	r3
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7ff fd67 	bl	8003358 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2240      	movs	r2, #64	; 0x40
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f043 0204 	orr.w	r2, r3, #4
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f7ff fd5a 	bl	800336c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038b8:	bf00      	nop
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <__NVIC_SetPriorityGrouping+0x44>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038dc:	4013      	ands	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038f2:	4a04      	ldr	r2, [pc, #16]	; (8003904 <__NVIC_SetPriorityGrouping+0x44>)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	60d3      	str	r3, [r2, #12]
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <__NVIC_GetPriorityGrouping+0x18>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	f003 0307 	and.w	r3, r3, #7
}
 8003916:	4618      	mov	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	2b00      	cmp	r3, #0
 8003934:	db0b      	blt.n	800394e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	f003 021f 	and.w	r2, r3, #31
 800393c:	4907      	ldr	r1, [pc, #28]	; (800395c <__NVIC_EnableIRQ+0x38>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	2001      	movs	r0, #1
 8003946:	fa00 f202 	lsl.w	r2, r0, r2
 800394a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	e000e100 	.word	0xe000e100

08003960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	6039      	str	r1, [r7, #0]
 800396a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003970:	2b00      	cmp	r3, #0
 8003972:	db0a      	blt.n	800398a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	b2da      	uxtb	r2, r3
 8003978:	490c      	ldr	r1, [pc, #48]	; (80039ac <__NVIC_SetPriority+0x4c>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	0112      	lsls	r2, r2, #4
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	440b      	add	r3, r1
 8003984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003988:	e00a      	b.n	80039a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	4908      	ldr	r1, [pc, #32]	; (80039b0 <__NVIC_SetPriority+0x50>)
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	3b04      	subs	r3, #4
 8003998:	0112      	lsls	r2, r2, #4
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	440b      	add	r3, r1
 800399e:	761a      	strb	r2, [r3, #24]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	e000e100 	.word	0xe000e100
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b089      	sub	sp, #36	; 0x24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f1c3 0307 	rsb	r3, r3, #7
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	bf28      	it	cs
 80039d2:	2304      	movcs	r3, #4
 80039d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3304      	adds	r3, #4
 80039da:	2b06      	cmp	r3, #6
 80039dc:	d902      	bls.n	80039e4 <NVIC_EncodePriority+0x30>
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3b03      	subs	r3, #3
 80039e2:	e000      	b.n	80039e6 <NVIC_EncodePriority+0x32>
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43da      	mvns	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	401a      	ands	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	fa01 f303 	lsl.w	r3, r1, r3
 8003a06:	43d9      	mvns	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a0c:	4313      	orrs	r3, r2
         );
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3724      	adds	r7, #36	; 0x24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a2c:	d301      	bcc.n	8003a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e00f      	b.n	8003a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a32:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <SysTick_Config+0x40>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a3a:	210f      	movs	r1, #15
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	f7ff ff8e 	bl	8003960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <SysTick_Config+0x40>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a4a:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <SysTick_Config+0x40>)
 8003a4c:	2207      	movs	r2, #7
 8003a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	e000e010 	.word	0xe000e010

08003a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff29 	bl	80038c0 <__NVIC_SetPriorityGrouping>
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b086      	sub	sp, #24
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a88:	f7ff ff3e 	bl	8003908 <__NVIC_GetPriorityGrouping>
 8003a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	6978      	ldr	r0, [r7, #20]
 8003a94:	f7ff ff8e 	bl	80039b4 <NVIC_EncodePriority>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff5d 	bl	8003960 <__NVIC_SetPriority>
}
 8003aa6:	bf00      	nop
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ff31 	bl	8003924 <__NVIC_EnableIRQ>
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff ffa2 	bl	8003a1c <SysTick_Config>
 8003ad8:	4603      	mov	r3, r0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003af0:	f7ff faa4 	bl	800303c <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e099      	b.n	8003c34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b20:	e00f      	b.n	8003b42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b22:	f7ff fa8b 	bl	800303c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b05      	cmp	r3, #5
 8003b2e:	d908      	bls.n	8003b42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2203      	movs	r2, #3
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e078      	b.n	8003c34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e8      	bne.n	8003b22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4b38      	ldr	r3, [pc, #224]	; (8003c3c <HAL_DMA_Init+0x158>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d107      	bne.n	8003bac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f023 0307 	bic.w	r3, r3, #7
 8003bc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d117      	bne.n	8003c06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00e      	beq.n	8003c06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fb01 	bl	80041f0 <DMA_CheckFifoParam>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2240      	movs	r2, #64	; 0x40
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c02:	2301      	movs	r3, #1
 8003c04:	e016      	b.n	8003c34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fab8 	bl	8004184 <DMA_CalcBaseAndBitshift>
 8003c14:	4603      	mov	r3, r0
 8003c16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1c:	223f      	movs	r2, #63	; 0x3f
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	f010803f 	.word	0xf010803f

08003c40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_DMA_Start_IT+0x26>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e040      	b.n	8003ce8 <HAL_DMA_Start_IT+0xa8>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d12f      	bne.n	8003cda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fa4a 	bl	8004128 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	223f      	movs	r2, #63	; 0x3f
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0216 	orr.w	r2, r2, #22
 8003cae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0208 	orr.w	r2, r2, #8
 8003cc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	e005      	b.n	8003ce6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cfe:	f7ff f99d 	bl	800303c <HAL_GetTick>
 8003d02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d008      	beq.n	8003d22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e052      	b.n	8003dc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0216 	bic.w	r2, r2, #22
 8003d30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d103      	bne.n	8003d52 <HAL_DMA_Abort+0x62>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0208 	bic.w	r2, r2, #8
 8003d60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0201 	bic.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d72:	e013      	b.n	8003d9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d74:	f7ff f962 	bl	800303c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b05      	cmp	r3, #5
 8003d80:	d90c      	bls.n	8003d9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2220      	movs	r2, #32
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e015      	b.n	8003dc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e4      	bne.n	8003d74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	223f      	movs	r2, #63	; 0x3f
 8003db0:	409a      	lsls	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d004      	beq.n	8003dee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e00c      	b.n	8003e08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2205      	movs	r2, #5
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e20:	4b92      	ldr	r3, [pc, #584]	; (800406c <HAL_DMA_IRQHandler+0x258>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a92      	ldr	r2, [pc, #584]	; (8004070 <HAL_DMA_IRQHandler+0x25c>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	0a9b      	lsrs	r3, r3, #10
 8003e2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3e:	2208      	movs	r2, #8
 8003e40:	409a      	lsls	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01a      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d013      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0204 	bic.w	r2, r2, #4
 8003e66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e78:	f043 0201 	orr.w	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	2201      	movs	r2, #1
 8003e86:	409a      	lsls	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d012      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	f043 0202 	orr.w	r2, r3, #2
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	2204      	movs	r2, #4
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d012      	beq.n	8003eec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	2204      	movs	r2, #4
 8003eda:	409a      	lsls	r2, r3
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	f043 0204 	orr.w	r2, r3, #4
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d043      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d03c      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	2210      	movs	r2, #16
 8003f10:	409a      	lsls	r2, r3
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d018      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d108      	bne.n	8003f44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d024      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	4798      	blx	r3
 8003f42:	e01f      	b.n	8003f84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01b      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
 8003f54:	e016      	b.n	8003f84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d107      	bne.n	8003f74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0208 	bic.w	r2, r2, #8
 8003f72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f88:	2220      	movs	r2, #32
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 808e 	beq.w	80040b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8086 	beq.w	80040b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	2220      	movs	r2, #32
 8003fac:	409a      	lsls	r2, r3
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b05      	cmp	r3, #5
 8003fbc:	d136      	bne.n	800402c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0216 	bic.w	r2, r2, #22
 8003fcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d103      	bne.n	8003fee <HAL_DMA_IRQHandler+0x1da>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0208 	bic.w	r2, r2, #8
 8003ffc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004002:	223f      	movs	r2, #63	; 0x3f
 8004004:	409a      	lsls	r2, r3
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401e:	2b00      	cmp	r3, #0
 8004020:	d07d      	beq.n	800411e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	4798      	blx	r3
        }
        return;
 800402a:	e078      	b.n	800411e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01c      	beq.n	8004074 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d108      	bne.n	800405a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404c:	2b00      	cmp	r3, #0
 800404e:	d030      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	4798      	blx	r3
 8004058:	e02b      	b.n	80040b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d027      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
 800406a:	e022      	b.n	80040b2 <HAL_DMA_IRQHandler+0x29e>
 800406c:	20000008 	.word	0x20000008
 8004070:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0210 	bic.w	r2, r2, #16
 8004090:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d032      	beq.n	8004120 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d022      	beq.n	800410c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2205      	movs	r2, #5
 80040ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0201 	bic.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	3301      	adds	r3, #1
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d307      	bcc.n	80040fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f2      	bne.n	80040de <HAL_DMA_IRQHandler+0x2ca>
 80040f8:	e000      	b.n	80040fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80040fa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4798      	blx	r3
 800411c:	e000      	b.n	8004120 <HAL_DMA_IRQHandler+0x30c>
        return;
 800411e:	bf00      	nop
    }
  }
}
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop

08004128 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004144:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d108      	bne.n	8004168 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004166:	e007      	b.n	8004178 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	60da      	str	r2, [r3, #12]
}
 8004178:	bf00      	nop
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	3b10      	subs	r3, #16
 8004194:	4a14      	ldr	r2, [pc, #80]	; (80041e8 <DMA_CalcBaseAndBitshift+0x64>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	091b      	lsrs	r3, r3, #4
 800419c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800419e:	4a13      	ldr	r2, [pc, #76]	; (80041ec <DMA_CalcBaseAndBitshift+0x68>)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d909      	bls.n	80041c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041ba:	f023 0303 	bic.w	r3, r3, #3
 80041be:	1d1a      	adds	r2, r3, #4
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	659a      	str	r2, [r3, #88]	; 0x58
 80041c4:	e007      	b.n	80041d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041ce:	f023 0303 	bic.w	r3, r3, #3
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	aaaaaaab 	.word	0xaaaaaaab
 80041ec:	0800f6ec 	.word	0x0800f6ec

080041f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d11f      	bne.n	800424a <DMA_CheckFifoParam+0x5a>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b03      	cmp	r3, #3
 800420e:	d856      	bhi.n	80042be <DMA_CheckFifoParam+0xce>
 8004210:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <DMA_CheckFifoParam+0x28>)
 8004212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004216:	bf00      	nop
 8004218:	08004229 	.word	0x08004229
 800421c:	0800423b 	.word	0x0800423b
 8004220:	08004229 	.word	0x08004229
 8004224:	080042bf 	.word	0x080042bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d046      	beq.n	80042c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004238:	e043      	b.n	80042c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004242:	d140      	bne.n	80042c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004248:	e03d      	b.n	80042c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004252:	d121      	bne.n	8004298 <DMA_CheckFifoParam+0xa8>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b03      	cmp	r3, #3
 8004258:	d837      	bhi.n	80042ca <DMA_CheckFifoParam+0xda>
 800425a:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <DMA_CheckFifoParam+0x70>)
 800425c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004260:	08004271 	.word	0x08004271
 8004264:	08004277 	.word	0x08004277
 8004268:	08004271 	.word	0x08004271
 800426c:	08004289 	.word	0x08004289
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
      break;
 8004274:	e030      	b.n	80042d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d025      	beq.n	80042ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004286:	e022      	b.n	80042ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004290:	d11f      	bne.n	80042d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004296:	e01c      	b.n	80042d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d903      	bls.n	80042a6 <DMA_CheckFifoParam+0xb6>
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d003      	beq.n	80042ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042a4:	e018      	b.n	80042d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
      break;
 80042aa:	e015      	b.n	80042d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00e      	beq.n	80042d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
      break;
 80042bc:	e00b      	b.n	80042d6 <DMA_CheckFifoParam+0xe6>
      break;
 80042be:	bf00      	nop
 80042c0:	e00a      	b.n	80042d8 <DMA_CheckFifoParam+0xe8>
      break;
 80042c2:	bf00      	nop
 80042c4:	e008      	b.n	80042d8 <DMA_CheckFifoParam+0xe8>
      break;
 80042c6:	bf00      	nop
 80042c8:	e006      	b.n	80042d8 <DMA_CheckFifoParam+0xe8>
      break;
 80042ca:	bf00      	nop
 80042cc:	e004      	b.n	80042d8 <DMA_CheckFifoParam+0xe8>
      break;
 80042ce:	bf00      	nop
 80042d0:	e002      	b.n	80042d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80042d2:	bf00      	nop
 80042d4:	e000      	b.n	80042d8 <DMA_CheckFifoParam+0xe8>
      break;
 80042d6:	bf00      	nop
    }
  } 
  
  return status; 
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop

080042e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b089      	sub	sp, #36	; 0x24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	e16b      	b.n	80045dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004304:	2201      	movs	r2, #1
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4013      	ands	r3, r2
 8004316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	429a      	cmp	r2, r3
 800431e:	f040 815a 	bne.w	80045d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b01      	cmp	r3, #1
 800432c:	d005      	beq.n	800433a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004336:	2b02      	cmp	r3, #2
 8004338:	d130      	bne.n	800439c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	2203      	movs	r2, #3
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4013      	ands	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004370:	2201      	movs	r2, #1
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	43db      	mvns	r3, r3
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4013      	ands	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 0201 	and.w	r2, r3, #1
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4313      	orrs	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 0303 	and.w	r3, r3, #3
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d017      	beq.n	80043d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	2203      	movs	r2, #3
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d123      	bne.n	800442c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	08da      	lsrs	r2, r3, #3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3208      	adds	r2, #8
 80043ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	220f      	movs	r2, #15
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	43db      	mvns	r3, r3
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4013      	ands	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4313      	orrs	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	08da      	lsrs	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3208      	adds	r2, #8
 8004426:	69b9      	ldr	r1, [r7, #24]
 8004428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	2203      	movs	r2, #3
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 0203 	and.w	r2, r3, #3
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4313      	orrs	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80b4 	beq.w	80045d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	4b60      	ldr	r3, [pc, #384]	; (80045f4 <HAL_GPIO_Init+0x30c>)
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	4a5f      	ldr	r2, [pc, #380]	; (80045f4 <HAL_GPIO_Init+0x30c>)
 8004478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800447c:	6453      	str	r3, [r2, #68]	; 0x44
 800447e:	4b5d      	ldr	r3, [pc, #372]	; (80045f4 <HAL_GPIO_Init+0x30c>)
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800448a:	4a5b      	ldr	r2, [pc, #364]	; (80045f8 <HAL_GPIO_Init+0x310>)
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	089b      	lsrs	r3, r3, #2
 8004490:	3302      	adds	r3, #2
 8004492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	220f      	movs	r2, #15
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43db      	mvns	r3, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4013      	ands	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a52      	ldr	r2, [pc, #328]	; (80045fc <HAL_GPIO_Init+0x314>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d02b      	beq.n	800450e <HAL_GPIO_Init+0x226>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a51      	ldr	r2, [pc, #324]	; (8004600 <HAL_GPIO_Init+0x318>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d025      	beq.n	800450a <HAL_GPIO_Init+0x222>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a50      	ldr	r2, [pc, #320]	; (8004604 <HAL_GPIO_Init+0x31c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d01f      	beq.n	8004506 <HAL_GPIO_Init+0x21e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a4f      	ldr	r2, [pc, #316]	; (8004608 <HAL_GPIO_Init+0x320>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d019      	beq.n	8004502 <HAL_GPIO_Init+0x21a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a4e      	ldr	r2, [pc, #312]	; (800460c <HAL_GPIO_Init+0x324>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <HAL_GPIO_Init+0x216>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a4d      	ldr	r2, [pc, #308]	; (8004610 <HAL_GPIO_Init+0x328>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00d      	beq.n	80044fa <HAL_GPIO_Init+0x212>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a4c      	ldr	r2, [pc, #304]	; (8004614 <HAL_GPIO_Init+0x32c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d007      	beq.n	80044f6 <HAL_GPIO_Init+0x20e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a4b      	ldr	r2, [pc, #300]	; (8004618 <HAL_GPIO_Init+0x330>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d101      	bne.n	80044f2 <HAL_GPIO_Init+0x20a>
 80044ee:	2307      	movs	r3, #7
 80044f0:	e00e      	b.n	8004510 <HAL_GPIO_Init+0x228>
 80044f2:	2308      	movs	r3, #8
 80044f4:	e00c      	b.n	8004510 <HAL_GPIO_Init+0x228>
 80044f6:	2306      	movs	r3, #6
 80044f8:	e00a      	b.n	8004510 <HAL_GPIO_Init+0x228>
 80044fa:	2305      	movs	r3, #5
 80044fc:	e008      	b.n	8004510 <HAL_GPIO_Init+0x228>
 80044fe:	2304      	movs	r3, #4
 8004500:	e006      	b.n	8004510 <HAL_GPIO_Init+0x228>
 8004502:	2303      	movs	r3, #3
 8004504:	e004      	b.n	8004510 <HAL_GPIO_Init+0x228>
 8004506:	2302      	movs	r3, #2
 8004508:	e002      	b.n	8004510 <HAL_GPIO_Init+0x228>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_GPIO_Init+0x228>
 800450e:	2300      	movs	r3, #0
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	f002 0203 	and.w	r2, r2, #3
 8004516:	0092      	lsls	r2, r2, #2
 8004518:	4093      	lsls	r3, r2
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004520:	4935      	ldr	r1, [pc, #212]	; (80045f8 <HAL_GPIO_Init+0x310>)
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	3302      	adds	r3, #2
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800452e:	4b3b      	ldr	r3, [pc, #236]	; (800461c <HAL_GPIO_Init+0x334>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004552:	4a32      	ldr	r2, [pc, #200]	; (800461c <HAL_GPIO_Init+0x334>)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004558:	4b30      	ldr	r3, [pc, #192]	; (800461c <HAL_GPIO_Init+0x334>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800457c:	4a27      	ldr	r2, [pc, #156]	; (800461c <HAL_GPIO_Init+0x334>)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <HAL_GPIO_Init+0x334>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045a6:	4a1d      	ldr	r2, [pc, #116]	; (800461c <HAL_GPIO_Init+0x334>)
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045ac:	4b1b      	ldr	r3, [pc, #108]	; (800461c <HAL_GPIO_Init+0x334>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045d0:	4a12      	ldr	r2, [pc, #72]	; (800461c <HAL_GPIO_Init+0x334>)
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3301      	adds	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	2b0f      	cmp	r3, #15
 80045e0:	f67f ae90 	bls.w	8004304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	3724      	adds	r7, #36	; 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40013800 	.word	0x40013800
 80045fc:	40020000 	.word	0x40020000
 8004600:	40020400 	.word	0x40020400
 8004604:	40020800 	.word	0x40020800
 8004608:	40020c00 	.word	0x40020c00
 800460c:	40021000 	.word	0x40021000
 8004610:	40021400 	.word	0x40021400
 8004614:	40021800 	.word	0x40021800
 8004618:	40021c00 	.word	0x40021c00
 800461c:	40013c00 	.word	0x40013c00

08004620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	807b      	strh	r3, [r7, #2]
 800462c:	4613      	mov	r3, r2
 800462e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004630:	787b      	ldrb	r3, [r7, #1]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800463c:	e003      	b.n	8004646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800463e:	887b      	ldrh	r3, [r7, #2]
 8004640:	041a      	lsls	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	619a      	str	r2, [r3, #24]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004652:	b480      	push	{r7}
 8004654:	b085      	sub	sp, #20
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	460b      	mov	r3, r1
 800465c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004664:	887a      	ldrh	r2, [r7, #2]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4013      	ands	r3, r2
 800466a:	041a      	lsls	r2, r3, #16
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	43d9      	mvns	r1, r3
 8004670:	887b      	ldrh	r3, [r7, #2]
 8004672:	400b      	ands	r3, r1
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	619a      	str	r2, [r3, #24]
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e12b      	b.n	80048f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd f88a 	bl	80017c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2224      	movs	r2, #36	; 0x24
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046ec:	f000 fd5c 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 80046f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4a81      	ldr	r2, [pc, #516]	; (80048fc <HAL_I2C_Init+0x274>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d807      	bhi.n	800470c <HAL_I2C_Init+0x84>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a80      	ldr	r2, [pc, #512]	; (8004900 <HAL_I2C_Init+0x278>)
 8004700:	4293      	cmp	r3, r2
 8004702:	bf94      	ite	ls
 8004704:	2301      	movls	r3, #1
 8004706:	2300      	movhi	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e006      	b.n	800471a <HAL_I2C_Init+0x92>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a7d      	ldr	r2, [pc, #500]	; (8004904 <HAL_I2C_Init+0x27c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	bf94      	ite	ls
 8004714:	2301      	movls	r3, #1
 8004716:	2300      	movhi	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e0e7      	b.n	80048f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4a78      	ldr	r2, [pc, #480]	; (8004908 <HAL_I2C_Init+0x280>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	0c9b      	lsrs	r3, r3, #18
 800472c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4a6a      	ldr	r2, [pc, #424]	; (80048fc <HAL_I2C_Init+0x274>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d802      	bhi.n	800475c <HAL_I2C_Init+0xd4>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	3301      	adds	r3, #1
 800475a:	e009      	b.n	8004770 <HAL_I2C_Init+0xe8>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	4a69      	ldr	r2, [pc, #420]	; (800490c <HAL_I2C_Init+0x284>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	099b      	lsrs	r3, r3, #6
 800476e:	3301      	adds	r3, #1
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	430b      	orrs	r3, r1
 8004776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	495c      	ldr	r1, [pc, #368]	; (80048fc <HAL_I2C_Init+0x274>)
 800478c:	428b      	cmp	r3, r1
 800478e:	d819      	bhi.n	80047c4 <HAL_I2C_Init+0x13c>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1e59      	subs	r1, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	fbb1 f3f3 	udiv	r3, r1, r3
 800479e:	1c59      	adds	r1, r3, #1
 80047a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047a4:	400b      	ands	r3, r1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_I2C_Init+0x138>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1e59      	subs	r1, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b8:	3301      	adds	r3, #1
 80047ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047be:	e051      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 80047c0:	2304      	movs	r3, #4
 80047c2:	e04f      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d111      	bne.n	80047f0 <HAL_I2C_Init+0x168>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1e58      	subs	r0, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	440b      	add	r3, r1
 80047da:	fbb0 f3f3 	udiv	r3, r0, r3
 80047de:	3301      	adds	r3, #1
 80047e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e012      	b.n	8004816 <HAL_I2C_Init+0x18e>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1e58      	subs	r0, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6859      	ldr	r1, [r3, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	0099      	lsls	r1, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	fbb0 f3f3 	udiv	r3, r0, r3
 8004806:	3301      	adds	r3, #1
 8004808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_I2C_Init+0x196>
 800481a:	2301      	movs	r3, #1
 800481c:	e022      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10e      	bne.n	8004844 <HAL_I2C_Init+0x1bc>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1e58      	subs	r0, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	440b      	add	r3, r1
 8004834:	fbb0 f3f3 	udiv	r3, r0, r3
 8004838:	3301      	adds	r3, #1
 800483a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004842:	e00f      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1e58      	subs	r0, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	0099      	lsls	r1, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	fbb0 f3f3 	udiv	r3, r0, r3
 800485a:	3301      	adds	r3, #1
 800485c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	6809      	ldr	r1, [r1, #0]
 8004868:	4313      	orrs	r3, r2
 800486a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6911      	ldr	r1, [r2, #16]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68d2      	ldr	r2, [r2, #12]
 800489e:	4311      	orrs	r1, r2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	000186a0 	.word	0x000186a0
 8004900:	001e847f 	.word	0x001e847f
 8004904:	003d08ff 	.word	0x003d08ff
 8004908:	431bde83 	.word	0x431bde83
 800490c:	10624dd3 	.word	0x10624dd3

08004910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e264      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d075      	beq.n	8004a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800492e:	4ba3      	ldr	r3, [pc, #652]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b04      	cmp	r3, #4
 8004938:	d00c      	beq.n	8004954 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800493a:	4ba0      	ldr	r3, [pc, #640]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004942:	2b08      	cmp	r3, #8
 8004944:	d112      	bne.n	800496c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004946:	4b9d      	ldr	r3, [pc, #628]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004952:	d10b      	bne.n	800496c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	4b99      	ldr	r3, [pc, #612]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d05b      	beq.n	8004a18 <HAL_RCC_OscConfig+0x108>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d157      	bne.n	8004a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e23f      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004974:	d106      	bne.n	8004984 <HAL_RCC_OscConfig+0x74>
 8004976:	4b91      	ldr	r3, [pc, #580]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a90      	ldr	r2, [pc, #576]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e01d      	b.n	80049c0 <HAL_RCC_OscConfig+0xb0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800498c:	d10c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x98>
 800498e:	4b8b      	ldr	r3, [pc, #556]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a8a      	ldr	r2, [pc, #552]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	4b88      	ldr	r3, [pc, #544]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a87      	ldr	r2, [pc, #540]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e00b      	b.n	80049c0 <HAL_RCC_OscConfig+0xb0>
 80049a8:	4b84      	ldr	r3, [pc, #528]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a83      	ldr	r2, [pc, #524]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	4b81      	ldr	r3, [pc, #516]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a80      	ldr	r2, [pc, #512]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d013      	beq.n	80049f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c8:	f7fe fb38 	bl	800303c <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d0:	f7fe fb34 	bl	800303c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	; 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e204      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e2:	4b76      	ldr	r3, [pc, #472]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0xc0>
 80049ee:	e014      	b.n	8004a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f0:	f7fe fb24 	bl	800303c <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fe fb20 	bl	800303c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e1f0      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a0a:	4b6c      	ldr	r3, [pc, #432]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0xe8>
 8004a16:	e000      	b.n	8004a1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d063      	beq.n	8004aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a26:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a32:	4b62      	ldr	r3, [pc, #392]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d11c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a3e:	4b5f      	ldr	r3, [pc, #380]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d116      	bne.n	8004a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4a:	4b5c      	ldr	r3, [pc, #368]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_RCC_OscConfig+0x152>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d001      	beq.n	8004a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e1c4      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a62:	4b56      	ldr	r3, [pc, #344]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4952      	ldr	r1, [pc, #328]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a76:	e03a      	b.n	8004aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d020      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a80:	4b4f      	ldr	r3, [pc, #316]	; (8004bc0 <HAL_RCC_OscConfig+0x2b0>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a86:	f7fe fad9 	bl	800303c <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a8e:	f7fe fad5 	bl	800303c <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e1a5      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa0:	4b46      	ldr	r3, [pc, #280]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aac:	4b43      	ldr	r3, [pc, #268]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4940      	ldr	r1, [pc, #256]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	600b      	str	r3, [r1, #0]
 8004ac0:	e015      	b.n	8004aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <HAL_RCC_OscConfig+0x2b0>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fe fab8 	bl	800303c <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad0:	f7fe fab4 	bl	800303c <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e184      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d030      	beq.n	8004b5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d016      	beq.n	8004b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b02:	4b30      	ldr	r3, [pc, #192]	; (8004bc4 <HAL_RCC_OscConfig+0x2b4>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b08:	f7fe fa98 	bl	800303c <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b10:	f7fe fa94 	bl	800303c <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e164      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b22:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0x200>
 8004b2e:	e015      	b.n	8004b5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b30:	4b24      	ldr	r3, [pc, #144]	; (8004bc4 <HAL_RCC_OscConfig+0x2b4>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b36:	f7fe fa81 	bl	800303c <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b3e:	f7fe fa7d 	bl	800303c <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e14d      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b50:	4b1a      	ldr	r3, [pc, #104]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f0      	bne.n	8004b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 80a0 	beq.w	8004caa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10f      	bne.n	8004b9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	4a0e      	ldr	r2, [pc, #56]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b96:	2301      	movs	r3, #1
 8004b98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_OscConfig+0x2b8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d121      	bne.n	8004bea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <HAL_RCC_OscConfig+0x2b8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a07      	ldr	r2, [pc, #28]	; (8004bc8 <HAL_RCC_OscConfig+0x2b8>)
 8004bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb2:	f7fe fa43 	bl	800303c <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb8:	e011      	b.n	8004bde <HAL_RCC_OscConfig+0x2ce>
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	42470000 	.word	0x42470000
 8004bc4:	42470e80 	.word	0x42470e80
 8004bc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bcc:	f7fe fa36 	bl	800303c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e106      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bde:	4b85      	ldr	r3, [pc, #532]	; (8004df4 <HAL_RCC_OscConfig+0x4e4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCC_OscConfig+0x2f0>
 8004bf2:	4b81      	ldr	r3, [pc, #516]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	4a80      	ldr	r2, [pc, #512]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfe:	e01c      	b.n	8004c3a <HAL_RCC_OscConfig+0x32a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b05      	cmp	r3, #5
 8004c06:	d10c      	bne.n	8004c22 <HAL_RCC_OscConfig+0x312>
 8004c08:	4b7b      	ldr	r3, [pc, #492]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	4a7a      	ldr	r2, [pc, #488]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004c0e:	f043 0304 	orr.w	r3, r3, #4
 8004c12:	6713      	str	r3, [r2, #112]	; 0x70
 8004c14:	4b78      	ldr	r3, [pc, #480]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	4a77      	ldr	r2, [pc, #476]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c20:	e00b      	b.n	8004c3a <HAL_RCC_OscConfig+0x32a>
 8004c22:	4b75      	ldr	r3, [pc, #468]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	4a74      	ldr	r2, [pc, #464]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2e:	4b72      	ldr	r3, [pc, #456]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c32:	4a71      	ldr	r2, [pc, #452]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004c34:	f023 0304 	bic.w	r3, r3, #4
 8004c38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d015      	beq.n	8004c6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c42:	f7fe f9fb 	bl	800303c <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c48:	e00a      	b.n	8004c60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c4a:	f7fe f9f7 	bl	800303c <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e0c5      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c60:	4b65      	ldr	r3, [pc, #404]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0ee      	beq.n	8004c4a <HAL_RCC_OscConfig+0x33a>
 8004c6c:	e014      	b.n	8004c98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6e:	f7fe f9e5 	bl	800303c <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c74:	e00a      	b.n	8004c8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c76:	f7fe f9e1 	bl	800303c <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e0af      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8c:	4b5a      	ldr	r3, [pc, #360]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1ee      	bne.n	8004c76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d105      	bne.n	8004caa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c9e:	4b56      	ldr	r3, [pc, #344]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	4a55      	ldr	r2, [pc, #340]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 809b 	beq.w	8004dea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cb4:	4b50      	ldr	r3, [pc, #320]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 030c 	and.w	r3, r3, #12
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d05c      	beq.n	8004d7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d141      	bne.n	8004d4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc8:	4b4c      	ldr	r3, [pc, #304]	; (8004dfc <HAL_RCC_OscConfig+0x4ec>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cce:	f7fe f9b5 	bl	800303c <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd6:	f7fe f9b1 	bl	800303c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e081      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce8:	4b43      	ldr	r3, [pc, #268]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f0      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	019b      	lsls	r3, r3, #6
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	041b      	lsls	r3, r3, #16
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	061b      	lsls	r3, r3, #24
 8004d18:	4937      	ldr	r1, [pc, #220]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d1e:	4b37      	ldr	r3, [pc, #220]	; (8004dfc <HAL_RCC_OscConfig+0x4ec>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d24:	f7fe f98a 	bl	800303c <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fe f986 	bl	800303c <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e056      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d3e:	4b2e      	ldr	r3, [pc, #184]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x41c>
 8004d4a:	e04e      	b.n	8004dea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4c:	4b2b      	ldr	r3, [pc, #172]	; (8004dfc <HAL_RCC_OscConfig+0x4ec>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d52:	f7fe f973 	bl	800303c <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d5a:	f7fe f96f 	bl	800303c <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e03f      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6c:	4b22      	ldr	r3, [pc, #136]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f0      	bne.n	8004d5a <HAL_RCC_OscConfig+0x44a>
 8004d78:	e037      	b.n	8004dea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e032      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d86:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d028      	beq.n	8004de6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d121      	bne.n	8004de6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d11a      	bne.n	8004de6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004db6:	4013      	ands	r3, r2
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dbc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d111      	bne.n	8004de6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	085b      	lsrs	r3, r3, #1
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d107      	bne.n	8004de6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d001      	beq.n	8004dea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40007000 	.word	0x40007000
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	42470060 	.word	0x42470060

08004e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0cc      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e14:	4b68      	ldr	r3, [pc, #416]	; (8004fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d90c      	bls.n	8004e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e22:	4b65      	ldr	r3, [pc, #404]	; (8004fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2a:	4b63      	ldr	r3, [pc, #396]	; (8004fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d001      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0b8      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d020      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e54:	4b59      	ldr	r3, [pc, #356]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	4a58      	ldr	r2, [pc, #352]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e6c:	4b53      	ldr	r3, [pc, #332]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	4a52      	ldr	r2, [pc, #328]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e78:	4b50      	ldr	r3, [pc, #320]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	494d      	ldr	r1, [pc, #308]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d044      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9e:	4b47      	ldr	r3, [pc, #284]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d119      	bne.n	8004ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e07f      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d003      	beq.n	8004ebe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d107      	bne.n	8004ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ebe:	4b3f      	ldr	r3, [pc, #252]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e06f      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ece:	4b3b      	ldr	r3, [pc, #236]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e067      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ede:	4b37      	ldr	r3, [pc, #220]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f023 0203 	bic.w	r2, r3, #3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4934      	ldr	r1, [pc, #208]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ef0:	f7fe f8a4 	bl	800303c <HAL_GetTick>
 8004ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef8:	f7fe f8a0 	bl	800303c <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e04f      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0e:	4b2b      	ldr	r3, [pc, #172]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 020c 	and.w	r2, r3, #12
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d1eb      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f20:	4b25      	ldr	r3, [pc, #148]	; (8004fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d20c      	bcs.n	8004f48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2e:	4b22      	ldr	r3, [pc, #136]	; (8004fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f36:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e032      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	4916      	ldr	r1, [pc, #88]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f72:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	490e      	ldr	r1, [pc, #56]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f86:	f000 f821 	bl	8004fcc <HAL_RCC_GetSysClockFreq>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	490a      	ldr	r1, [pc, #40]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f98:	5ccb      	ldrb	r3, [r1, r3]
 8004f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9e:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fa2:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe f804 	bl	8002fb4 <HAL_InitTick>

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40023c00 	.word	0x40023c00
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	0800f6d4 	.word	0x0800f6d4
 8004fc4:	20000008 	.word	0x20000008
 8004fc8:	2000000c 	.word	0x2000000c

08004fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fe4:	4b67      	ldr	r3, [pc, #412]	; (8005184 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 030c 	and.w	r3, r3, #12
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d00d      	beq.n	800500c <HAL_RCC_GetSysClockFreq+0x40>
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	f200 80bd 	bhi.w	8005170 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_RCC_GetSysClockFreq+0x34>
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d003      	beq.n	8005006 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ffe:	e0b7      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005000:	4b61      	ldr	r3, [pc, #388]	; (8005188 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005002:	60bb      	str	r3, [r7, #8]
       break;
 8005004:	e0b7      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005006:	4b61      	ldr	r3, [pc, #388]	; (800518c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005008:	60bb      	str	r3, [r7, #8]
      break;
 800500a:	e0b4      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800500c:	4b5d      	ldr	r3, [pc, #372]	; (8005184 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005014:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005016:	4b5b      	ldr	r3, [pc, #364]	; (8005184 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d04d      	beq.n	80050be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005022:	4b58      	ldr	r3, [pc, #352]	; (8005184 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	099b      	lsrs	r3, r3, #6
 8005028:	461a      	mov	r2, r3
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005032:	f04f 0100 	mov.w	r1, #0
 8005036:	ea02 0800 	and.w	r8, r2, r0
 800503a:	ea03 0901 	and.w	r9, r3, r1
 800503e:	4640      	mov	r0, r8
 8005040:	4649      	mov	r1, r9
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	014b      	lsls	r3, r1, #5
 800504c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005050:	0142      	lsls	r2, r0, #5
 8005052:	4610      	mov	r0, r2
 8005054:	4619      	mov	r1, r3
 8005056:	ebb0 0008 	subs.w	r0, r0, r8
 800505a:	eb61 0109 	sbc.w	r1, r1, r9
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	018b      	lsls	r3, r1, #6
 8005068:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800506c:	0182      	lsls	r2, r0, #6
 800506e:	1a12      	subs	r2, r2, r0
 8005070:	eb63 0301 	sbc.w	r3, r3, r1
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f04f 0100 	mov.w	r1, #0
 800507c:	00d9      	lsls	r1, r3, #3
 800507e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005082:	00d0      	lsls	r0, r2, #3
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	eb12 0208 	adds.w	r2, r2, r8
 800508c:	eb43 0309 	adc.w	r3, r3, r9
 8005090:	f04f 0000 	mov.w	r0, #0
 8005094:	f04f 0100 	mov.w	r1, #0
 8005098:	0259      	lsls	r1, r3, #9
 800509a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800509e:	0250      	lsls	r0, r2, #9
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4610      	mov	r0, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	f7fb fdea 	bl	8000c88 <__aeabi_uldivmod>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4613      	mov	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	e04a      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050be:	4b31      	ldr	r3, [pc, #196]	; (8005184 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	099b      	lsrs	r3, r3, #6
 80050c4:	461a      	mov	r2, r3
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050ce:	f04f 0100 	mov.w	r1, #0
 80050d2:	ea02 0400 	and.w	r4, r2, r0
 80050d6:	ea03 0501 	and.w	r5, r3, r1
 80050da:	4620      	mov	r0, r4
 80050dc:	4629      	mov	r1, r5
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	014b      	lsls	r3, r1, #5
 80050e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050ec:	0142      	lsls	r2, r0, #5
 80050ee:	4610      	mov	r0, r2
 80050f0:	4619      	mov	r1, r3
 80050f2:	1b00      	subs	r0, r0, r4
 80050f4:	eb61 0105 	sbc.w	r1, r1, r5
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	018b      	lsls	r3, r1, #6
 8005102:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005106:	0182      	lsls	r2, r0, #6
 8005108:	1a12      	subs	r2, r2, r0
 800510a:	eb63 0301 	sbc.w	r3, r3, r1
 800510e:	f04f 0000 	mov.w	r0, #0
 8005112:	f04f 0100 	mov.w	r1, #0
 8005116:	00d9      	lsls	r1, r3, #3
 8005118:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800511c:	00d0      	lsls	r0, r2, #3
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	1912      	adds	r2, r2, r4
 8005124:	eb45 0303 	adc.w	r3, r5, r3
 8005128:	f04f 0000 	mov.w	r0, #0
 800512c:	f04f 0100 	mov.w	r1, #0
 8005130:	0299      	lsls	r1, r3, #10
 8005132:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005136:	0290      	lsls	r0, r2, #10
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4610      	mov	r0, r2
 800513e:	4619      	mov	r1, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	461a      	mov	r2, r3
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	f7fb fd9e 	bl	8000c88 <__aeabi_uldivmod>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4613      	mov	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005154:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	3301      	adds	r3, #1
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	60bb      	str	r3, [r7, #8]
      break;
 800516e:	e002      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005172:	60bb      	str	r3, [r7, #8]
      break;
 8005174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005176:	68bb      	ldr	r3, [r7, #8]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800
 8005188:	00f42400 	.word	0x00f42400
 800518c:	007a1200 	.word	0x007a1200

08005190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005194:	4b03      	ldr	r3, [pc, #12]	; (80051a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005196:	681b      	ldr	r3, [r3, #0]
}
 8005198:	4618      	mov	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000008 	.word	0x20000008

080051a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051ac:	f7ff fff0 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0a9b      	lsrs	r3, r3, #10
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4903      	ldr	r1, [pc, #12]	; (80051cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	0800f6e4 	.word	0x0800f6e4

080051d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051d4:	f7ff ffdc 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	0b5b      	lsrs	r3, r3, #13
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4903      	ldr	r1, [pc, #12]	; (80051f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40023800 	.word	0x40023800
 80051f4:	0800f6e4 	.word	0x0800f6e4

080051f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e07b      	b.n	8005302 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d108      	bne.n	8005224 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800521a:	d009      	beq.n	8005230 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	61da      	str	r2, [r3, #28]
 8005222:	e005      	b.n	8005230 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fd f9e6 	bl	800261c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005266:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b4:	ea42 0103 	orr.w	r1, r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	0c1b      	lsrs	r3, r3, #16
 80052ce:	f003 0104 	and.w	r1, r3, #4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	f003 0210 	and.w	r2, r3, #16
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b088      	sub	sp, #32
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_SPI_Transmit+0x22>
 8005328:	2302      	movs	r3, #2
 800532a:	e126      	b.n	800557a <HAL_SPI_Transmit+0x270>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005334:	f7fd fe82 	bl	800303c <HAL_GetTick>
 8005338:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b01      	cmp	r3, #1
 8005348:	d002      	beq.n	8005350 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800534a:	2302      	movs	r3, #2
 800534c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800534e:	e10b      	b.n	8005568 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_SPI_Transmit+0x52>
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d102      	bne.n	8005362 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005360:	e102      	b.n	8005568 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2203      	movs	r2, #3
 8005366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	88fa      	ldrh	r2, [r7, #6]
 800537a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	88fa      	ldrh	r2, [r7, #6]
 8005380:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a8:	d10f      	bne.n	80053ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d007      	beq.n	80053e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f0:	d14b      	bne.n	800548a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_SPI_Transmit+0xf6>
 80053fa:	8afb      	ldrh	r3, [r7, #22]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d13e      	bne.n	800547e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	881a      	ldrh	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	1c9a      	adds	r2, r3, #2
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005424:	e02b      	b.n	800547e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b02      	cmp	r3, #2
 8005432:	d112      	bne.n	800545a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	86da      	strh	r2, [r3, #54]	; 0x36
 8005458:	e011      	b.n	800547e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800545a:	f7fd fdef 	bl	800303c <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d803      	bhi.n	8005472 <HAL_SPI_Transmit+0x168>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005470:	d102      	bne.n	8005478 <HAL_SPI_Transmit+0x16e>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d102      	bne.n	800547e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800547c:	e074      	b.n	8005568 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1ce      	bne.n	8005426 <HAL_SPI_Transmit+0x11c>
 8005488:	e04c      	b.n	8005524 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_SPI_Transmit+0x18e>
 8005492:	8afb      	ldrh	r3, [r7, #22]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d140      	bne.n	800551a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	330c      	adds	r3, #12
 80054a2:	7812      	ldrb	r2, [r2, #0]
 80054a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054be:	e02c      	b.n	800551a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d113      	bne.n	80054f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	7812      	ldrb	r2, [r2, #0]
 80054da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80054f4:	e011      	b.n	800551a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054f6:	f7fd fda1 	bl	800303c <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d803      	bhi.n	800550e <HAL_SPI_Transmit+0x204>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d102      	bne.n	8005514 <HAL_SPI_Transmit+0x20a>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005518:	e026      	b.n	8005568 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1cd      	bne.n	80054c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fbcb 	bl	8005cc4 <SPI_EndRxTxTransaction>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2220      	movs	r2, #32
 8005538:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005542:	2300      	movs	r3, #0
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e000      	b.n	8005568 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005566:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005578:	7ffb      	ldrb	r3, [r7, #31]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3720      	adds	r7, #32
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b088      	sub	sp, #32
 8005586:	af02      	add	r7, sp, #8
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800559e:	d112      	bne.n	80055c6 <HAL_SPI_Receive+0x44>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10e      	bne.n	80055c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2204      	movs	r2, #4
 80055ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	4613      	mov	r3, r2
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f8f1 	bl	80057a4 <HAL_SPI_TransmitReceive>
 80055c2:	4603      	mov	r3, r0
 80055c4:	e0ea      	b.n	800579c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_SPI_Receive+0x52>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e0e3      	b.n	800579c <HAL_SPI_Receive+0x21a>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055dc:	f7fd fd2e 	bl	800303c <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d002      	beq.n	80055f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
 80055f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055f2:	e0ca      	b.n	800578a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_SPI_Receive+0x7e>
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005604:	e0c1      	b.n	800578a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2204      	movs	r2, #4
 800560a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	88fa      	ldrh	r2, [r7, #6]
 800561e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564c:	d10f      	bne.n	800566e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800566c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	d007      	beq.n	800568c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800568a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d162      	bne.n	800575a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005694:	e02e      	b.n	80056f4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d115      	bne.n	80056d0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f103 020c 	add.w	r2, r3, #12
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	7812      	ldrb	r2, [r2, #0]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056ce:	e011      	b.n	80056f4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d0:	f7fd fcb4 	bl	800303c <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d803      	bhi.n	80056e8 <HAL_SPI_Receive+0x166>
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e6:	d102      	bne.n	80056ee <HAL_SPI_Receive+0x16c>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d102      	bne.n	80056f4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056f2:	e04a      	b.n	800578a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1cb      	bne.n	8005696 <HAL_SPI_Receive+0x114>
 80056fe:	e031      	b.n	8005764 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b01      	cmp	r3, #1
 800570c:	d113      	bne.n	8005736 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	b292      	uxth	r2, r2
 800571a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	1c9a      	adds	r2, r3, #2
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b01      	subs	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005734:	e011      	b.n	800575a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005736:	f7fd fc81 	bl	800303c <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d803      	bhi.n	800574e <HAL_SPI_Receive+0x1cc>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d102      	bne.n	8005754 <HAL_SPI_Receive+0x1d2>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d102      	bne.n	800575a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005758:	e017      	b.n	800578a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1cd      	bne.n	8005700 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	6839      	ldr	r1, [r7, #0]
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fa45 	bl	8005bf8 <SPI_EndRxTransaction>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577e:	2b00      	cmp	r3, #0
 8005780:	d002      	beq.n	8005788 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
 8005786:	e000      	b.n	800578a <HAL_SPI_Receive+0x208>
  }

error :
 8005788:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800579a:	7dfb      	ldrb	r3, [r7, #23]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08c      	sub	sp, #48	; 0x30
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057b2:	2301      	movs	r3, #1
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_SPI_TransmitReceive+0x26>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e18a      	b.n	8005ae0 <HAL_SPI_TransmitReceive+0x33c>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057d2:	f7fd fc33 	bl	800303c <HAL_GetTick>
 80057d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80057e8:	887b      	ldrh	r3, [r7, #2]
 80057ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d00f      	beq.n	8005814 <HAL_SPI_TransmitReceive+0x70>
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057fa:	d107      	bne.n	800580c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d103      	bne.n	800580c <HAL_SPI_TransmitReceive+0x68>
 8005804:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005808:	2b04      	cmp	r3, #4
 800580a:	d003      	beq.n	8005814 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800580c:	2302      	movs	r3, #2
 800580e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005812:	e15b      	b.n	8005acc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x82>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x82>
 8005820:	887b      	ldrh	r3, [r7, #2]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d103      	bne.n	800582e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800582c:	e14e      	b.n	8005acc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b04      	cmp	r3, #4
 8005838:	d003      	beq.n	8005842 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2205      	movs	r2, #5
 800583e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	887a      	ldrh	r2, [r7, #2]
 8005852:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	887a      	ldrh	r2, [r7, #2]
 8005858:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	887a      	ldrh	r2, [r7, #2]
 8005864:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	887a      	ldrh	r2, [r7, #2]
 800586a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d007      	beq.n	8005896 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005894:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800589e:	d178      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <HAL_SPI_TransmitReceive+0x10a>
 80058a8:	8b7b      	ldrh	r3, [r7, #26]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d166      	bne.n	800597c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	881a      	ldrh	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	1c9a      	adds	r2, r3, #2
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058d2:	e053      	b.n	800597c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d11b      	bne.n	800591a <HAL_SPI_TransmitReceive+0x176>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d016      	beq.n	800591a <HAL_SPI_TransmitReceive+0x176>
 80058ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d113      	bne.n	800591a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	881a      	ldrh	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	1c9a      	adds	r2, r3, #2
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b01      	cmp	r3, #1
 8005926:	d119      	bne.n	800595c <HAL_SPI_TransmitReceive+0x1b8>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d014      	beq.n	800595c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	b292      	uxth	r2, r2
 800593e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005958:	2301      	movs	r3, #1
 800595a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800595c:	f7fd fb6e 	bl	800303c <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005968:	429a      	cmp	r2, r3
 800596a:	d807      	bhi.n	800597c <HAL_SPI_TransmitReceive+0x1d8>
 800596c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d003      	beq.n	800597c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800597a:	e0a7      	b.n	8005acc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1a6      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x130>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1a1      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x130>
 8005990:	e07c      	b.n	8005a8c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <HAL_SPI_TransmitReceive+0x1fc>
 800599a:	8b7b      	ldrh	r3, [r7, #26]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d16b      	bne.n	8005a78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	7812      	ldrb	r2, [r2, #0]
 80059ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c6:	e057      	b.n	8005a78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d11c      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x26c>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d017      	beq.n	8005a10 <HAL_SPI_TransmitReceive+0x26c>
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d114      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	330c      	adds	r3, #12
 80059f0:	7812      	ldrb	r2, [r2, #0]
 80059f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d119      	bne.n	8005a52 <HAL_SPI_TransmitReceive+0x2ae>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d014      	beq.n	8005a52 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a52:	f7fd faf3 	bl	800303c <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d803      	bhi.n	8005a6a <HAL_SPI_TransmitReceive+0x2c6>
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d102      	bne.n	8005a70 <HAL_SPI_TransmitReceive+0x2cc>
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d103      	bne.n	8005a78 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a76:	e029      	b.n	8005acc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1a2      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0x224>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d19d      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f917 	bl	8005cc4 <SPI_EndRxTxTransaction>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d006      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005aa8:	e010      	b.n	8005acc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10b      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	e000      	b.n	8005acc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005aca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005adc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3730      	adds	r7, #48	; 0x30
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	4613      	mov	r3, r2
 8005af6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005af8:	f7fd faa0 	bl	800303c <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	4413      	add	r3, r2
 8005b06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b08:	f7fd fa98 	bl	800303c <HAL_GetTick>
 8005b0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b0e:	4b39      	ldr	r3, [pc, #228]	; (8005bf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	015b      	lsls	r3, r3, #5
 8005b14:	0d1b      	lsrs	r3, r3, #20
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	fb02 f303 	mul.w	r3, r2, r3
 8005b1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b1e:	e054      	b.n	8005bca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b26:	d050      	beq.n	8005bca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b28:	f7fd fa88 	bl	800303c <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d902      	bls.n	8005b3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d13d      	bne.n	8005bba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b56:	d111      	bne.n	8005b7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b60:	d004      	beq.n	8005b6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b6a:	d107      	bne.n	8005b7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b84:	d10f      	bne.n	8005ba6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ba4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e017      	b.n	8005bea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	bf0c      	ite	eq
 8005bda:	2301      	moveq	r3, #1
 8005bdc:	2300      	movne	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d19b      	bne.n	8005b20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000008 	.word	0x20000008

08005bf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c0c:	d111      	bne.n	8005c32 <SPI_EndRxTransaction+0x3a>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c16:	d004      	beq.n	8005c22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c20:	d107      	bne.n	8005c32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c30:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c3a:	d12a      	bne.n	8005c92 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c44:	d012      	beq.n	8005c6c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2180      	movs	r1, #128	; 0x80
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f7ff ff49 	bl	8005ae8 <SPI_WaitFlagStateUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d02d      	beq.n	8005cb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c60:	f043 0220 	orr.w	r2, r3, #32
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e026      	b.n	8005cba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2200      	movs	r2, #0
 8005c74:	2101      	movs	r1, #1
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff ff36 	bl	8005ae8 <SPI_WaitFlagStateUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d01a      	beq.n	8005cb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c86:	f043 0220 	orr.w	r2, r3, #32
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e013      	b.n	8005cba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f7ff ff23 	bl	8005ae8 <SPI_WaitFlagStateUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cac:	f043 0220 	orr.w	r2, r3, #32
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e000      	b.n	8005cba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cd0:	4b1b      	ldr	r3, [pc, #108]	; (8005d40 <SPI_EndRxTxTransaction+0x7c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1b      	ldr	r2, [pc, #108]	; (8005d44 <SPI_EndRxTxTransaction+0x80>)
 8005cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cda:	0d5b      	lsrs	r3, r3, #21
 8005cdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ce0:	fb02 f303 	mul.w	r3, r2, r3
 8005ce4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cee:	d112      	bne.n	8005d16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2180      	movs	r1, #128	; 0x80
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f7ff fef4 	bl	8005ae8 <SPI_WaitFlagStateUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d016      	beq.n	8005d34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0a:	f043 0220 	orr.w	r2, r3, #32
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e00f      	b.n	8005d36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2c:	2b80      	cmp	r3, #128	; 0x80
 8005d2e:	d0f2      	beq.n	8005d16 <SPI_EndRxTxTransaction+0x52>
 8005d30:	e000      	b.n	8005d34 <SPI_EndRxTxTransaction+0x70>
        break;
 8005d32:	bf00      	nop
  }

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000008 	.word	0x20000008
 8005d44:	165e9f81 	.word	0x165e9f81

08005d48 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e034      	b.n	8005dc8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7fb fbb6 	bl	80014e4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3308      	adds	r3, #8
 8005d80:	4619      	mov	r1, r3
 8005d82:	4610      	mov	r0, r2
 8005d84:	f001 ffa2 	bl	8007ccc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	461a      	mov	r2, r3
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	f001 ffec 	bl	8007d70 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6858      	ldr	r0, [r3, #4]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	f002 f821 	bl	8007dec <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	6892      	ldr	r2, [r2, #8]
 8005db2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	6892      	ldr	r2, [r2, #8]
 8005dbe:	f041 0101 	orr.w	r1, r1, #1
 8005dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e041      	b.n	8005e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fc fe94 	bl	8002b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4610      	mov	r0, r2
 8005e10:	f000 fc1a 	bl	8006648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d001      	beq.n	8005e88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e046      	b.n	8005f16 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a23      	ldr	r2, [pc, #140]	; (8005f24 <HAL_TIM_Base_Start+0xb4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d022      	beq.n	8005ee0 <HAL_TIM_Base_Start+0x70>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea2:	d01d      	beq.n	8005ee0 <HAL_TIM_Base_Start+0x70>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1f      	ldr	r2, [pc, #124]	; (8005f28 <HAL_TIM_Base_Start+0xb8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d018      	beq.n	8005ee0 <HAL_TIM_Base_Start+0x70>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1e      	ldr	r2, [pc, #120]	; (8005f2c <HAL_TIM_Base_Start+0xbc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d013      	beq.n	8005ee0 <HAL_TIM_Base_Start+0x70>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1c      	ldr	r2, [pc, #112]	; (8005f30 <HAL_TIM_Base_Start+0xc0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00e      	beq.n	8005ee0 <HAL_TIM_Base_Start+0x70>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <HAL_TIM_Base_Start+0xc4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d009      	beq.n	8005ee0 <HAL_TIM_Base_Start+0x70>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a19      	ldr	r2, [pc, #100]	; (8005f38 <HAL_TIM_Base_Start+0xc8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d004      	beq.n	8005ee0 <HAL_TIM_Base_Start+0x70>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a18      	ldr	r2, [pc, #96]	; (8005f3c <HAL_TIM_Base_Start+0xcc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d111      	bne.n	8005f04 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b06      	cmp	r3, #6
 8005ef0:	d010      	beq.n	8005f14 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0201 	orr.w	r2, r2, #1
 8005f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f02:	e007      	b.n	8005f14 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0201 	orr.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40010000 	.word	0x40010000
 8005f28:	40000400 	.word	0x40000400
 8005f2c:	40000800 	.word	0x40000800
 8005f30:	40000c00 	.word	0x40000c00
 8005f34:	40010400 	.word	0x40010400
 8005f38:	40014000 	.word	0x40014000
 8005f3c:	40001800 	.word	0x40001800

08005f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d001      	beq.n	8005f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e04e      	b.n	8005ff6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a23      	ldr	r2, [pc, #140]	; (8006004 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d022      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f82:	d01d      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d018      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1e      	ldr	r2, [pc, #120]	; (800600c <HAL_TIM_Base_Start_IT+0xcc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d013      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1c      	ldr	r2, [pc, #112]	; (8006010 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00e      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1b      	ldr	r2, [pc, #108]	; (8006014 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a19      	ldr	r2, [pc, #100]	; (8006018 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a18      	ldr	r2, [pc, #96]	; (800601c <HAL_TIM_Base_Start_IT+0xdc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d111      	bne.n	8005fe4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b06      	cmp	r3, #6
 8005fd0:	d010      	beq.n	8005ff4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0201 	orr.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe2:	e007      	b.n	8005ff4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40010400 	.word	0x40010400
 8006018:	40014000 	.word	0x40014000
 800601c:	40001800 	.word	0x40001800

08006020 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e041      	b.n	80060b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d106      	bne.n	800604c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f839 	bl	80060be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f000 faf2 	bl	8006648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b082      	sub	sp, #8
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d122      	bne.n	800612e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d11b      	bne.n	800612e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f06f 0202 	mvn.w	r2, #2
 80060fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	f003 0303 	and.w	r3, r3, #3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fa78 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 800611a:	e005      	b.n	8006128 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fa6a 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa7b 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b04      	cmp	r3, #4
 800613a:	d122      	bne.n	8006182 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b04      	cmp	r3, #4
 8006148:	d11b      	bne.n	8006182 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f06f 0204 	mvn.w	r2, #4
 8006152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fa4e 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 800616e:	e005      	b.n	800617c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fa40 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fa51 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b08      	cmp	r3, #8
 800618e:	d122      	bne.n	80061d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b08      	cmp	r3, #8
 800619c:	d11b      	bne.n	80061d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f06f 0208 	mvn.w	r2, #8
 80061a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2204      	movs	r2, #4
 80061ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	f003 0303 	and.w	r3, r3, #3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fa24 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 80061c2:	e005      	b.n	80061d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fa16 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fa27 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d122      	bne.n	800622a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	2b10      	cmp	r3, #16
 80061f0:	d11b      	bne.n	800622a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f06f 0210 	mvn.w	r2, #16
 80061fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2208      	movs	r2, #8
 8006200:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f9fa 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 8006216:	e005      	b.n	8006224 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f9ec 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f9fd 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b01      	cmp	r3, #1
 8006236:	d10e      	bne.n	8006256 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b01      	cmp	r3, #1
 8006244:	d107      	bne.n	8006256 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f06f 0201 	mvn.w	r2, #1
 800624e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7fc f983 	bl	800255c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006260:	2b80      	cmp	r3, #128	; 0x80
 8006262:	d10e      	bne.n	8006282 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626e:	2b80      	cmp	r3, #128	; 0x80
 8006270:	d107      	bne.n	8006282 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800627a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fd53 	bl	8006d28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b40      	cmp	r3, #64	; 0x40
 800628e:	d10e      	bne.n	80062ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	d107      	bne.n	80062ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f9c2 	bl	8006632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d10e      	bne.n	80062da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	d107      	bne.n	80062da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f06f 0220 	mvn.w	r2, #32
 80062d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fd1d 	bl	8006d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062da:	bf00      	nop
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062fe:	2302      	movs	r3, #2
 8006300:	e0ae      	b.n	8006460 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b0c      	cmp	r3, #12
 800630e:	f200 809f 	bhi.w	8006450 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006312:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	0800634d 	.word	0x0800634d
 800631c:	08006451 	.word	0x08006451
 8006320:	08006451 	.word	0x08006451
 8006324:	08006451 	.word	0x08006451
 8006328:	0800638d 	.word	0x0800638d
 800632c:	08006451 	.word	0x08006451
 8006330:	08006451 	.word	0x08006451
 8006334:	08006451 	.word	0x08006451
 8006338:	080063cf 	.word	0x080063cf
 800633c:	08006451 	.word	0x08006451
 8006340:	08006451 	.word	0x08006451
 8006344:	08006451 	.word	0x08006451
 8006348:	0800640f 	.word	0x0800640f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fa18 	bl	8006788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0208 	orr.w	r2, r2, #8
 8006366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0204 	bic.w	r2, r2, #4
 8006376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6999      	ldr	r1, [r3, #24]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	619a      	str	r2, [r3, #24]
      break;
 800638a:	e064      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fa68 	bl	8006868 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6999      	ldr	r1, [r3, #24]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	021a      	lsls	r2, r3, #8
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	619a      	str	r2, [r3, #24]
      break;
 80063cc:	e043      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fabd 	bl	8006954 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0208 	orr.w	r2, r2, #8
 80063e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69da      	ldr	r2, [r3, #28]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0204 	bic.w	r2, r2, #4
 80063f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69d9      	ldr	r1, [r3, #28]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	61da      	str	r2, [r3, #28]
      break;
 800640c:	e023      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fb11 	bl	8006a3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69da      	ldr	r2, [r3, #28]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69d9      	ldr	r1, [r3, #28]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	021a      	lsls	r2, r3, #8
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	61da      	str	r2, [r3, #28]
      break;
 800644e:	e002      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	75fb      	strb	r3, [r7, #23]
      break;
 8006454:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800645e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_TIM_ConfigClockSource+0x1c>
 8006480:	2302      	movs	r3, #2
 8006482:	e0b4      	b.n	80065ee <HAL_TIM_ConfigClockSource+0x186>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064bc:	d03e      	beq.n	800653c <HAL_TIM_ConfigClockSource+0xd4>
 80064be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c2:	f200 8087 	bhi.w	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ca:	f000 8086 	beq.w	80065da <HAL_TIM_ConfigClockSource+0x172>
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d2:	d87f      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064d4:	2b70      	cmp	r3, #112	; 0x70
 80064d6:	d01a      	beq.n	800650e <HAL_TIM_ConfigClockSource+0xa6>
 80064d8:	2b70      	cmp	r3, #112	; 0x70
 80064da:	d87b      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064dc:	2b60      	cmp	r3, #96	; 0x60
 80064de:	d050      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x11a>
 80064e0:	2b60      	cmp	r3, #96	; 0x60
 80064e2:	d877      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064e4:	2b50      	cmp	r3, #80	; 0x50
 80064e6:	d03c      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0xfa>
 80064e8:	2b50      	cmp	r3, #80	; 0x50
 80064ea:	d873      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064ec:	2b40      	cmp	r3, #64	; 0x40
 80064ee:	d058      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x13a>
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	d86f      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064f4:	2b30      	cmp	r3, #48	; 0x30
 80064f6:	d064      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 80064f8:	2b30      	cmp	r3, #48	; 0x30
 80064fa:	d86b      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	d060      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006500:	2b20      	cmp	r3, #32
 8006502:	d867      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d05c      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006508:	2b10      	cmp	r3, #16
 800650a:	d05a      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 800650c:	e062      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6899      	ldr	r1, [r3, #8]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f000 fb5d 	bl	8006bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	609a      	str	r2, [r3, #8]
      break;
 800653a:	e04f      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	6899      	ldr	r1, [r3, #8]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f000 fb46 	bl	8006bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800655e:	609a      	str	r2, [r3, #8]
      break;
 8006560:	e03c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6859      	ldr	r1, [r3, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	461a      	mov	r2, r3
 8006570:	f000 faba 	bl	8006ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2150      	movs	r1, #80	; 0x50
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fb13 	bl	8006ba6 <TIM_ITRx_SetConfig>
      break;
 8006580:	e02c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6859      	ldr	r1, [r3, #4]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	461a      	mov	r2, r3
 8006590:	f000 fad9 	bl	8006b46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2160      	movs	r1, #96	; 0x60
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fb03 	bl	8006ba6 <TIM_ITRx_SetConfig>
      break;
 80065a0:	e01c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6859      	ldr	r1, [r3, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	461a      	mov	r2, r3
 80065b0:	f000 fa9a 	bl	8006ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2140      	movs	r1, #64	; 0x40
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 faf3 	bl	8006ba6 <TIM_ITRx_SetConfig>
      break;
 80065c0:	e00c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4619      	mov	r1, r3
 80065cc:	4610      	mov	r0, r2
 80065ce:	f000 faea 	bl	8006ba6 <TIM_ITRx_SetConfig>
      break;
 80065d2:	e003      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
      break;
 80065d8:	e000      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
	...

08006648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a40      	ldr	r2, [pc, #256]	; (800675c <TIM_Base_SetConfig+0x114>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d013      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006666:	d00f      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a3d      	ldr	r2, [pc, #244]	; (8006760 <TIM_Base_SetConfig+0x118>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00b      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a3c      	ldr	r2, [pc, #240]	; (8006764 <TIM_Base_SetConfig+0x11c>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d007      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a3b      	ldr	r2, [pc, #236]	; (8006768 <TIM_Base_SetConfig+0x120>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d003      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a3a      	ldr	r2, [pc, #232]	; (800676c <TIM_Base_SetConfig+0x124>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d108      	bne.n	800669a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a2f      	ldr	r2, [pc, #188]	; (800675c <TIM_Base_SetConfig+0x114>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d02b      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a8:	d027      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a2c      	ldr	r2, [pc, #176]	; (8006760 <TIM_Base_SetConfig+0x118>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d023      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a2b      	ldr	r2, [pc, #172]	; (8006764 <TIM_Base_SetConfig+0x11c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01f      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a2a      	ldr	r2, [pc, #168]	; (8006768 <TIM_Base_SetConfig+0x120>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d01b      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a29      	ldr	r2, [pc, #164]	; (800676c <TIM_Base_SetConfig+0x124>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d017      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a28      	ldr	r2, [pc, #160]	; (8006770 <TIM_Base_SetConfig+0x128>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a27      	ldr	r2, [pc, #156]	; (8006774 <TIM_Base_SetConfig+0x12c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00f      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a26      	ldr	r2, [pc, #152]	; (8006778 <TIM_Base_SetConfig+0x130>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00b      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a25      	ldr	r2, [pc, #148]	; (800677c <TIM_Base_SetConfig+0x134>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d007      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a24      	ldr	r2, [pc, #144]	; (8006780 <TIM_Base_SetConfig+0x138>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d003      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a23      	ldr	r2, [pc, #140]	; (8006784 <TIM_Base_SetConfig+0x13c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d108      	bne.n	800670c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a0a      	ldr	r2, [pc, #40]	; (800675c <TIM_Base_SetConfig+0x114>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_Base_SetConfig+0xf8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a0c      	ldr	r2, [pc, #48]	; (800676c <TIM_Base_SetConfig+0x124>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d103      	bne.n	8006748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	615a      	str	r2, [r3, #20]
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40010000 	.word	0x40010000
 8006760:	40000400 	.word	0x40000400
 8006764:	40000800 	.word	0x40000800
 8006768:	40000c00 	.word	0x40000c00
 800676c:	40010400 	.word	0x40010400
 8006770:	40014000 	.word	0x40014000
 8006774:	40014400 	.word	0x40014400
 8006778:	40014800 	.word	0x40014800
 800677c:	40001800 	.word	0x40001800
 8006780:	40001c00 	.word	0x40001c00
 8006784:	40002000 	.word	0x40002000

08006788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f023 0201 	bic.w	r2, r3, #1
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0303 	bic.w	r3, r3, #3
 80067be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f023 0302 	bic.w	r3, r3, #2
 80067d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a20      	ldr	r2, [pc, #128]	; (8006860 <TIM_OC1_SetConfig+0xd8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_OC1_SetConfig+0x64>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a1f      	ldr	r2, [pc, #124]	; (8006864 <TIM_OC1_SetConfig+0xdc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d10c      	bne.n	8006806 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f023 0308 	bic.w	r3, r3, #8
 80067f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f023 0304 	bic.w	r3, r3, #4
 8006804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a15      	ldr	r2, [pc, #84]	; (8006860 <TIM_OC1_SetConfig+0xd8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d003      	beq.n	8006816 <TIM_OC1_SetConfig+0x8e>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a14      	ldr	r2, [pc, #80]	; (8006864 <TIM_OC1_SetConfig+0xdc>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d111      	bne.n	800683a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800681c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	621a      	str	r2, [r3, #32]
}
 8006854:	bf00      	nop
 8006856:	371c      	adds	r7, #28
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	40010000 	.word	0x40010000
 8006864:	40010400 	.word	0x40010400

08006868 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f023 0210 	bic.w	r2, r3, #16
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	021b      	lsls	r3, r3, #8
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 0320 	bic.w	r3, r3, #32
 80068b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	011b      	lsls	r3, r3, #4
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a22      	ldr	r2, [pc, #136]	; (800694c <TIM_OC2_SetConfig+0xe4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d003      	beq.n	80068d0 <TIM_OC2_SetConfig+0x68>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a21      	ldr	r2, [pc, #132]	; (8006950 <TIM_OC2_SetConfig+0xe8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10d      	bne.n	80068ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a17      	ldr	r2, [pc, #92]	; (800694c <TIM_OC2_SetConfig+0xe4>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d003      	beq.n	80068fc <TIM_OC2_SetConfig+0x94>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a16      	ldr	r2, [pc, #88]	; (8006950 <TIM_OC2_SetConfig+0xe8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d113      	bne.n	8006924 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800690a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40010000 	.word	0x40010000
 8006950:	40010400 	.word	0x40010400

08006954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0303 	bic.w	r3, r3, #3
 800698a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800699c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	021b      	lsls	r3, r3, #8
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a21      	ldr	r2, [pc, #132]	; (8006a34 <TIM_OC3_SetConfig+0xe0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d003      	beq.n	80069ba <TIM_OC3_SetConfig+0x66>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a20      	ldr	r2, [pc, #128]	; (8006a38 <TIM_OC3_SetConfig+0xe4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d10d      	bne.n	80069d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a16      	ldr	r2, [pc, #88]	; (8006a34 <TIM_OC3_SetConfig+0xe0>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d003      	beq.n	80069e6 <TIM_OC3_SetConfig+0x92>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a15      	ldr	r2, [pc, #84]	; (8006a38 <TIM_OC3_SetConfig+0xe4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d113      	bne.n	8006a0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	621a      	str	r2, [r3, #32]
}
 8006a28:	bf00      	nop
 8006a2a:	371c      	adds	r7, #28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	40010000 	.word	0x40010000
 8006a38:	40010400 	.word	0x40010400

08006a3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	021b      	lsls	r3, r3, #8
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	031b      	lsls	r3, r3, #12
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a12      	ldr	r2, [pc, #72]	; (8006ae0 <TIM_OC4_SetConfig+0xa4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d003      	beq.n	8006aa4 <TIM_OC4_SetConfig+0x68>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a11      	ldr	r2, [pc, #68]	; (8006ae4 <TIM_OC4_SetConfig+0xa8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d109      	bne.n	8006ab8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	019b      	lsls	r3, r3, #6
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	621a      	str	r2, [r3, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40010000 	.word	0x40010000
 8006ae4:	40010400 	.word	0x40010400

08006ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	f023 0201 	bic.w	r2, r3, #1
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	011b      	lsls	r3, r3, #4
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f023 030a 	bic.w	r3, r3, #10
 8006b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b087      	sub	sp, #28
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f023 0210 	bic.w	r2, r3, #16
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	031b      	lsls	r3, r3, #12
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b085      	sub	sp, #20
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f043 0307 	orr.w	r3, r3, #7
 8006bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	609a      	str	r2, [r3, #8]
}
 8006bd0:	bf00      	nop
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	021a      	lsls	r2, r3, #8
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	609a      	str	r2, [r3, #8]
}
 8006c10:	bf00      	nop
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d101      	bne.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c30:	2302      	movs	r3, #2
 8006c32:	e05a      	b.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a21      	ldr	r2, [pc, #132]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d022      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c80:	d01d      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1d      	ldr	r2, [pc, #116]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d018      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a1b      	ldr	r2, [pc, #108]	; (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d013      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1a      	ldr	r2, [pc, #104]	; (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00e      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a18      	ldr	r2, [pc, #96]	; (8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d009      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a17      	ldr	r2, [pc, #92]	; (8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d004      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a15      	ldr	r2, [pc, #84]	; (8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d10c      	bne.n	8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40010000 	.word	0x40010000
 8006cfc:	40000400 	.word	0x40000400
 8006d00:	40000800 	.word	0x40000800
 8006d04:	40000c00 	.word	0x40000c00
 8006d08:	40010400 	.word	0x40010400
 8006d0c:	40014000 	.word	0x40014000
 8006d10:	40001800 	.word	0x40001800

08006d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e03f      	b.n	8006dce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fc f84e 	bl	8002e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2224      	movs	r2, #36	; 0x24
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fddb 	bl	800793c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695a      	ldr	r2, [r3, #20]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006da4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006db4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b08a      	sub	sp, #40	; 0x28
 8006dda:	af02      	add	r7, sp, #8
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	4613      	mov	r3, r2
 8006de4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d17c      	bne.n	8006ef0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <HAL_UART_Transmit+0x2c>
 8006dfc:	88fb      	ldrh	r3, [r7, #6]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e075      	b.n	8006ef2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <HAL_UART_Transmit+0x3e>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e06e      	b.n	8006ef2 <HAL_UART_Transmit+0x11c>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2221      	movs	r2, #33	; 0x21
 8006e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e2a:	f7fc f907 	bl	800303c <HAL_GetTick>
 8006e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	88fa      	ldrh	r2, [r7, #6]
 8006e34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	88fa      	ldrh	r2, [r7, #6]
 8006e3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e44:	d108      	bne.n	8006e58 <HAL_UART_Transmit+0x82>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d104      	bne.n	8006e58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	e003      	b.n	8006e60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e68:	e02a      	b.n	8006ec0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2200      	movs	r2, #0
 8006e72:	2180      	movs	r1, #128	; 0x80
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 fb1f 	bl	80074b8 <UART_WaitOnFlagUntilTimeout>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e036      	b.n	8006ef2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10b      	bne.n	8006ea2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	3302      	adds	r3, #2
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	e007      	b.n	8006eb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	781a      	ldrb	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1cf      	bne.n	8006e6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2140      	movs	r1, #64	; 0x40
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 faef 	bl	80074b8 <UART_WaitOnFlagUntilTimeout>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e006      	b.n	8006ef2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	e000      	b.n	8006ef2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ef0:	2302      	movs	r3, #2
  }
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3720      	adds	r7, #32
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	4613      	mov	r3, r2
 8006f06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d11d      	bne.n	8006f50 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <HAL_UART_Receive_IT+0x26>
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e016      	b.n	8006f52 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_UART_Receive_IT+0x38>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e00f      	b.n	8006f52 <HAL_UART_Receive_IT+0x58>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	461a      	mov	r2, r3
 8006f44:	68b9      	ldr	r1, [r7, #8]
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 fb24 	bl	8007594 <UART_Start_Receive_IT>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	e000      	b.n	8006f52 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006f50:	2302      	movs	r3, #2
  }
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b0ba      	sub	sp, #232	; 0xe8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f92:	f003 030f 	and.w	r3, r3, #15
 8006f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006f9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10f      	bne.n	8006fc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d009      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x66>
 8006fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fc03 	bl	80077c6 <UART_Receive_IT>
      return;
 8006fc0:	e256      	b.n	8007470 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 80de 	beq.w	8007188 <HAL_UART_IRQHandler+0x22c>
 8006fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d106      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 80d1 	beq.w	8007188 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00b      	beq.n	800700a <HAL_UART_IRQHandler+0xae>
 8006ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	f043 0201 	orr.w	r2, r3, #1
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800700a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00b      	beq.n	800702e <HAL_UART_IRQHandler+0xd2>
 8007016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	f043 0202 	orr.w	r2, r3, #2
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800702e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00b      	beq.n	8007052 <HAL_UART_IRQHandler+0xf6>
 800703a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	f043 0204 	orr.w	r2, r3, #4
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d011      	beq.n	8007082 <HAL_UART_IRQHandler+0x126>
 800705e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d105      	bne.n	8007076 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800706a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d005      	beq.n	8007082 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	f043 0208 	orr.w	r2, r3, #8
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 81ed 	beq.w	8007466 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <HAL_UART_IRQHandler+0x14e>
 8007098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709c:	f003 0320 	and.w	r3, r3, #32
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fb8e 	bl	80077c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b4:	2b40      	cmp	r3, #64	; 0x40
 80070b6:	bf0c      	ite	eq
 80070b8:	2301      	moveq	r3, #1
 80070ba:	2300      	movne	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d103      	bne.n	80070d6 <HAL_UART_IRQHandler+0x17a>
 80070ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d04f      	beq.n	8007176 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fa96 	bl	8007608 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e6:	2b40      	cmp	r3, #64	; 0x40
 80070e8:	d141      	bne.n	800716e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3314      	adds	r3, #20
 80070f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3314      	adds	r3, #20
 8007112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007116:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800711a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800712e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1d9      	bne.n	80070ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	2b00      	cmp	r3, #0
 800713c:	d013      	beq.n	8007166 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	4a7d      	ldr	r2, [pc, #500]	; (8007338 <HAL_UART_IRQHandler+0x3dc>)
 8007144:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714a:	4618      	mov	r0, r3
 800714c:	f7fc fe40 	bl	8003dd0 <HAL_DMA_Abort_IT>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d016      	beq.n	8007184 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007160:	4610      	mov	r0, r2
 8007162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007164:	e00e      	b.n	8007184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f990 	bl	800748c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800716c:	e00a      	b.n	8007184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f98c 	bl	800748c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007174:	e006      	b.n	8007184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f988 	bl	800748c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007182:	e170      	b.n	8007466 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007184:	bf00      	nop
    return;
 8007186:	e16e      	b.n	8007466 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	2b01      	cmp	r3, #1
 800718e:	f040 814a 	bne.w	8007426 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 8143 	beq.w	8007426 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80071a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a4:	f003 0310 	and.w	r3, r3, #16
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 813c 	beq.w	8007426 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071ae:	2300      	movs	r3, #0
 80071b0:	60bb      	str	r3, [r7, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	60bb      	str	r3, [r7, #8]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	60bb      	str	r3, [r7, #8]
 80071c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ce:	2b40      	cmp	r3, #64	; 0x40
 80071d0:	f040 80b4 	bne.w	800733c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8140 	beq.w	800746a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071f2:	429a      	cmp	r2, r3
 80071f4:	f080 8139 	bcs.w	800746a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720a:	f000 8088 	beq.w	800731e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	330c      	adds	r3, #12
 8007214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800722c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	330c      	adds	r3, #12
 8007236:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800723a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800723e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007242:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007246:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1d9      	bne.n	800720e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3314      	adds	r3, #20
 8007260:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800726a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800726c:	f023 0301 	bic.w	r3, r3, #1
 8007270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3314      	adds	r3, #20
 800727a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800727e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007282:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007286:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e1      	bne.n	800725a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3314      	adds	r3, #20
 800729c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3314      	adds	r3, #20
 80072b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e3      	bne.n	8007296 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2220      	movs	r2, #32
 80072d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	330c      	adds	r3, #12
 80072e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072ee:	f023 0310 	bic.w	r3, r3, #16
 80072f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	330c      	adds	r3, #12
 80072fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007300:	65ba      	str	r2, [r7, #88]	; 0x58
 8007302:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800730e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e3      	bne.n	80072dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007318:	4618      	mov	r0, r3
 800731a:	f7fc fce9 	bl	8003cf0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007326:	b29b      	uxth	r3, r3
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	b29b      	uxth	r3, r3
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f8b6 	bl	80074a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007334:	e099      	b.n	800746a <HAL_UART_IRQHandler+0x50e>
 8007336:	bf00      	nop
 8007338:	080076cf 	.word	0x080076cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007344:	b29b      	uxth	r3, r3
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007350:	b29b      	uxth	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 808b 	beq.w	800746e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 8086 	beq.w	800746e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	330c      	adds	r3, #12
 8007368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	330c      	adds	r3, #12
 8007382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007386:	647a      	str	r2, [r7, #68]	; 0x44
 8007388:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800738c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e3      	bne.n	8007362 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3314      	adds	r3, #20
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	623b      	str	r3, [r7, #32]
   return(result);
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	f023 0301 	bic.w	r3, r3, #1
 80073b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3314      	adds	r3, #20
 80073ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073be:	633a      	str	r2, [r7, #48]	; 0x30
 80073c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c6:	e841 2300 	strex	r3, r2, [r1]
 80073ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1e3      	bne.n	800739a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2220      	movs	r2, #32
 80073d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	330c      	adds	r3, #12
 80073e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	e853 3f00 	ldrex	r3, [r3]
 80073ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0310 	bic.w	r3, r3, #16
 80073f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007404:	61fa      	str	r2, [r7, #28]
 8007406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	69b9      	ldr	r1, [r7, #24]
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	e841 2300 	strex	r3, r2, [r1]
 8007410:	617b      	str	r3, [r7, #20]
   return(result);
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e3      	bne.n	80073e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f83e 	bl	80074a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007424:	e023      	b.n	800746e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <HAL_UART_IRQHandler+0x4ea>
 8007432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f959 	bl	80076f6 <UART_Transmit_IT>
    return;
 8007444:	e014      	b.n	8007470 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00e      	beq.n	8007470 <HAL_UART_IRQHandler+0x514>
 8007452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d008      	beq.n	8007470 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f999 	bl	8007796 <UART_EndTransmit_IT>
    return;
 8007464:	e004      	b.n	8007470 <HAL_UART_IRQHandler+0x514>
    return;
 8007466:	bf00      	nop
 8007468:	e002      	b.n	8007470 <HAL_UART_IRQHandler+0x514>
      return;
 800746a:	bf00      	nop
 800746c:	e000      	b.n	8007470 <HAL_UART_IRQHandler+0x514>
      return;
 800746e:	bf00      	nop
  }
}
 8007470:	37e8      	adds	r7, #232	; 0xe8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop

08007478 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b090      	sub	sp, #64	; 0x40
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	603b      	str	r3, [r7, #0]
 80074c4:	4613      	mov	r3, r2
 80074c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074c8:	e050      	b.n	800756c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d0:	d04c      	beq.n	800756c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d007      	beq.n	80074e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80074d8:	f7fb fdb0 	bl	800303c <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d241      	bcs.n	800756c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	330c      	adds	r3, #12
 80074ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	330c      	adds	r3, #12
 8007506:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007508:	637a      	str	r2, [r7, #52]	; 0x34
 800750a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800750e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e5      	bne.n	80074e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3314      	adds	r3, #20
 8007522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	613b      	str	r3, [r7, #16]
   return(result);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	63bb      	str	r3, [r7, #56]	; 0x38
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3314      	adds	r3, #20
 800753a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800753c:	623a      	str	r2, [r7, #32]
 800753e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	69f9      	ldr	r1, [r7, #28]
 8007542:	6a3a      	ldr	r2, [r7, #32]
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	61bb      	str	r3, [r7, #24]
   return(result);
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e5      	bne.n	800751c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e00f      	b.n	800758c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	4013      	ands	r3, r2
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	429a      	cmp	r2, r3
 800757a:	bf0c      	ite	eq
 800757c:	2301      	moveq	r3, #1
 800757e:	2300      	movne	r3, #0
 8007580:	b2db      	uxtb	r3, r3
 8007582:	461a      	mov	r2, r3
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	429a      	cmp	r2, r3
 8007588:	d09f      	beq.n	80074ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3740      	adds	r7, #64	; 0x40
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	4613      	mov	r3, r2
 80075a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	88fa      	ldrh	r2, [r7, #6]
 80075ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	88fa      	ldrh	r2, [r7, #6]
 80075b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2222      	movs	r2, #34	; 0x22
 80075be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075d8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	695a      	ldr	r2, [r3, #20]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f042 0201 	orr.w	r2, r2, #1
 80075e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f042 0220 	orr.w	r2, r2, #32
 80075f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b095      	sub	sp, #84	; 0x54
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	330c      	adds	r3, #12
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007630:	643a      	str	r2, [r7, #64]	; 0x40
 8007632:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007636:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e5      	bne.n	8007610 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3314      	adds	r3, #20
 800764a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	61fb      	str	r3, [r7, #28]
   return(result);
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	f023 0301 	bic.w	r3, r3, #1
 800765a:	64bb      	str	r3, [r7, #72]	; 0x48
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3314      	adds	r3, #20
 8007662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007664:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800766a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e5      	bne.n	8007644 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767c:	2b01      	cmp	r3, #1
 800767e:	d119      	bne.n	80076b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	330c      	adds	r3, #12
 8007686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f023 0310 	bic.w	r3, r3, #16
 8007696:	647b      	str	r3, [r7, #68]	; 0x44
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	330c      	adds	r3, #12
 800769e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076a0:	61ba      	str	r2, [r7, #24]
 80076a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	6979      	ldr	r1, [r7, #20]
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	e841 2300 	strex	r3, r2, [r1]
 80076ac:	613b      	str	r3, [r7, #16]
   return(result);
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e5      	bne.n	8007680 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076c2:	bf00      	nop
 80076c4:	3754      	adds	r7, #84	; 0x54
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f7ff fecf 	bl	800748c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b085      	sub	sp, #20
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b21      	cmp	r3, #33	; 0x21
 8007708:	d13e      	bne.n	8007788 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007712:	d114      	bne.n	800773e <UART_Transmit_IT+0x48>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d110      	bne.n	800773e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007730:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	1c9a      	adds	r2, r3, #2
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	621a      	str	r2, [r3, #32]
 800773c:	e008      	b.n	8007750 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	1c59      	adds	r1, r3, #1
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6211      	str	r1, [r2, #32]
 8007748:	781a      	ldrb	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	b29b      	uxth	r3, r3
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	4619      	mov	r1, r3
 800775e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10f      	bne.n	8007784 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007772:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007782:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	e000      	b.n	800778a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007788:	2302      	movs	r3, #2
  }
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff fe5e 	bl	8007478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b08c      	sub	sp, #48	; 0x30
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b22      	cmp	r3, #34	; 0x22
 80077d8:	f040 80ab 	bne.w	8007932 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e4:	d117      	bne.n	8007816 <UART_Receive_IT+0x50>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d113      	bne.n	8007816 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007804:	b29a      	uxth	r2, r3
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780e:	1c9a      	adds	r2, r3, #2
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	629a      	str	r2, [r3, #40]	; 0x28
 8007814:	e026      	b.n	8007864 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800781c:	2300      	movs	r3, #0
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007828:	d007      	beq.n	800783a <UART_Receive_IT+0x74>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <UART_Receive_IT+0x82>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	b2da      	uxtb	r2, r3
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	e008      	b.n	800785a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007854:	b2da      	uxtb	r2, r3
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007868:	b29b      	uxth	r3, r3
 800786a:	3b01      	subs	r3, #1
 800786c:	b29b      	uxth	r3, r3
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	4619      	mov	r1, r3
 8007872:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007874:	2b00      	cmp	r3, #0
 8007876:	d15a      	bne.n	800792e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0220 	bic.w	r2, r2, #32
 8007886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007896:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695a      	ldr	r2, [r3, #20]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0201 	bic.w	r2, r2, #1
 80078a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d135      	bne.n	8007924 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	330c      	adds	r3, #12
 80078c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	613b      	str	r3, [r7, #16]
   return(result);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f023 0310 	bic.w	r3, r3, #16
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	330c      	adds	r3, #12
 80078dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078de:	623a      	str	r2, [r7, #32]
 80078e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	69f9      	ldr	r1, [r7, #28]
 80078e4:	6a3a      	ldr	r2, [r7, #32]
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e5      	bne.n	80078be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b10      	cmp	r3, #16
 80078fe:	d10a      	bne.n	8007916 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007900:	2300      	movs	r3, #0
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff fdbf 	bl	80074a0 <HAL_UARTEx_RxEventCallback>
 8007922:	e002      	b.n	800792a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fb f9bf 	bl	8002ca8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	e002      	b.n	8007934 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	e000      	b.n	8007934 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007932:	2302      	movs	r3, #2
  }
}
 8007934:	4618      	mov	r0, r3
 8007936:	3730      	adds	r7, #48	; 0x30
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007940:	b09f      	sub	sp, #124	; 0x7c
 8007942:	af00      	add	r7, sp, #0
 8007944:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007952:	68d9      	ldr	r1, [r3, #12]
 8007954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	ea40 0301 	orr.w	r3, r0, r1
 800795c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800795e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	431a      	orrs	r2, r3
 8007968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	431a      	orrs	r2, r3
 800796e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	4313      	orrs	r3, r2
 8007974:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007980:	f021 010c 	bic.w	r1, r1, #12
 8007984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800798a:	430b      	orrs	r3, r1
 800798c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800798e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800799a:	6999      	ldr	r1, [r3, #24]
 800799c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	ea40 0301 	orr.w	r3, r0, r1
 80079a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4bc5      	ldr	r3, [pc, #788]	; (8007cc0 <UART_SetConfig+0x384>)
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d004      	beq.n	80079ba <UART_SetConfig+0x7e>
 80079b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	4bc3      	ldr	r3, [pc, #780]	; (8007cc4 <UART_SetConfig+0x388>)
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d103      	bne.n	80079c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079ba:	f7fd fc09 	bl	80051d0 <HAL_RCC_GetPCLK2Freq>
 80079be:	6778      	str	r0, [r7, #116]	; 0x74
 80079c0:	e002      	b.n	80079c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079c2:	f7fd fbf1 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 80079c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079d0:	f040 80b6 	bne.w	8007b40 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079d6:	461c      	mov	r4, r3
 80079d8:	f04f 0500 	mov.w	r5, #0
 80079dc:	4622      	mov	r2, r4
 80079de:	462b      	mov	r3, r5
 80079e0:	1891      	adds	r1, r2, r2
 80079e2:	6439      	str	r1, [r7, #64]	; 0x40
 80079e4:	415b      	adcs	r3, r3
 80079e6:	647b      	str	r3, [r7, #68]	; 0x44
 80079e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079ec:	1912      	adds	r2, r2, r4
 80079ee:	eb45 0303 	adc.w	r3, r5, r3
 80079f2:	f04f 0000 	mov.w	r0, #0
 80079f6:	f04f 0100 	mov.w	r1, #0
 80079fa:	00d9      	lsls	r1, r3, #3
 80079fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a00:	00d0      	lsls	r0, r2, #3
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	1911      	adds	r1, r2, r4
 8007a08:	6639      	str	r1, [r7, #96]	; 0x60
 8007a0a:	416b      	adcs	r3, r5
 8007a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	461a      	mov	r2, r3
 8007a14:	f04f 0300 	mov.w	r3, #0
 8007a18:	1891      	adds	r1, r2, r2
 8007a1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a1c:	415b      	adcs	r3, r3
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007a28:	f7f9 f92e 	bl	8000c88 <__aeabi_uldivmod>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4ba5      	ldr	r3, [pc, #660]	; (8007cc8 <UART_SetConfig+0x38c>)
 8007a32:	fba3 2302 	umull	r2, r3, r3, r2
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	011e      	lsls	r6, r3, #4
 8007a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a3c:	461c      	mov	r4, r3
 8007a3e:	f04f 0500 	mov.w	r5, #0
 8007a42:	4622      	mov	r2, r4
 8007a44:	462b      	mov	r3, r5
 8007a46:	1891      	adds	r1, r2, r2
 8007a48:	6339      	str	r1, [r7, #48]	; 0x30
 8007a4a:	415b      	adcs	r3, r3
 8007a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007a52:	1912      	adds	r2, r2, r4
 8007a54:	eb45 0303 	adc.w	r3, r5, r3
 8007a58:	f04f 0000 	mov.w	r0, #0
 8007a5c:	f04f 0100 	mov.w	r1, #0
 8007a60:	00d9      	lsls	r1, r3, #3
 8007a62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a66:	00d0      	lsls	r0, r2, #3
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	1911      	adds	r1, r2, r4
 8007a6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a70:	416b      	adcs	r3, r5
 8007a72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f04f 0300 	mov.w	r3, #0
 8007a7e:	1891      	adds	r1, r2, r2
 8007a80:	62b9      	str	r1, [r7, #40]	; 0x28
 8007a82:	415b      	adcs	r3, r3
 8007a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007a8e:	f7f9 f8fb 	bl	8000c88 <__aeabi_uldivmod>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4b8c      	ldr	r3, [pc, #560]	; (8007cc8 <UART_SetConfig+0x38c>)
 8007a98:	fba3 1302 	umull	r1, r3, r3, r2
 8007a9c:	095b      	lsrs	r3, r3, #5
 8007a9e:	2164      	movs	r1, #100	; 0x64
 8007aa0:	fb01 f303 	mul.w	r3, r1, r3
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	00db      	lsls	r3, r3, #3
 8007aa8:	3332      	adds	r3, #50	; 0x32
 8007aaa:	4a87      	ldr	r2, [pc, #540]	; (8007cc8 <UART_SetConfig+0x38c>)
 8007aac:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab0:	095b      	lsrs	r3, r3, #5
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ab8:	441e      	add	r6, r3
 8007aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007abc:	4618      	mov	r0, r3
 8007abe:	f04f 0100 	mov.w	r1, #0
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	1894      	adds	r4, r2, r2
 8007ac8:	623c      	str	r4, [r7, #32]
 8007aca:	415b      	adcs	r3, r3
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ad2:	1812      	adds	r2, r2, r0
 8007ad4:	eb41 0303 	adc.w	r3, r1, r3
 8007ad8:	f04f 0400 	mov.w	r4, #0
 8007adc:	f04f 0500 	mov.w	r5, #0
 8007ae0:	00dd      	lsls	r5, r3, #3
 8007ae2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ae6:	00d4      	lsls	r4, r2, #3
 8007ae8:	4622      	mov	r2, r4
 8007aea:	462b      	mov	r3, r5
 8007aec:	1814      	adds	r4, r2, r0
 8007aee:	653c      	str	r4, [r7, #80]	; 0x50
 8007af0:	414b      	adcs	r3, r1
 8007af2:	657b      	str	r3, [r7, #84]	; 0x54
 8007af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	461a      	mov	r2, r3
 8007afa:	f04f 0300 	mov.w	r3, #0
 8007afe:	1891      	adds	r1, r2, r2
 8007b00:	61b9      	str	r1, [r7, #24]
 8007b02:	415b      	adcs	r3, r3
 8007b04:	61fb      	str	r3, [r7, #28]
 8007b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007b0e:	f7f9 f8bb 	bl	8000c88 <__aeabi_uldivmod>
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4b6c      	ldr	r3, [pc, #432]	; (8007cc8 <UART_SetConfig+0x38c>)
 8007b18:	fba3 1302 	umull	r1, r3, r3, r2
 8007b1c:	095b      	lsrs	r3, r3, #5
 8007b1e:	2164      	movs	r1, #100	; 0x64
 8007b20:	fb01 f303 	mul.w	r3, r1, r3
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	00db      	lsls	r3, r3, #3
 8007b28:	3332      	adds	r3, #50	; 0x32
 8007b2a:	4a67      	ldr	r2, [pc, #412]	; (8007cc8 <UART_SetConfig+0x38c>)
 8007b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b30:	095b      	lsrs	r3, r3, #5
 8007b32:	f003 0207 	and.w	r2, r3, #7
 8007b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4432      	add	r2, r6
 8007b3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b3e:	e0b9      	b.n	8007cb4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b42:	461c      	mov	r4, r3
 8007b44:	f04f 0500 	mov.w	r5, #0
 8007b48:	4622      	mov	r2, r4
 8007b4a:	462b      	mov	r3, r5
 8007b4c:	1891      	adds	r1, r2, r2
 8007b4e:	6139      	str	r1, [r7, #16]
 8007b50:	415b      	adcs	r3, r3
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007b58:	1912      	adds	r2, r2, r4
 8007b5a:	eb45 0303 	adc.w	r3, r5, r3
 8007b5e:	f04f 0000 	mov.w	r0, #0
 8007b62:	f04f 0100 	mov.w	r1, #0
 8007b66:	00d9      	lsls	r1, r3, #3
 8007b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b6c:	00d0      	lsls	r0, r2, #3
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	eb12 0804 	adds.w	r8, r2, r4
 8007b76:	eb43 0905 	adc.w	r9, r3, r5
 8007b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f04f 0100 	mov.w	r1, #0
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	008b      	lsls	r3, r1, #2
 8007b8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b92:	0082      	lsls	r2, r0, #2
 8007b94:	4640      	mov	r0, r8
 8007b96:	4649      	mov	r1, r9
 8007b98:	f7f9 f876 	bl	8000c88 <__aeabi_uldivmod>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4b49      	ldr	r3, [pc, #292]	; (8007cc8 <UART_SetConfig+0x38c>)
 8007ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	011e      	lsls	r6, r3, #4
 8007baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bac:	4618      	mov	r0, r3
 8007bae:	f04f 0100 	mov.w	r1, #0
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	1894      	adds	r4, r2, r2
 8007bb8:	60bc      	str	r4, [r7, #8]
 8007bba:	415b      	adcs	r3, r3
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bc2:	1812      	adds	r2, r2, r0
 8007bc4:	eb41 0303 	adc.w	r3, r1, r3
 8007bc8:	f04f 0400 	mov.w	r4, #0
 8007bcc:	f04f 0500 	mov.w	r5, #0
 8007bd0:	00dd      	lsls	r5, r3, #3
 8007bd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007bd6:	00d4      	lsls	r4, r2, #3
 8007bd8:	4622      	mov	r2, r4
 8007bda:	462b      	mov	r3, r5
 8007bdc:	1814      	adds	r4, r2, r0
 8007bde:	64bc      	str	r4, [r7, #72]	; 0x48
 8007be0:	414b      	adcs	r3, r1
 8007be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f04f 0100 	mov.w	r1, #0
 8007bee:	f04f 0200 	mov.w	r2, #0
 8007bf2:	f04f 0300 	mov.w	r3, #0
 8007bf6:	008b      	lsls	r3, r1, #2
 8007bf8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007bfc:	0082      	lsls	r2, r0, #2
 8007bfe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007c02:	f7f9 f841 	bl	8000c88 <__aeabi_uldivmod>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4b2f      	ldr	r3, [pc, #188]	; (8007cc8 <UART_SetConfig+0x38c>)
 8007c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c10:	095b      	lsrs	r3, r3, #5
 8007c12:	2164      	movs	r1, #100	; 0x64
 8007c14:	fb01 f303 	mul.w	r3, r1, r3
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	3332      	adds	r3, #50	; 0x32
 8007c1e:	4a2a      	ldr	r2, [pc, #168]	; (8007cc8 <UART_SetConfig+0x38c>)
 8007c20:	fba2 2303 	umull	r2, r3, r2, r3
 8007c24:	095b      	lsrs	r3, r3, #5
 8007c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c2a:	441e      	add	r6, r3
 8007c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f04f 0100 	mov.w	r1, #0
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	1894      	adds	r4, r2, r2
 8007c3a:	603c      	str	r4, [r7, #0]
 8007c3c:	415b      	adcs	r3, r3
 8007c3e:	607b      	str	r3, [r7, #4]
 8007c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c44:	1812      	adds	r2, r2, r0
 8007c46:	eb41 0303 	adc.w	r3, r1, r3
 8007c4a:	f04f 0400 	mov.w	r4, #0
 8007c4e:	f04f 0500 	mov.w	r5, #0
 8007c52:	00dd      	lsls	r5, r3, #3
 8007c54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c58:	00d4      	lsls	r4, r2, #3
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	462b      	mov	r3, r5
 8007c5e:	eb12 0a00 	adds.w	sl, r2, r0
 8007c62:	eb43 0b01 	adc.w	fp, r3, r1
 8007c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f04f 0100 	mov.w	r1, #0
 8007c70:	f04f 0200 	mov.w	r2, #0
 8007c74:	f04f 0300 	mov.w	r3, #0
 8007c78:	008b      	lsls	r3, r1, #2
 8007c7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c7e:	0082      	lsls	r2, r0, #2
 8007c80:	4650      	mov	r0, sl
 8007c82:	4659      	mov	r1, fp
 8007c84:	f7f9 f800 	bl	8000c88 <__aeabi_uldivmod>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4b0e      	ldr	r3, [pc, #56]	; (8007cc8 <UART_SetConfig+0x38c>)
 8007c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c92:	095b      	lsrs	r3, r3, #5
 8007c94:	2164      	movs	r1, #100	; 0x64
 8007c96:	fb01 f303 	mul.w	r3, r1, r3
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	3332      	adds	r3, #50	; 0x32
 8007ca0:	4a09      	ldr	r2, [pc, #36]	; (8007cc8 <UART_SetConfig+0x38c>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	095b      	lsrs	r3, r3, #5
 8007ca8:	f003 020f 	and.w	r2, r3, #15
 8007cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4432      	add	r2, r6
 8007cb2:	609a      	str	r2, [r3, #8]
}
 8007cb4:	bf00      	nop
 8007cb6:	377c      	adds	r7, #124	; 0x7c
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cbe:	bf00      	nop
 8007cc0:	40011000 	.word	0x40011000
 8007cc4:	40011400 	.word	0x40011400
 8007cc8:	51eb851f 	.word	0x51eb851f

08007ccc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	4b20      	ldr	r3, [pc, #128]	; (8007d6c <FSMC_NORSRAM_Init+0xa0>)
 8007cea:	4013      	ands	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007cf6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007cfc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007d02:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007d08:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007d0e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007d14:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007d1a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007d20:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007d26:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007d2c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007d32:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007d38:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d103      	bne.n	8007d50 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d4e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68f9      	ldr	r1, [r7, #12]
 8007d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	fff00080 	.word	0xfff00080

08007d70 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007d92:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007d9e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007da6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007dae:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	3b01      	subs	r3, #1
 8007db6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007db8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	3b02      	subs	r3, #2
 8007dc0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007dc2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6979      	ldr	r1, [r7, #20]
 8007dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
	...

08007dec <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e04:	d122      	bne.n	8007e4c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	4b15      	ldr	r3, [pc, #84]	; (8007e68 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007e22:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007e2a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007e32:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007e38:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6979      	ldr	r1, [r7, #20]
 8007e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007e4a:	e005      	b.n	8007e58 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	cff00000 	.word	0xcff00000

08007e6c <__errno>:
 8007e6c:	4b01      	ldr	r3, [pc, #4]	; (8007e74 <__errno+0x8>)
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20000014 	.word	0x20000014

08007e78 <__libc_init_array>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	4d0d      	ldr	r5, [pc, #52]	; (8007eb0 <__libc_init_array+0x38>)
 8007e7c:	4c0d      	ldr	r4, [pc, #52]	; (8007eb4 <__libc_init_array+0x3c>)
 8007e7e:	1b64      	subs	r4, r4, r5
 8007e80:	10a4      	asrs	r4, r4, #2
 8007e82:	2600      	movs	r6, #0
 8007e84:	42a6      	cmp	r6, r4
 8007e86:	d109      	bne.n	8007e9c <__libc_init_array+0x24>
 8007e88:	4d0b      	ldr	r5, [pc, #44]	; (8007eb8 <__libc_init_array+0x40>)
 8007e8a:	4c0c      	ldr	r4, [pc, #48]	; (8007ebc <__libc_init_array+0x44>)
 8007e8c:	f004 fc44 	bl	800c718 <_init>
 8007e90:	1b64      	subs	r4, r4, r5
 8007e92:	10a4      	asrs	r4, r4, #2
 8007e94:	2600      	movs	r6, #0
 8007e96:	42a6      	cmp	r6, r4
 8007e98:	d105      	bne.n	8007ea6 <__libc_init_array+0x2e>
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea0:	4798      	blx	r3
 8007ea2:	3601      	adds	r6, #1
 8007ea4:	e7ee      	b.n	8007e84 <__libc_init_array+0xc>
 8007ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eaa:	4798      	blx	r3
 8007eac:	3601      	adds	r6, #1
 8007eae:	e7f2      	b.n	8007e96 <__libc_init_array+0x1e>
 8007eb0:	0800fbb4 	.word	0x0800fbb4
 8007eb4:	0800fbb4 	.word	0x0800fbb4
 8007eb8:	0800fbb4 	.word	0x0800fbb4
 8007ebc:	0800fbb8 	.word	0x0800fbb8

08007ec0 <memset>:
 8007ec0:	4402      	add	r2, r0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d100      	bne.n	8007eca <memset+0xa>
 8007ec8:	4770      	bx	lr
 8007eca:	f803 1b01 	strb.w	r1, [r3], #1
 8007ece:	e7f9      	b.n	8007ec4 <memset+0x4>

08007ed0 <__cvt>:
 8007ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed4:	ec55 4b10 	vmov	r4, r5, d0
 8007ed8:	2d00      	cmp	r5, #0
 8007eda:	460e      	mov	r6, r1
 8007edc:	4619      	mov	r1, r3
 8007ede:	462b      	mov	r3, r5
 8007ee0:	bfbb      	ittet	lt
 8007ee2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ee6:	461d      	movlt	r5, r3
 8007ee8:	2300      	movge	r3, #0
 8007eea:	232d      	movlt	r3, #45	; 0x2d
 8007eec:	700b      	strb	r3, [r1, #0]
 8007eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ef0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ef4:	4691      	mov	r9, r2
 8007ef6:	f023 0820 	bic.w	r8, r3, #32
 8007efa:	bfbc      	itt	lt
 8007efc:	4622      	movlt	r2, r4
 8007efe:	4614      	movlt	r4, r2
 8007f00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f04:	d005      	beq.n	8007f12 <__cvt+0x42>
 8007f06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f0a:	d100      	bne.n	8007f0e <__cvt+0x3e>
 8007f0c:	3601      	adds	r6, #1
 8007f0e:	2102      	movs	r1, #2
 8007f10:	e000      	b.n	8007f14 <__cvt+0x44>
 8007f12:	2103      	movs	r1, #3
 8007f14:	ab03      	add	r3, sp, #12
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	ab02      	add	r3, sp, #8
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	ec45 4b10 	vmov	d0, r4, r5
 8007f20:	4653      	mov	r3, sl
 8007f22:	4632      	mov	r2, r6
 8007f24:	f001 fdb4 	bl	8009a90 <_dtoa_r>
 8007f28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f2c:	4607      	mov	r7, r0
 8007f2e:	d102      	bne.n	8007f36 <__cvt+0x66>
 8007f30:	f019 0f01 	tst.w	r9, #1
 8007f34:	d022      	beq.n	8007f7c <__cvt+0xac>
 8007f36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f3a:	eb07 0906 	add.w	r9, r7, r6
 8007f3e:	d110      	bne.n	8007f62 <__cvt+0x92>
 8007f40:	783b      	ldrb	r3, [r7, #0]
 8007f42:	2b30      	cmp	r3, #48	; 0x30
 8007f44:	d10a      	bne.n	8007f5c <__cvt+0x8c>
 8007f46:	2200      	movs	r2, #0
 8007f48:	2300      	movs	r3, #0
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	f7f8 fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f52:	b918      	cbnz	r0, 8007f5c <__cvt+0x8c>
 8007f54:	f1c6 0601 	rsb	r6, r6, #1
 8007f58:	f8ca 6000 	str.w	r6, [sl]
 8007f5c:	f8da 3000 	ldr.w	r3, [sl]
 8007f60:	4499      	add	r9, r3
 8007f62:	2200      	movs	r2, #0
 8007f64:	2300      	movs	r3, #0
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f8 fdad 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f6e:	b108      	cbz	r0, 8007f74 <__cvt+0xa4>
 8007f70:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f74:	2230      	movs	r2, #48	; 0x30
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	454b      	cmp	r3, r9
 8007f7a:	d307      	bcc.n	8007f8c <__cvt+0xbc>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f80:	1bdb      	subs	r3, r3, r7
 8007f82:	4638      	mov	r0, r7
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	b004      	add	sp, #16
 8007f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8c:	1c59      	adds	r1, r3, #1
 8007f8e:	9103      	str	r1, [sp, #12]
 8007f90:	701a      	strb	r2, [r3, #0]
 8007f92:	e7f0      	b.n	8007f76 <__cvt+0xa6>

08007f94 <__exponent>:
 8007f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f96:	4603      	mov	r3, r0
 8007f98:	2900      	cmp	r1, #0
 8007f9a:	bfb8      	it	lt
 8007f9c:	4249      	neglt	r1, r1
 8007f9e:	f803 2b02 	strb.w	r2, [r3], #2
 8007fa2:	bfb4      	ite	lt
 8007fa4:	222d      	movlt	r2, #45	; 0x2d
 8007fa6:	222b      	movge	r2, #43	; 0x2b
 8007fa8:	2909      	cmp	r1, #9
 8007faa:	7042      	strb	r2, [r0, #1]
 8007fac:	dd2a      	ble.n	8008004 <__exponent+0x70>
 8007fae:	f10d 0407 	add.w	r4, sp, #7
 8007fb2:	46a4      	mov	ip, r4
 8007fb4:	270a      	movs	r7, #10
 8007fb6:	46a6      	mov	lr, r4
 8007fb8:	460a      	mov	r2, r1
 8007fba:	fb91 f6f7 	sdiv	r6, r1, r7
 8007fbe:	fb07 1516 	mls	r5, r7, r6, r1
 8007fc2:	3530      	adds	r5, #48	; 0x30
 8007fc4:	2a63      	cmp	r2, #99	; 0x63
 8007fc6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007fca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007fce:	4631      	mov	r1, r6
 8007fd0:	dcf1      	bgt.n	8007fb6 <__exponent+0x22>
 8007fd2:	3130      	adds	r1, #48	; 0x30
 8007fd4:	f1ae 0502 	sub.w	r5, lr, #2
 8007fd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007fdc:	1c44      	adds	r4, r0, #1
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4561      	cmp	r1, ip
 8007fe2:	d30a      	bcc.n	8007ffa <__exponent+0x66>
 8007fe4:	f10d 0209 	add.w	r2, sp, #9
 8007fe8:	eba2 020e 	sub.w	r2, r2, lr
 8007fec:	4565      	cmp	r5, ip
 8007fee:	bf88      	it	hi
 8007ff0:	2200      	movhi	r2, #0
 8007ff2:	4413      	add	r3, r2
 8007ff4:	1a18      	subs	r0, r3, r0
 8007ff6:	b003      	add	sp, #12
 8007ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ffe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008002:	e7ed      	b.n	8007fe0 <__exponent+0x4c>
 8008004:	2330      	movs	r3, #48	; 0x30
 8008006:	3130      	adds	r1, #48	; 0x30
 8008008:	7083      	strb	r3, [r0, #2]
 800800a:	70c1      	strb	r1, [r0, #3]
 800800c:	1d03      	adds	r3, r0, #4
 800800e:	e7f1      	b.n	8007ff4 <__exponent+0x60>

08008010 <_printf_float>:
 8008010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008014:	ed2d 8b02 	vpush	{d8}
 8008018:	b08d      	sub	sp, #52	; 0x34
 800801a:	460c      	mov	r4, r1
 800801c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008020:	4616      	mov	r6, r2
 8008022:	461f      	mov	r7, r3
 8008024:	4605      	mov	r5, r0
 8008026:	f002 fe8f 	bl	800ad48 <_localeconv_r>
 800802a:	f8d0 a000 	ldr.w	sl, [r0]
 800802e:	4650      	mov	r0, sl
 8008030:	f7f8 f8ce 	bl	80001d0 <strlen>
 8008034:	2300      	movs	r3, #0
 8008036:	930a      	str	r3, [sp, #40]	; 0x28
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	9305      	str	r3, [sp, #20]
 800803c:	f8d8 3000 	ldr.w	r3, [r8]
 8008040:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008044:	3307      	adds	r3, #7
 8008046:	f023 0307 	bic.w	r3, r3, #7
 800804a:	f103 0208 	add.w	r2, r3, #8
 800804e:	f8c8 2000 	str.w	r2, [r8]
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800805a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800805e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008062:	9307      	str	r3, [sp, #28]
 8008064:	f8cd 8018 	str.w	r8, [sp, #24]
 8008068:	ee08 0a10 	vmov	s16, r0
 800806c:	4b9f      	ldr	r3, [pc, #636]	; (80082ec <_printf_float+0x2dc>)
 800806e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008072:	f04f 32ff 	mov.w	r2, #4294967295
 8008076:	f7f8 fd59 	bl	8000b2c <__aeabi_dcmpun>
 800807a:	bb88      	cbnz	r0, 80080e0 <_printf_float+0xd0>
 800807c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008080:	4b9a      	ldr	r3, [pc, #616]	; (80082ec <_printf_float+0x2dc>)
 8008082:	f04f 32ff 	mov.w	r2, #4294967295
 8008086:	f7f8 fd33 	bl	8000af0 <__aeabi_dcmple>
 800808a:	bb48      	cbnz	r0, 80080e0 <_printf_float+0xd0>
 800808c:	2200      	movs	r2, #0
 800808e:	2300      	movs	r3, #0
 8008090:	4640      	mov	r0, r8
 8008092:	4649      	mov	r1, r9
 8008094:	f7f8 fd22 	bl	8000adc <__aeabi_dcmplt>
 8008098:	b110      	cbz	r0, 80080a0 <_printf_float+0x90>
 800809a:	232d      	movs	r3, #45	; 0x2d
 800809c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a0:	4b93      	ldr	r3, [pc, #588]	; (80082f0 <_printf_float+0x2e0>)
 80080a2:	4894      	ldr	r0, [pc, #592]	; (80082f4 <_printf_float+0x2e4>)
 80080a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80080a8:	bf94      	ite	ls
 80080aa:	4698      	movls	r8, r3
 80080ac:	4680      	movhi	r8, r0
 80080ae:	2303      	movs	r3, #3
 80080b0:	6123      	str	r3, [r4, #16]
 80080b2:	9b05      	ldr	r3, [sp, #20]
 80080b4:	f023 0204 	bic.w	r2, r3, #4
 80080b8:	6022      	str	r2, [r4, #0]
 80080ba:	f04f 0900 	mov.w	r9, #0
 80080be:	9700      	str	r7, [sp, #0]
 80080c0:	4633      	mov	r3, r6
 80080c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80080c4:	4621      	mov	r1, r4
 80080c6:	4628      	mov	r0, r5
 80080c8:	f000 f9d8 	bl	800847c <_printf_common>
 80080cc:	3001      	adds	r0, #1
 80080ce:	f040 8090 	bne.w	80081f2 <_printf_float+0x1e2>
 80080d2:	f04f 30ff 	mov.w	r0, #4294967295
 80080d6:	b00d      	add	sp, #52	; 0x34
 80080d8:	ecbd 8b02 	vpop	{d8}
 80080dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e0:	4642      	mov	r2, r8
 80080e2:	464b      	mov	r3, r9
 80080e4:	4640      	mov	r0, r8
 80080e6:	4649      	mov	r1, r9
 80080e8:	f7f8 fd20 	bl	8000b2c <__aeabi_dcmpun>
 80080ec:	b140      	cbz	r0, 8008100 <_printf_float+0xf0>
 80080ee:	464b      	mov	r3, r9
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	bfbc      	itt	lt
 80080f4:	232d      	movlt	r3, #45	; 0x2d
 80080f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80080fa:	487f      	ldr	r0, [pc, #508]	; (80082f8 <_printf_float+0x2e8>)
 80080fc:	4b7f      	ldr	r3, [pc, #508]	; (80082fc <_printf_float+0x2ec>)
 80080fe:	e7d1      	b.n	80080a4 <_printf_float+0x94>
 8008100:	6863      	ldr	r3, [r4, #4]
 8008102:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008106:	9206      	str	r2, [sp, #24]
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	d13f      	bne.n	800818c <_printf_float+0x17c>
 800810c:	2306      	movs	r3, #6
 800810e:	6063      	str	r3, [r4, #4]
 8008110:	9b05      	ldr	r3, [sp, #20]
 8008112:	6861      	ldr	r1, [r4, #4]
 8008114:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008118:	2300      	movs	r3, #0
 800811a:	9303      	str	r3, [sp, #12]
 800811c:	ab0a      	add	r3, sp, #40	; 0x28
 800811e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008122:	ab09      	add	r3, sp, #36	; 0x24
 8008124:	ec49 8b10 	vmov	d0, r8, r9
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	6022      	str	r2, [r4, #0]
 800812c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008130:	4628      	mov	r0, r5
 8008132:	f7ff fecd 	bl	8007ed0 <__cvt>
 8008136:	9b06      	ldr	r3, [sp, #24]
 8008138:	9909      	ldr	r1, [sp, #36]	; 0x24
 800813a:	2b47      	cmp	r3, #71	; 0x47
 800813c:	4680      	mov	r8, r0
 800813e:	d108      	bne.n	8008152 <_printf_float+0x142>
 8008140:	1cc8      	adds	r0, r1, #3
 8008142:	db02      	blt.n	800814a <_printf_float+0x13a>
 8008144:	6863      	ldr	r3, [r4, #4]
 8008146:	4299      	cmp	r1, r3
 8008148:	dd41      	ble.n	80081ce <_printf_float+0x1be>
 800814a:	f1ab 0b02 	sub.w	fp, fp, #2
 800814e:	fa5f fb8b 	uxtb.w	fp, fp
 8008152:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008156:	d820      	bhi.n	800819a <_printf_float+0x18a>
 8008158:	3901      	subs	r1, #1
 800815a:	465a      	mov	r2, fp
 800815c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008160:	9109      	str	r1, [sp, #36]	; 0x24
 8008162:	f7ff ff17 	bl	8007f94 <__exponent>
 8008166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008168:	1813      	adds	r3, r2, r0
 800816a:	2a01      	cmp	r2, #1
 800816c:	4681      	mov	r9, r0
 800816e:	6123      	str	r3, [r4, #16]
 8008170:	dc02      	bgt.n	8008178 <_printf_float+0x168>
 8008172:	6822      	ldr	r2, [r4, #0]
 8008174:	07d2      	lsls	r2, r2, #31
 8008176:	d501      	bpl.n	800817c <_printf_float+0x16c>
 8008178:	3301      	adds	r3, #1
 800817a:	6123      	str	r3, [r4, #16]
 800817c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008180:	2b00      	cmp	r3, #0
 8008182:	d09c      	beq.n	80080be <_printf_float+0xae>
 8008184:	232d      	movs	r3, #45	; 0x2d
 8008186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800818a:	e798      	b.n	80080be <_printf_float+0xae>
 800818c:	9a06      	ldr	r2, [sp, #24]
 800818e:	2a47      	cmp	r2, #71	; 0x47
 8008190:	d1be      	bne.n	8008110 <_printf_float+0x100>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1bc      	bne.n	8008110 <_printf_float+0x100>
 8008196:	2301      	movs	r3, #1
 8008198:	e7b9      	b.n	800810e <_printf_float+0xfe>
 800819a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800819e:	d118      	bne.n	80081d2 <_printf_float+0x1c2>
 80081a0:	2900      	cmp	r1, #0
 80081a2:	6863      	ldr	r3, [r4, #4]
 80081a4:	dd0b      	ble.n	80081be <_printf_float+0x1ae>
 80081a6:	6121      	str	r1, [r4, #16]
 80081a8:	b913      	cbnz	r3, 80081b0 <_printf_float+0x1a0>
 80081aa:	6822      	ldr	r2, [r4, #0]
 80081ac:	07d0      	lsls	r0, r2, #31
 80081ae:	d502      	bpl.n	80081b6 <_printf_float+0x1a6>
 80081b0:	3301      	adds	r3, #1
 80081b2:	440b      	add	r3, r1
 80081b4:	6123      	str	r3, [r4, #16]
 80081b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80081b8:	f04f 0900 	mov.w	r9, #0
 80081bc:	e7de      	b.n	800817c <_printf_float+0x16c>
 80081be:	b913      	cbnz	r3, 80081c6 <_printf_float+0x1b6>
 80081c0:	6822      	ldr	r2, [r4, #0]
 80081c2:	07d2      	lsls	r2, r2, #31
 80081c4:	d501      	bpl.n	80081ca <_printf_float+0x1ba>
 80081c6:	3302      	adds	r3, #2
 80081c8:	e7f4      	b.n	80081b4 <_printf_float+0x1a4>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e7f2      	b.n	80081b4 <_printf_float+0x1a4>
 80081ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d4:	4299      	cmp	r1, r3
 80081d6:	db05      	blt.n	80081e4 <_printf_float+0x1d4>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	6121      	str	r1, [r4, #16]
 80081dc:	07d8      	lsls	r0, r3, #31
 80081de:	d5ea      	bpl.n	80081b6 <_printf_float+0x1a6>
 80081e0:	1c4b      	adds	r3, r1, #1
 80081e2:	e7e7      	b.n	80081b4 <_printf_float+0x1a4>
 80081e4:	2900      	cmp	r1, #0
 80081e6:	bfd4      	ite	le
 80081e8:	f1c1 0202 	rsble	r2, r1, #2
 80081ec:	2201      	movgt	r2, #1
 80081ee:	4413      	add	r3, r2
 80081f0:	e7e0      	b.n	80081b4 <_printf_float+0x1a4>
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	055a      	lsls	r2, r3, #21
 80081f6:	d407      	bmi.n	8008208 <_printf_float+0x1f8>
 80081f8:	6923      	ldr	r3, [r4, #16]
 80081fa:	4642      	mov	r2, r8
 80081fc:	4631      	mov	r1, r6
 80081fe:	4628      	mov	r0, r5
 8008200:	47b8      	blx	r7
 8008202:	3001      	adds	r0, #1
 8008204:	d12c      	bne.n	8008260 <_printf_float+0x250>
 8008206:	e764      	b.n	80080d2 <_printf_float+0xc2>
 8008208:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800820c:	f240 80e0 	bls.w	80083d0 <_printf_float+0x3c0>
 8008210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008214:	2200      	movs	r2, #0
 8008216:	2300      	movs	r3, #0
 8008218:	f7f8 fc56 	bl	8000ac8 <__aeabi_dcmpeq>
 800821c:	2800      	cmp	r0, #0
 800821e:	d034      	beq.n	800828a <_printf_float+0x27a>
 8008220:	4a37      	ldr	r2, [pc, #220]	; (8008300 <_printf_float+0x2f0>)
 8008222:	2301      	movs	r3, #1
 8008224:	4631      	mov	r1, r6
 8008226:	4628      	mov	r0, r5
 8008228:	47b8      	blx	r7
 800822a:	3001      	adds	r0, #1
 800822c:	f43f af51 	beq.w	80080d2 <_printf_float+0xc2>
 8008230:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008234:	429a      	cmp	r2, r3
 8008236:	db02      	blt.n	800823e <_printf_float+0x22e>
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	07d8      	lsls	r0, r3, #31
 800823c:	d510      	bpl.n	8008260 <_printf_float+0x250>
 800823e:	ee18 3a10 	vmov	r3, s16
 8008242:	4652      	mov	r2, sl
 8008244:	4631      	mov	r1, r6
 8008246:	4628      	mov	r0, r5
 8008248:	47b8      	blx	r7
 800824a:	3001      	adds	r0, #1
 800824c:	f43f af41 	beq.w	80080d2 <_printf_float+0xc2>
 8008250:	f04f 0800 	mov.w	r8, #0
 8008254:	f104 091a 	add.w	r9, r4, #26
 8008258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800825a:	3b01      	subs	r3, #1
 800825c:	4543      	cmp	r3, r8
 800825e:	dc09      	bgt.n	8008274 <_printf_float+0x264>
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	079b      	lsls	r3, r3, #30
 8008264:	f100 8105 	bmi.w	8008472 <_printf_float+0x462>
 8008268:	68e0      	ldr	r0, [r4, #12]
 800826a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800826c:	4298      	cmp	r0, r3
 800826e:	bfb8      	it	lt
 8008270:	4618      	movlt	r0, r3
 8008272:	e730      	b.n	80080d6 <_printf_float+0xc6>
 8008274:	2301      	movs	r3, #1
 8008276:	464a      	mov	r2, r9
 8008278:	4631      	mov	r1, r6
 800827a:	4628      	mov	r0, r5
 800827c:	47b8      	blx	r7
 800827e:	3001      	adds	r0, #1
 8008280:	f43f af27 	beq.w	80080d2 <_printf_float+0xc2>
 8008284:	f108 0801 	add.w	r8, r8, #1
 8008288:	e7e6      	b.n	8008258 <_printf_float+0x248>
 800828a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828c:	2b00      	cmp	r3, #0
 800828e:	dc39      	bgt.n	8008304 <_printf_float+0x2f4>
 8008290:	4a1b      	ldr	r2, [pc, #108]	; (8008300 <_printf_float+0x2f0>)
 8008292:	2301      	movs	r3, #1
 8008294:	4631      	mov	r1, r6
 8008296:	4628      	mov	r0, r5
 8008298:	47b8      	blx	r7
 800829a:	3001      	adds	r0, #1
 800829c:	f43f af19 	beq.w	80080d2 <_printf_float+0xc2>
 80082a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082a4:	4313      	orrs	r3, r2
 80082a6:	d102      	bne.n	80082ae <_printf_float+0x29e>
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	07d9      	lsls	r1, r3, #31
 80082ac:	d5d8      	bpl.n	8008260 <_printf_float+0x250>
 80082ae:	ee18 3a10 	vmov	r3, s16
 80082b2:	4652      	mov	r2, sl
 80082b4:	4631      	mov	r1, r6
 80082b6:	4628      	mov	r0, r5
 80082b8:	47b8      	blx	r7
 80082ba:	3001      	adds	r0, #1
 80082bc:	f43f af09 	beq.w	80080d2 <_printf_float+0xc2>
 80082c0:	f04f 0900 	mov.w	r9, #0
 80082c4:	f104 0a1a 	add.w	sl, r4, #26
 80082c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ca:	425b      	negs	r3, r3
 80082cc:	454b      	cmp	r3, r9
 80082ce:	dc01      	bgt.n	80082d4 <_printf_float+0x2c4>
 80082d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d2:	e792      	b.n	80081fa <_printf_float+0x1ea>
 80082d4:	2301      	movs	r3, #1
 80082d6:	4652      	mov	r2, sl
 80082d8:	4631      	mov	r1, r6
 80082da:	4628      	mov	r0, r5
 80082dc:	47b8      	blx	r7
 80082de:	3001      	adds	r0, #1
 80082e0:	f43f aef7 	beq.w	80080d2 <_printf_float+0xc2>
 80082e4:	f109 0901 	add.w	r9, r9, #1
 80082e8:	e7ee      	b.n	80082c8 <_printf_float+0x2b8>
 80082ea:	bf00      	nop
 80082ec:	7fefffff 	.word	0x7fefffff
 80082f0:	0800f6f8 	.word	0x0800f6f8
 80082f4:	0800f6fc 	.word	0x0800f6fc
 80082f8:	0800f704 	.word	0x0800f704
 80082fc:	0800f700 	.word	0x0800f700
 8008300:	0800f708 	.word	0x0800f708
 8008304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008306:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008308:	429a      	cmp	r2, r3
 800830a:	bfa8      	it	ge
 800830c:	461a      	movge	r2, r3
 800830e:	2a00      	cmp	r2, #0
 8008310:	4691      	mov	r9, r2
 8008312:	dc37      	bgt.n	8008384 <_printf_float+0x374>
 8008314:	f04f 0b00 	mov.w	fp, #0
 8008318:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800831c:	f104 021a 	add.w	r2, r4, #26
 8008320:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008322:	9305      	str	r3, [sp, #20]
 8008324:	eba3 0309 	sub.w	r3, r3, r9
 8008328:	455b      	cmp	r3, fp
 800832a:	dc33      	bgt.n	8008394 <_printf_float+0x384>
 800832c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008330:	429a      	cmp	r2, r3
 8008332:	db3b      	blt.n	80083ac <_printf_float+0x39c>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	07da      	lsls	r2, r3, #31
 8008338:	d438      	bmi.n	80083ac <_printf_float+0x39c>
 800833a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833c:	9b05      	ldr	r3, [sp, #20]
 800833e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	eba2 0901 	sub.w	r9, r2, r1
 8008346:	4599      	cmp	r9, r3
 8008348:	bfa8      	it	ge
 800834a:	4699      	movge	r9, r3
 800834c:	f1b9 0f00 	cmp.w	r9, #0
 8008350:	dc35      	bgt.n	80083be <_printf_float+0x3ae>
 8008352:	f04f 0800 	mov.w	r8, #0
 8008356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800835a:	f104 0a1a 	add.w	sl, r4, #26
 800835e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008362:	1a9b      	subs	r3, r3, r2
 8008364:	eba3 0309 	sub.w	r3, r3, r9
 8008368:	4543      	cmp	r3, r8
 800836a:	f77f af79 	ble.w	8008260 <_printf_float+0x250>
 800836e:	2301      	movs	r3, #1
 8008370:	4652      	mov	r2, sl
 8008372:	4631      	mov	r1, r6
 8008374:	4628      	mov	r0, r5
 8008376:	47b8      	blx	r7
 8008378:	3001      	adds	r0, #1
 800837a:	f43f aeaa 	beq.w	80080d2 <_printf_float+0xc2>
 800837e:	f108 0801 	add.w	r8, r8, #1
 8008382:	e7ec      	b.n	800835e <_printf_float+0x34e>
 8008384:	4613      	mov	r3, r2
 8008386:	4631      	mov	r1, r6
 8008388:	4642      	mov	r2, r8
 800838a:	4628      	mov	r0, r5
 800838c:	47b8      	blx	r7
 800838e:	3001      	adds	r0, #1
 8008390:	d1c0      	bne.n	8008314 <_printf_float+0x304>
 8008392:	e69e      	b.n	80080d2 <_printf_float+0xc2>
 8008394:	2301      	movs	r3, #1
 8008396:	4631      	mov	r1, r6
 8008398:	4628      	mov	r0, r5
 800839a:	9205      	str	r2, [sp, #20]
 800839c:	47b8      	blx	r7
 800839e:	3001      	adds	r0, #1
 80083a0:	f43f ae97 	beq.w	80080d2 <_printf_float+0xc2>
 80083a4:	9a05      	ldr	r2, [sp, #20]
 80083a6:	f10b 0b01 	add.w	fp, fp, #1
 80083aa:	e7b9      	b.n	8008320 <_printf_float+0x310>
 80083ac:	ee18 3a10 	vmov	r3, s16
 80083b0:	4652      	mov	r2, sl
 80083b2:	4631      	mov	r1, r6
 80083b4:	4628      	mov	r0, r5
 80083b6:	47b8      	blx	r7
 80083b8:	3001      	adds	r0, #1
 80083ba:	d1be      	bne.n	800833a <_printf_float+0x32a>
 80083bc:	e689      	b.n	80080d2 <_printf_float+0xc2>
 80083be:	9a05      	ldr	r2, [sp, #20]
 80083c0:	464b      	mov	r3, r9
 80083c2:	4442      	add	r2, r8
 80083c4:	4631      	mov	r1, r6
 80083c6:	4628      	mov	r0, r5
 80083c8:	47b8      	blx	r7
 80083ca:	3001      	adds	r0, #1
 80083cc:	d1c1      	bne.n	8008352 <_printf_float+0x342>
 80083ce:	e680      	b.n	80080d2 <_printf_float+0xc2>
 80083d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083d2:	2a01      	cmp	r2, #1
 80083d4:	dc01      	bgt.n	80083da <_printf_float+0x3ca>
 80083d6:	07db      	lsls	r3, r3, #31
 80083d8:	d538      	bpl.n	800844c <_printf_float+0x43c>
 80083da:	2301      	movs	r3, #1
 80083dc:	4642      	mov	r2, r8
 80083de:	4631      	mov	r1, r6
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b8      	blx	r7
 80083e4:	3001      	adds	r0, #1
 80083e6:	f43f ae74 	beq.w	80080d2 <_printf_float+0xc2>
 80083ea:	ee18 3a10 	vmov	r3, s16
 80083ee:	4652      	mov	r2, sl
 80083f0:	4631      	mov	r1, r6
 80083f2:	4628      	mov	r0, r5
 80083f4:	47b8      	blx	r7
 80083f6:	3001      	adds	r0, #1
 80083f8:	f43f ae6b 	beq.w	80080d2 <_printf_float+0xc2>
 80083fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008400:	2200      	movs	r2, #0
 8008402:	2300      	movs	r3, #0
 8008404:	f7f8 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 8008408:	b9d8      	cbnz	r0, 8008442 <_printf_float+0x432>
 800840a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800840c:	f108 0201 	add.w	r2, r8, #1
 8008410:	3b01      	subs	r3, #1
 8008412:	4631      	mov	r1, r6
 8008414:	4628      	mov	r0, r5
 8008416:	47b8      	blx	r7
 8008418:	3001      	adds	r0, #1
 800841a:	d10e      	bne.n	800843a <_printf_float+0x42a>
 800841c:	e659      	b.n	80080d2 <_printf_float+0xc2>
 800841e:	2301      	movs	r3, #1
 8008420:	4652      	mov	r2, sl
 8008422:	4631      	mov	r1, r6
 8008424:	4628      	mov	r0, r5
 8008426:	47b8      	blx	r7
 8008428:	3001      	adds	r0, #1
 800842a:	f43f ae52 	beq.w	80080d2 <_printf_float+0xc2>
 800842e:	f108 0801 	add.w	r8, r8, #1
 8008432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008434:	3b01      	subs	r3, #1
 8008436:	4543      	cmp	r3, r8
 8008438:	dcf1      	bgt.n	800841e <_printf_float+0x40e>
 800843a:	464b      	mov	r3, r9
 800843c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008440:	e6dc      	b.n	80081fc <_printf_float+0x1ec>
 8008442:	f04f 0800 	mov.w	r8, #0
 8008446:	f104 0a1a 	add.w	sl, r4, #26
 800844a:	e7f2      	b.n	8008432 <_printf_float+0x422>
 800844c:	2301      	movs	r3, #1
 800844e:	4642      	mov	r2, r8
 8008450:	e7df      	b.n	8008412 <_printf_float+0x402>
 8008452:	2301      	movs	r3, #1
 8008454:	464a      	mov	r2, r9
 8008456:	4631      	mov	r1, r6
 8008458:	4628      	mov	r0, r5
 800845a:	47b8      	blx	r7
 800845c:	3001      	adds	r0, #1
 800845e:	f43f ae38 	beq.w	80080d2 <_printf_float+0xc2>
 8008462:	f108 0801 	add.w	r8, r8, #1
 8008466:	68e3      	ldr	r3, [r4, #12]
 8008468:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800846a:	1a5b      	subs	r3, r3, r1
 800846c:	4543      	cmp	r3, r8
 800846e:	dcf0      	bgt.n	8008452 <_printf_float+0x442>
 8008470:	e6fa      	b.n	8008268 <_printf_float+0x258>
 8008472:	f04f 0800 	mov.w	r8, #0
 8008476:	f104 0919 	add.w	r9, r4, #25
 800847a:	e7f4      	b.n	8008466 <_printf_float+0x456>

0800847c <_printf_common>:
 800847c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008480:	4616      	mov	r6, r2
 8008482:	4699      	mov	r9, r3
 8008484:	688a      	ldr	r2, [r1, #8]
 8008486:	690b      	ldr	r3, [r1, #16]
 8008488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800848c:	4293      	cmp	r3, r2
 800848e:	bfb8      	it	lt
 8008490:	4613      	movlt	r3, r2
 8008492:	6033      	str	r3, [r6, #0]
 8008494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008498:	4607      	mov	r7, r0
 800849a:	460c      	mov	r4, r1
 800849c:	b10a      	cbz	r2, 80084a2 <_printf_common+0x26>
 800849e:	3301      	adds	r3, #1
 80084a0:	6033      	str	r3, [r6, #0]
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	0699      	lsls	r1, r3, #26
 80084a6:	bf42      	ittt	mi
 80084a8:	6833      	ldrmi	r3, [r6, #0]
 80084aa:	3302      	addmi	r3, #2
 80084ac:	6033      	strmi	r3, [r6, #0]
 80084ae:	6825      	ldr	r5, [r4, #0]
 80084b0:	f015 0506 	ands.w	r5, r5, #6
 80084b4:	d106      	bne.n	80084c4 <_printf_common+0x48>
 80084b6:	f104 0a19 	add.w	sl, r4, #25
 80084ba:	68e3      	ldr	r3, [r4, #12]
 80084bc:	6832      	ldr	r2, [r6, #0]
 80084be:	1a9b      	subs	r3, r3, r2
 80084c0:	42ab      	cmp	r3, r5
 80084c2:	dc26      	bgt.n	8008512 <_printf_common+0x96>
 80084c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084c8:	1e13      	subs	r3, r2, #0
 80084ca:	6822      	ldr	r2, [r4, #0]
 80084cc:	bf18      	it	ne
 80084ce:	2301      	movne	r3, #1
 80084d0:	0692      	lsls	r2, r2, #26
 80084d2:	d42b      	bmi.n	800852c <_printf_common+0xb0>
 80084d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084d8:	4649      	mov	r1, r9
 80084da:	4638      	mov	r0, r7
 80084dc:	47c0      	blx	r8
 80084de:	3001      	adds	r0, #1
 80084e0:	d01e      	beq.n	8008520 <_printf_common+0xa4>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	68e5      	ldr	r5, [r4, #12]
 80084e6:	6832      	ldr	r2, [r6, #0]
 80084e8:	f003 0306 	and.w	r3, r3, #6
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	bf08      	it	eq
 80084f0:	1aad      	subeq	r5, r5, r2
 80084f2:	68a3      	ldr	r3, [r4, #8]
 80084f4:	6922      	ldr	r2, [r4, #16]
 80084f6:	bf0c      	ite	eq
 80084f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084fc:	2500      	movne	r5, #0
 80084fe:	4293      	cmp	r3, r2
 8008500:	bfc4      	itt	gt
 8008502:	1a9b      	subgt	r3, r3, r2
 8008504:	18ed      	addgt	r5, r5, r3
 8008506:	2600      	movs	r6, #0
 8008508:	341a      	adds	r4, #26
 800850a:	42b5      	cmp	r5, r6
 800850c:	d11a      	bne.n	8008544 <_printf_common+0xc8>
 800850e:	2000      	movs	r0, #0
 8008510:	e008      	b.n	8008524 <_printf_common+0xa8>
 8008512:	2301      	movs	r3, #1
 8008514:	4652      	mov	r2, sl
 8008516:	4649      	mov	r1, r9
 8008518:	4638      	mov	r0, r7
 800851a:	47c0      	blx	r8
 800851c:	3001      	adds	r0, #1
 800851e:	d103      	bne.n	8008528 <_printf_common+0xac>
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008528:	3501      	adds	r5, #1
 800852a:	e7c6      	b.n	80084ba <_printf_common+0x3e>
 800852c:	18e1      	adds	r1, r4, r3
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	2030      	movs	r0, #48	; 0x30
 8008532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008536:	4422      	add	r2, r4
 8008538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800853c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008540:	3302      	adds	r3, #2
 8008542:	e7c7      	b.n	80084d4 <_printf_common+0x58>
 8008544:	2301      	movs	r3, #1
 8008546:	4622      	mov	r2, r4
 8008548:	4649      	mov	r1, r9
 800854a:	4638      	mov	r0, r7
 800854c:	47c0      	blx	r8
 800854e:	3001      	adds	r0, #1
 8008550:	d0e6      	beq.n	8008520 <_printf_common+0xa4>
 8008552:	3601      	adds	r6, #1
 8008554:	e7d9      	b.n	800850a <_printf_common+0x8e>
	...

08008558 <_printf_i>:
 8008558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800855c:	460c      	mov	r4, r1
 800855e:	4691      	mov	r9, r2
 8008560:	7e27      	ldrb	r7, [r4, #24]
 8008562:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008564:	2f78      	cmp	r7, #120	; 0x78
 8008566:	4680      	mov	r8, r0
 8008568:	469a      	mov	sl, r3
 800856a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800856e:	d807      	bhi.n	8008580 <_printf_i+0x28>
 8008570:	2f62      	cmp	r7, #98	; 0x62
 8008572:	d80a      	bhi.n	800858a <_printf_i+0x32>
 8008574:	2f00      	cmp	r7, #0
 8008576:	f000 80d8 	beq.w	800872a <_printf_i+0x1d2>
 800857a:	2f58      	cmp	r7, #88	; 0x58
 800857c:	f000 80a3 	beq.w	80086c6 <_printf_i+0x16e>
 8008580:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008588:	e03a      	b.n	8008600 <_printf_i+0xa8>
 800858a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800858e:	2b15      	cmp	r3, #21
 8008590:	d8f6      	bhi.n	8008580 <_printf_i+0x28>
 8008592:	a001      	add	r0, pc, #4	; (adr r0, 8008598 <_printf_i+0x40>)
 8008594:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008598:	080085f1 	.word	0x080085f1
 800859c:	08008605 	.word	0x08008605
 80085a0:	08008581 	.word	0x08008581
 80085a4:	08008581 	.word	0x08008581
 80085a8:	08008581 	.word	0x08008581
 80085ac:	08008581 	.word	0x08008581
 80085b0:	08008605 	.word	0x08008605
 80085b4:	08008581 	.word	0x08008581
 80085b8:	08008581 	.word	0x08008581
 80085bc:	08008581 	.word	0x08008581
 80085c0:	08008581 	.word	0x08008581
 80085c4:	08008711 	.word	0x08008711
 80085c8:	08008635 	.word	0x08008635
 80085cc:	080086f3 	.word	0x080086f3
 80085d0:	08008581 	.word	0x08008581
 80085d4:	08008581 	.word	0x08008581
 80085d8:	08008733 	.word	0x08008733
 80085dc:	08008581 	.word	0x08008581
 80085e0:	08008635 	.word	0x08008635
 80085e4:	08008581 	.word	0x08008581
 80085e8:	08008581 	.word	0x08008581
 80085ec:	080086fb 	.word	0x080086fb
 80085f0:	680b      	ldr	r3, [r1, #0]
 80085f2:	1d1a      	adds	r2, r3, #4
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	600a      	str	r2, [r1, #0]
 80085f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008600:	2301      	movs	r3, #1
 8008602:	e0a3      	b.n	800874c <_printf_i+0x1f4>
 8008604:	6825      	ldr	r5, [r4, #0]
 8008606:	6808      	ldr	r0, [r1, #0]
 8008608:	062e      	lsls	r6, r5, #24
 800860a:	f100 0304 	add.w	r3, r0, #4
 800860e:	d50a      	bpl.n	8008626 <_printf_i+0xce>
 8008610:	6805      	ldr	r5, [r0, #0]
 8008612:	600b      	str	r3, [r1, #0]
 8008614:	2d00      	cmp	r5, #0
 8008616:	da03      	bge.n	8008620 <_printf_i+0xc8>
 8008618:	232d      	movs	r3, #45	; 0x2d
 800861a:	426d      	negs	r5, r5
 800861c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008620:	485e      	ldr	r0, [pc, #376]	; (800879c <_printf_i+0x244>)
 8008622:	230a      	movs	r3, #10
 8008624:	e019      	b.n	800865a <_printf_i+0x102>
 8008626:	f015 0f40 	tst.w	r5, #64	; 0x40
 800862a:	6805      	ldr	r5, [r0, #0]
 800862c:	600b      	str	r3, [r1, #0]
 800862e:	bf18      	it	ne
 8008630:	b22d      	sxthne	r5, r5
 8008632:	e7ef      	b.n	8008614 <_printf_i+0xbc>
 8008634:	680b      	ldr	r3, [r1, #0]
 8008636:	6825      	ldr	r5, [r4, #0]
 8008638:	1d18      	adds	r0, r3, #4
 800863a:	6008      	str	r0, [r1, #0]
 800863c:	0628      	lsls	r0, r5, #24
 800863e:	d501      	bpl.n	8008644 <_printf_i+0xec>
 8008640:	681d      	ldr	r5, [r3, #0]
 8008642:	e002      	b.n	800864a <_printf_i+0xf2>
 8008644:	0669      	lsls	r1, r5, #25
 8008646:	d5fb      	bpl.n	8008640 <_printf_i+0xe8>
 8008648:	881d      	ldrh	r5, [r3, #0]
 800864a:	4854      	ldr	r0, [pc, #336]	; (800879c <_printf_i+0x244>)
 800864c:	2f6f      	cmp	r7, #111	; 0x6f
 800864e:	bf0c      	ite	eq
 8008650:	2308      	moveq	r3, #8
 8008652:	230a      	movne	r3, #10
 8008654:	2100      	movs	r1, #0
 8008656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800865a:	6866      	ldr	r6, [r4, #4]
 800865c:	60a6      	str	r6, [r4, #8]
 800865e:	2e00      	cmp	r6, #0
 8008660:	bfa2      	ittt	ge
 8008662:	6821      	ldrge	r1, [r4, #0]
 8008664:	f021 0104 	bicge.w	r1, r1, #4
 8008668:	6021      	strge	r1, [r4, #0]
 800866a:	b90d      	cbnz	r5, 8008670 <_printf_i+0x118>
 800866c:	2e00      	cmp	r6, #0
 800866e:	d04d      	beq.n	800870c <_printf_i+0x1b4>
 8008670:	4616      	mov	r6, r2
 8008672:	fbb5 f1f3 	udiv	r1, r5, r3
 8008676:	fb03 5711 	mls	r7, r3, r1, r5
 800867a:	5dc7      	ldrb	r7, [r0, r7]
 800867c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008680:	462f      	mov	r7, r5
 8008682:	42bb      	cmp	r3, r7
 8008684:	460d      	mov	r5, r1
 8008686:	d9f4      	bls.n	8008672 <_printf_i+0x11a>
 8008688:	2b08      	cmp	r3, #8
 800868a:	d10b      	bne.n	80086a4 <_printf_i+0x14c>
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	07df      	lsls	r7, r3, #31
 8008690:	d508      	bpl.n	80086a4 <_printf_i+0x14c>
 8008692:	6923      	ldr	r3, [r4, #16]
 8008694:	6861      	ldr	r1, [r4, #4]
 8008696:	4299      	cmp	r1, r3
 8008698:	bfde      	ittt	le
 800869a:	2330      	movle	r3, #48	; 0x30
 800869c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086a4:	1b92      	subs	r2, r2, r6
 80086a6:	6122      	str	r2, [r4, #16]
 80086a8:	f8cd a000 	str.w	sl, [sp]
 80086ac:	464b      	mov	r3, r9
 80086ae:	aa03      	add	r2, sp, #12
 80086b0:	4621      	mov	r1, r4
 80086b2:	4640      	mov	r0, r8
 80086b4:	f7ff fee2 	bl	800847c <_printf_common>
 80086b8:	3001      	adds	r0, #1
 80086ba:	d14c      	bne.n	8008756 <_printf_i+0x1fe>
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295
 80086c0:	b004      	add	sp, #16
 80086c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c6:	4835      	ldr	r0, [pc, #212]	; (800879c <_printf_i+0x244>)
 80086c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	680e      	ldr	r6, [r1, #0]
 80086d0:	061f      	lsls	r7, r3, #24
 80086d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80086d6:	600e      	str	r6, [r1, #0]
 80086d8:	d514      	bpl.n	8008704 <_printf_i+0x1ac>
 80086da:	07d9      	lsls	r1, r3, #31
 80086dc:	bf44      	itt	mi
 80086de:	f043 0320 	orrmi.w	r3, r3, #32
 80086e2:	6023      	strmi	r3, [r4, #0]
 80086e4:	b91d      	cbnz	r5, 80086ee <_printf_i+0x196>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	f023 0320 	bic.w	r3, r3, #32
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	2310      	movs	r3, #16
 80086f0:	e7b0      	b.n	8008654 <_printf_i+0xfc>
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	f043 0320 	orr.w	r3, r3, #32
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	2378      	movs	r3, #120	; 0x78
 80086fc:	4828      	ldr	r0, [pc, #160]	; (80087a0 <_printf_i+0x248>)
 80086fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008702:	e7e3      	b.n	80086cc <_printf_i+0x174>
 8008704:	065e      	lsls	r6, r3, #25
 8008706:	bf48      	it	mi
 8008708:	b2ad      	uxthmi	r5, r5
 800870a:	e7e6      	b.n	80086da <_printf_i+0x182>
 800870c:	4616      	mov	r6, r2
 800870e:	e7bb      	b.n	8008688 <_printf_i+0x130>
 8008710:	680b      	ldr	r3, [r1, #0]
 8008712:	6826      	ldr	r6, [r4, #0]
 8008714:	6960      	ldr	r0, [r4, #20]
 8008716:	1d1d      	adds	r5, r3, #4
 8008718:	600d      	str	r5, [r1, #0]
 800871a:	0635      	lsls	r5, r6, #24
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	d501      	bpl.n	8008724 <_printf_i+0x1cc>
 8008720:	6018      	str	r0, [r3, #0]
 8008722:	e002      	b.n	800872a <_printf_i+0x1d2>
 8008724:	0671      	lsls	r1, r6, #25
 8008726:	d5fb      	bpl.n	8008720 <_printf_i+0x1c8>
 8008728:	8018      	strh	r0, [r3, #0]
 800872a:	2300      	movs	r3, #0
 800872c:	6123      	str	r3, [r4, #16]
 800872e:	4616      	mov	r6, r2
 8008730:	e7ba      	b.n	80086a8 <_printf_i+0x150>
 8008732:	680b      	ldr	r3, [r1, #0]
 8008734:	1d1a      	adds	r2, r3, #4
 8008736:	600a      	str	r2, [r1, #0]
 8008738:	681e      	ldr	r6, [r3, #0]
 800873a:	6862      	ldr	r2, [r4, #4]
 800873c:	2100      	movs	r1, #0
 800873e:	4630      	mov	r0, r6
 8008740:	f7f7 fd4e 	bl	80001e0 <memchr>
 8008744:	b108      	cbz	r0, 800874a <_printf_i+0x1f2>
 8008746:	1b80      	subs	r0, r0, r6
 8008748:	6060      	str	r0, [r4, #4]
 800874a:	6863      	ldr	r3, [r4, #4]
 800874c:	6123      	str	r3, [r4, #16]
 800874e:	2300      	movs	r3, #0
 8008750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008754:	e7a8      	b.n	80086a8 <_printf_i+0x150>
 8008756:	6923      	ldr	r3, [r4, #16]
 8008758:	4632      	mov	r2, r6
 800875a:	4649      	mov	r1, r9
 800875c:	4640      	mov	r0, r8
 800875e:	47d0      	blx	sl
 8008760:	3001      	adds	r0, #1
 8008762:	d0ab      	beq.n	80086bc <_printf_i+0x164>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	079b      	lsls	r3, r3, #30
 8008768:	d413      	bmi.n	8008792 <_printf_i+0x23a>
 800876a:	68e0      	ldr	r0, [r4, #12]
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	4298      	cmp	r0, r3
 8008770:	bfb8      	it	lt
 8008772:	4618      	movlt	r0, r3
 8008774:	e7a4      	b.n	80086c0 <_printf_i+0x168>
 8008776:	2301      	movs	r3, #1
 8008778:	4632      	mov	r2, r6
 800877a:	4649      	mov	r1, r9
 800877c:	4640      	mov	r0, r8
 800877e:	47d0      	blx	sl
 8008780:	3001      	adds	r0, #1
 8008782:	d09b      	beq.n	80086bc <_printf_i+0x164>
 8008784:	3501      	adds	r5, #1
 8008786:	68e3      	ldr	r3, [r4, #12]
 8008788:	9903      	ldr	r1, [sp, #12]
 800878a:	1a5b      	subs	r3, r3, r1
 800878c:	42ab      	cmp	r3, r5
 800878e:	dcf2      	bgt.n	8008776 <_printf_i+0x21e>
 8008790:	e7eb      	b.n	800876a <_printf_i+0x212>
 8008792:	2500      	movs	r5, #0
 8008794:	f104 0619 	add.w	r6, r4, #25
 8008798:	e7f5      	b.n	8008786 <_printf_i+0x22e>
 800879a:	bf00      	nop
 800879c:	0800f70a 	.word	0x0800f70a
 80087a0:	0800f71b 	.word	0x0800f71b

080087a4 <_scanf_float>:
 80087a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a8:	b087      	sub	sp, #28
 80087aa:	4617      	mov	r7, r2
 80087ac:	9303      	str	r3, [sp, #12]
 80087ae:	688b      	ldr	r3, [r1, #8]
 80087b0:	1e5a      	subs	r2, r3, #1
 80087b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80087b6:	bf83      	ittte	hi
 80087b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80087bc:	195b      	addhi	r3, r3, r5
 80087be:	9302      	strhi	r3, [sp, #8]
 80087c0:	2300      	movls	r3, #0
 80087c2:	bf86      	itte	hi
 80087c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80087c8:	608b      	strhi	r3, [r1, #8]
 80087ca:	9302      	strls	r3, [sp, #8]
 80087cc:	680b      	ldr	r3, [r1, #0]
 80087ce:	468b      	mov	fp, r1
 80087d0:	2500      	movs	r5, #0
 80087d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80087d6:	f84b 3b1c 	str.w	r3, [fp], #28
 80087da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80087de:	4680      	mov	r8, r0
 80087e0:	460c      	mov	r4, r1
 80087e2:	465e      	mov	r6, fp
 80087e4:	46aa      	mov	sl, r5
 80087e6:	46a9      	mov	r9, r5
 80087e8:	9501      	str	r5, [sp, #4]
 80087ea:	68a2      	ldr	r2, [r4, #8]
 80087ec:	b152      	cbz	r2, 8008804 <_scanf_float+0x60>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	2b4e      	cmp	r3, #78	; 0x4e
 80087f4:	d864      	bhi.n	80088c0 <_scanf_float+0x11c>
 80087f6:	2b40      	cmp	r3, #64	; 0x40
 80087f8:	d83c      	bhi.n	8008874 <_scanf_float+0xd0>
 80087fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80087fe:	b2c8      	uxtb	r0, r1
 8008800:	280e      	cmp	r0, #14
 8008802:	d93a      	bls.n	800887a <_scanf_float+0xd6>
 8008804:	f1b9 0f00 	cmp.w	r9, #0
 8008808:	d003      	beq.n	8008812 <_scanf_float+0x6e>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008816:	f1ba 0f01 	cmp.w	sl, #1
 800881a:	f200 8113 	bhi.w	8008a44 <_scanf_float+0x2a0>
 800881e:	455e      	cmp	r6, fp
 8008820:	f200 8105 	bhi.w	8008a2e <_scanf_float+0x28a>
 8008824:	2501      	movs	r5, #1
 8008826:	4628      	mov	r0, r5
 8008828:	b007      	add	sp, #28
 800882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008832:	2a0d      	cmp	r2, #13
 8008834:	d8e6      	bhi.n	8008804 <_scanf_float+0x60>
 8008836:	a101      	add	r1, pc, #4	; (adr r1, 800883c <_scanf_float+0x98>)
 8008838:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800883c:	0800897b 	.word	0x0800897b
 8008840:	08008805 	.word	0x08008805
 8008844:	08008805 	.word	0x08008805
 8008848:	08008805 	.word	0x08008805
 800884c:	080089db 	.word	0x080089db
 8008850:	080089b3 	.word	0x080089b3
 8008854:	08008805 	.word	0x08008805
 8008858:	08008805 	.word	0x08008805
 800885c:	08008989 	.word	0x08008989
 8008860:	08008805 	.word	0x08008805
 8008864:	08008805 	.word	0x08008805
 8008868:	08008805 	.word	0x08008805
 800886c:	08008805 	.word	0x08008805
 8008870:	08008941 	.word	0x08008941
 8008874:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008878:	e7db      	b.n	8008832 <_scanf_float+0x8e>
 800887a:	290e      	cmp	r1, #14
 800887c:	d8c2      	bhi.n	8008804 <_scanf_float+0x60>
 800887e:	a001      	add	r0, pc, #4	; (adr r0, 8008884 <_scanf_float+0xe0>)
 8008880:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008884:	08008933 	.word	0x08008933
 8008888:	08008805 	.word	0x08008805
 800888c:	08008933 	.word	0x08008933
 8008890:	080089c7 	.word	0x080089c7
 8008894:	08008805 	.word	0x08008805
 8008898:	080088e1 	.word	0x080088e1
 800889c:	0800891d 	.word	0x0800891d
 80088a0:	0800891d 	.word	0x0800891d
 80088a4:	0800891d 	.word	0x0800891d
 80088a8:	0800891d 	.word	0x0800891d
 80088ac:	0800891d 	.word	0x0800891d
 80088b0:	0800891d 	.word	0x0800891d
 80088b4:	0800891d 	.word	0x0800891d
 80088b8:	0800891d 	.word	0x0800891d
 80088bc:	0800891d 	.word	0x0800891d
 80088c0:	2b6e      	cmp	r3, #110	; 0x6e
 80088c2:	d809      	bhi.n	80088d8 <_scanf_float+0x134>
 80088c4:	2b60      	cmp	r3, #96	; 0x60
 80088c6:	d8b2      	bhi.n	800882e <_scanf_float+0x8a>
 80088c8:	2b54      	cmp	r3, #84	; 0x54
 80088ca:	d077      	beq.n	80089bc <_scanf_float+0x218>
 80088cc:	2b59      	cmp	r3, #89	; 0x59
 80088ce:	d199      	bne.n	8008804 <_scanf_float+0x60>
 80088d0:	2d07      	cmp	r5, #7
 80088d2:	d197      	bne.n	8008804 <_scanf_float+0x60>
 80088d4:	2508      	movs	r5, #8
 80088d6:	e029      	b.n	800892c <_scanf_float+0x188>
 80088d8:	2b74      	cmp	r3, #116	; 0x74
 80088da:	d06f      	beq.n	80089bc <_scanf_float+0x218>
 80088dc:	2b79      	cmp	r3, #121	; 0x79
 80088de:	e7f6      	b.n	80088ce <_scanf_float+0x12a>
 80088e0:	6821      	ldr	r1, [r4, #0]
 80088e2:	05c8      	lsls	r0, r1, #23
 80088e4:	d51a      	bpl.n	800891c <_scanf_float+0x178>
 80088e6:	9b02      	ldr	r3, [sp, #8]
 80088e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80088ec:	6021      	str	r1, [r4, #0]
 80088ee:	f109 0901 	add.w	r9, r9, #1
 80088f2:	b11b      	cbz	r3, 80088fc <_scanf_float+0x158>
 80088f4:	3b01      	subs	r3, #1
 80088f6:	3201      	adds	r2, #1
 80088f8:	9302      	str	r3, [sp, #8]
 80088fa:	60a2      	str	r2, [r4, #8]
 80088fc:	68a3      	ldr	r3, [r4, #8]
 80088fe:	3b01      	subs	r3, #1
 8008900:	60a3      	str	r3, [r4, #8]
 8008902:	6923      	ldr	r3, [r4, #16]
 8008904:	3301      	adds	r3, #1
 8008906:	6123      	str	r3, [r4, #16]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3b01      	subs	r3, #1
 800890c:	2b00      	cmp	r3, #0
 800890e:	607b      	str	r3, [r7, #4]
 8008910:	f340 8084 	ble.w	8008a1c <_scanf_float+0x278>
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	3301      	adds	r3, #1
 8008918:	603b      	str	r3, [r7, #0]
 800891a:	e766      	b.n	80087ea <_scanf_float+0x46>
 800891c:	eb1a 0f05 	cmn.w	sl, r5
 8008920:	f47f af70 	bne.w	8008804 <_scanf_float+0x60>
 8008924:	6822      	ldr	r2, [r4, #0]
 8008926:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800892a:	6022      	str	r2, [r4, #0]
 800892c:	f806 3b01 	strb.w	r3, [r6], #1
 8008930:	e7e4      	b.n	80088fc <_scanf_float+0x158>
 8008932:	6822      	ldr	r2, [r4, #0]
 8008934:	0610      	lsls	r0, r2, #24
 8008936:	f57f af65 	bpl.w	8008804 <_scanf_float+0x60>
 800893a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800893e:	e7f4      	b.n	800892a <_scanf_float+0x186>
 8008940:	f1ba 0f00 	cmp.w	sl, #0
 8008944:	d10e      	bne.n	8008964 <_scanf_float+0x1c0>
 8008946:	f1b9 0f00 	cmp.w	r9, #0
 800894a:	d10e      	bne.n	800896a <_scanf_float+0x1c6>
 800894c:	6822      	ldr	r2, [r4, #0]
 800894e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008952:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008956:	d108      	bne.n	800896a <_scanf_float+0x1c6>
 8008958:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800895c:	6022      	str	r2, [r4, #0]
 800895e:	f04f 0a01 	mov.w	sl, #1
 8008962:	e7e3      	b.n	800892c <_scanf_float+0x188>
 8008964:	f1ba 0f02 	cmp.w	sl, #2
 8008968:	d055      	beq.n	8008a16 <_scanf_float+0x272>
 800896a:	2d01      	cmp	r5, #1
 800896c:	d002      	beq.n	8008974 <_scanf_float+0x1d0>
 800896e:	2d04      	cmp	r5, #4
 8008970:	f47f af48 	bne.w	8008804 <_scanf_float+0x60>
 8008974:	3501      	adds	r5, #1
 8008976:	b2ed      	uxtb	r5, r5
 8008978:	e7d8      	b.n	800892c <_scanf_float+0x188>
 800897a:	f1ba 0f01 	cmp.w	sl, #1
 800897e:	f47f af41 	bne.w	8008804 <_scanf_float+0x60>
 8008982:	f04f 0a02 	mov.w	sl, #2
 8008986:	e7d1      	b.n	800892c <_scanf_float+0x188>
 8008988:	b97d      	cbnz	r5, 80089aa <_scanf_float+0x206>
 800898a:	f1b9 0f00 	cmp.w	r9, #0
 800898e:	f47f af3c 	bne.w	800880a <_scanf_float+0x66>
 8008992:	6822      	ldr	r2, [r4, #0]
 8008994:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008998:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800899c:	f47f af39 	bne.w	8008812 <_scanf_float+0x6e>
 80089a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089a4:	6022      	str	r2, [r4, #0]
 80089a6:	2501      	movs	r5, #1
 80089a8:	e7c0      	b.n	800892c <_scanf_float+0x188>
 80089aa:	2d03      	cmp	r5, #3
 80089ac:	d0e2      	beq.n	8008974 <_scanf_float+0x1d0>
 80089ae:	2d05      	cmp	r5, #5
 80089b0:	e7de      	b.n	8008970 <_scanf_float+0x1cc>
 80089b2:	2d02      	cmp	r5, #2
 80089b4:	f47f af26 	bne.w	8008804 <_scanf_float+0x60>
 80089b8:	2503      	movs	r5, #3
 80089ba:	e7b7      	b.n	800892c <_scanf_float+0x188>
 80089bc:	2d06      	cmp	r5, #6
 80089be:	f47f af21 	bne.w	8008804 <_scanf_float+0x60>
 80089c2:	2507      	movs	r5, #7
 80089c4:	e7b2      	b.n	800892c <_scanf_float+0x188>
 80089c6:	6822      	ldr	r2, [r4, #0]
 80089c8:	0591      	lsls	r1, r2, #22
 80089ca:	f57f af1b 	bpl.w	8008804 <_scanf_float+0x60>
 80089ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80089d2:	6022      	str	r2, [r4, #0]
 80089d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80089d8:	e7a8      	b.n	800892c <_scanf_float+0x188>
 80089da:	6822      	ldr	r2, [r4, #0]
 80089dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80089e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80089e4:	d006      	beq.n	80089f4 <_scanf_float+0x250>
 80089e6:	0550      	lsls	r0, r2, #21
 80089e8:	f57f af0c 	bpl.w	8008804 <_scanf_float+0x60>
 80089ec:	f1b9 0f00 	cmp.w	r9, #0
 80089f0:	f43f af0f 	beq.w	8008812 <_scanf_float+0x6e>
 80089f4:	0591      	lsls	r1, r2, #22
 80089f6:	bf58      	it	pl
 80089f8:	9901      	ldrpl	r1, [sp, #4]
 80089fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089fe:	bf58      	it	pl
 8008a00:	eba9 0101 	subpl.w	r1, r9, r1
 8008a04:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a08:	bf58      	it	pl
 8008a0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a0e:	6022      	str	r2, [r4, #0]
 8008a10:	f04f 0900 	mov.w	r9, #0
 8008a14:	e78a      	b.n	800892c <_scanf_float+0x188>
 8008a16:	f04f 0a03 	mov.w	sl, #3
 8008a1a:	e787      	b.n	800892c <_scanf_float+0x188>
 8008a1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a20:	4639      	mov	r1, r7
 8008a22:	4640      	mov	r0, r8
 8008a24:	4798      	blx	r3
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f43f aedf 	beq.w	80087ea <_scanf_float+0x46>
 8008a2c:	e6ea      	b.n	8008804 <_scanf_float+0x60>
 8008a2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a36:	463a      	mov	r2, r7
 8008a38:	4640      	mov	r0, r8
 8008a3a:	4798      	blx	r3
 8008a3c:	6923      	ldr	r3, [r4, #16]
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	6123      	str	r3, [r4, #16]
 8008a42:	e6ec      	b.n	800881e <_scanf_float+0x7a>
 8008a44:	1e6b      	subs	r3, r5, #1
 8008a46:	2b06      	cmp	r3, #6
 8008a48:	d825      	bhi.n	8008a96 <_scanf_float+0x2f2>
 8008a4a:	2d02      	cmp	r5, #2
 8008a4c:	d836      	bhi.n	8008abc <_scanf_float+0x318>
 8008a4e:	455e      	cmp	r6, fp
 8008a50:	f67f aee8 	bls.w	8008824 <_scanf_float+0x80>
 8008a54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a5c:	463a      	mov	r2, r7
 8008a5e:	4640      	mov	r0, r8
 8008a60:	4798      	blx	r3
 8008a62:	6923      	ldr	r3, [r4, #16]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	6123      	str	r3, [r4, #16]
 8008a68:	e7f1      	b.n	8008a4e <_scanf_float+0x2aa>
 8008a6a:	9802      	ldr	r0, [sp, #8]
 8008a6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a70:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008a74:	9002      	str	r0, [sp, #8]
 8008a76:	463a      	mov	r2, r7
 8008a78:	4640      	mov	r0, r8
 8008a7a:	4798      	blx	r3
 8008a7c:	6923      	ldr	r3, [r4, #16]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	6123      	str	r3, [r4, #16]
 8008a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a86:	fa5f fa8a 	uxtb.w	sl, sl
 8008a8a:	f1ba 0f02 	cmp.w	sl, #2
 8008a8e:	d1ec      	bne.n	8008a6a <_scanf_float+0x2c6>
 8008a90:	3d03      	subs	r5, #3
 8008a92:	b2ed      	uxtb	r5, r5
 8008a94:	1b76      	subs	r6, r6, r5
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	05da      	lsls	r2, r3, #23
 8008a9a:	d52f      	bpl.n	8008afc <_scanf_float+0x358>
 8008a9c:	055b      	lsls	r3, r3, #21
 8008a9e:	d510      	bpl.n	8008ac2 <_scanf_float+0x31e>
 8008aa0:	455e      	cmp	r6, fp
 8008aa2:	f67f aebf 	bls.w	8008824 <_scanf_float+0x80>
 8008aa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008aae:	463a      	mov	r2, r7
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	4798      	blx	r3
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	e7f1      	b.n	8008aa0 <_scanf_float+0x2fc>
 8008abc:	46aa      	mov	sl, r5
 8008abe:	9602      	str	r6, [sp, #8]
 8008ac0:	e7df      	b.n	8008a82 <_scanf_float+0x2de>
 8008ac2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ac6:	6923      	ldr	r3, [r4, #16]
 8008ac8:	2965      	cmp	r1, #101	; 0x65
 8008aca:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ace:	f106 35ff 	add.w	r5, r6, #4294967295
 8008ad2:	6123      	str	r3, [r4, #16]
 8008ad4:	d00c      	beq.n	8008af0 <_scanf_float+0x34c>
 8008ad6:	2945      	cmp	r1, #69	; 0x45
 8008ad8:	d00a      	beq.n	8008af0 <_scanf_float+0x34c>
 8008ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ade:	463a      	mov	r2, r7
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	4798      	blx	r3
 8008ae4:	6923      	ldr	r3, [r4, #16]
 8008ae6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	1eb5      	subs	r5, r6, #2
 8008aee:	6123      	str	r3, [r4, #16]
 8008af0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008af4:	463a      	mov	r2, r7
 8008af6:	4640      	mov	r0, r8
 8008af8:	4798      	blx	r3
 8008afa:	462e      	mov	r6, r5
 8008afc:	6825      	ldr	r5, [r4, #0]
 8008afe:	f015 0510 	ands.w	r5, r5, #16
 8008b02:	d158      	bne.n	8008bb6 <_scanf_float+0x412>
 8008b04:	7035      	strb	r5, [r6, #0]
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b10:	d11c      	bne.n	8008b4c <_scanf_float+0x3a8>
 8008b12:	9b01      	ldr	r3, [sp, #4]
 8008b14:	454b      	cmp	r3, r9
 8008b16:	eba3 0209 	sub.w	r2, r3, r9
 8008b1a:	d124      	bne.n	8008b66 <_scanf_float+0x3c2>
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	4659      	mov	r1, fp
 8008b20:	4640      	mov	r0, r8
 8008b22:	f000 fe9b 	bl	800985c <_strtod_r>
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	6821      	ldr	r1, [r4, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f011 0f02 	tst.w	r1, #2
 8008b30:	ec57 6b10 	vmov	r6, r7, d0
 8008b34:	f103 0204 	add.w	r2, r3, #4
 8008b38:	d020      	beq.n	8008b7c <_scanf_float+0x3d8>
 8008b3a:	9903      	ldr	r1, [sp, #12]
 8008b3c:	600a      	str	r2, [r1, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	e9c3 6700 	strd	r6, r7, [r3]
 8008b44:	68e3      	ldr	r3, [r4, #12]
 8008b46:	3301      	adds	r3, #1
 8008b48:	60e3      	str	r3, [r4, #12]
 8008b4a:	e66c      	b.n	8008826 <_scanf_float+0x82>
 8008b4c:	9b04      	ldr	r3, [sp, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0e4      	beq.n	8008b1c <_scanf_float+0x378>
 8008b52:	9905      	ldr	r1, [sp, #20]
 8008b54:	230a      	movs	r3, #10
 8008b56:	462a      	mov	r2, r5
 8008b58:	3101      	adds	r1, #1
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	f000 ff08 	bl	8009970 <_strtol_r>
 8008b60:	9b04      	ldr	r3, [sp, #16]
 8008b62:	9e05      	ldr	r6, [sp, #20]
 8008b64:	1ac2      	subs	r2, r0, r3
 8008b66:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b6a:	429e      	cmp	r6, r3
 8008b6c:	bf28      	it	cs
 8008b6e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008b72:	4912      	ldr	r1, [pc, #72]	; (8008bbc <_scanf_float+0x418>)
 8008b74:	4630      	mov	r0, r6
 8008b76:	f000 f82b 	bl	8008bd0 <siprintf>
 8008b7a:	e7cf      	b.n	8008b1c <_scanf_float+0x378>
 8008b7c:	f011 0f04 	tst.w	r1, #4
 8008b80:	9903      	ldr	r1, [sp, #12]
 8008b82:	600a      	str	r2, [r1, #0]
 8008b84:	d1db      	bne.n	8008b3e <_scanf_float+0x39a>
 8008b86:	f8d3 8000 	ldr.w	r8, [r3]
 8008b8a:	ee10 2a10 	vmov	r2, s0
 8008b8e:	ee10 0a10 	vmov	r0, s0
 8008b92:	463b      	mov	r3, r7
 8008b94:	4639      	mov	r1, r7
 8008b96:	f7f7 ffc9 	bl	8000b2c <__aeabi_dcmpun>
 8008b9a:	b128      	cbz	r0, 8008ba8 <_scanf_float+0x404>
 8008b9c:	4808      	ldr	r0, [pc, #32]	; (8008bc0 <_scanf_float+0x41c>)
 8008b9e:	f000 f811 	bl	8008bc4 <nanf>
 8008ba2:	ed88 0a00 	vstr	s0, [r8]
 8008ba6:	e7cd      	b.n	8008b44 <_scanf_float+0x3a0>
 8008ba8:	4630      	mov	r0, r6
 8008baa:	4639      	mov	r1, r7
 8008bac:	f7f8 f81c 	bl	8000be8 <__aeabi_d2f>
 8008bb0:	f8c8 0000 	str.w	r0, [r8]
 8008bb4:	e7c6      	b.n	8008b44 <_scanf_float+0x3a0>
 8008bb6:	2500      	movs	r5, #0
 8008bb8:	e635      	b.n	8008826 <_scanf_float+0x82>
 8008bba:	bf00      	nop
 8008bbc:	0800f72c 	.word	0x0800f72c
 8008bc0:	0800fb48 	.word	0x0800fb48

08008bc4 <nanf>:
 8008bc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008bcc <nanf+0x8>
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	7fc00000 	.word	0x7fc00000

08008bd0 <siprintf>:
 8008bd0:	b40e      	push	{r1, r2, r3}
 8008bd2:	b500      	push	{lr}
 8008bd4:	b09c      	sub	sp, #112	; 0x70
 8008bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8008bd8:	9002      	str	r0, [sp, #8]
 8008bda:	9006      	str	r0, [sp, #24]
 8008bdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008be0:	4809      	ldr	r0, [pc, #36]	; (8008c08 <siprintf+0x38>)
 8008be2:	9107      	str	r1, [sp, #28]
 8008be4:	9104      	str	r1, [sp, #16]
 8008be6:	4909      	ldr	r1, [pc, #36]	; (8008c0c <siprintf+0x3c>)
 8008be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bec:	9105      	str	r1, [sp, #20]
 8008bee:	6800      	ldr	r0, [r0, #0]
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	a902      	add	r1, sp, #8
 8008bf4:	f002 fea4 	bl	800b940 <_svfiprintf_r>
 8008bf8:	9b02      	ldr	r3, [sp, #8]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	701a      	strb	r2, [r3, #0]
 8008bfe:	b01c      	add	sp, #112	; 0x70
 8008c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c04:	b003      	add	sp, #12
 8008c06:	4770      	bx	lr
 8008c08:	20000014 	.word	0x20000014
 8008c0c:	ffff0208 	.word	0xffff0208

08008c10 <sulp>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	4604      	mov	r4, r0
 8008c14:	460d      	mov	r5, r1
 8008c16:	ec45 4b10 	vmov	d0, r4, r5
 8008c1a:	4616      	mov	r6, r2
 8008c1c:	f002 fc2c 	bl	800b478 <__ulp>
 8008c20:	ec51 0b10 	vmov	r0, r1, d0
 8008c24:	b17e      	cbz	r6, 8008c46 <sulp+0x36>
 8008c26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008c2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dd09      	ble.n	8008c46 <sulp+0x36>
 8008c32:	051b      	lsls	r3, r3, #20
 8008c34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c38:	2400      	movs	r4, #0
 8008c3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c3e:	4622      	mov	r2, r4
 8008c40:	462b      	mov	r3, r5
 8008c42:	f7f7 fcd9 	bl	80005f8 <__aeabi_dmul>
 8008c46:	bd70      	pop	{r4, r5, r6, pc}

08008c48 <_strtod_l>:
 8008c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	b0a3      	sub	sp, #140	; 0x8c
 8008c4e:	461f      	mov	r7, r3
 8008c50:	2300      	movs	r3, #0
 8008c52:	931e      	str	r3, [sp, #120]	; 0x78
 8008c54:	4ba4      	ldr	r3, [pc, #656]	; (8008ee8 <_strtod_l+0x2a0>)
 8008c56:	9219      	str	r2, [sp, #100]	; 0x64
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	9307      	str	r3, [sp, #28]
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	4618      	mov	r0, r3
 8008c60:	4688      	mov	r8, r1
 8008c62:	f7f7 fab5 	bl	80001d0 <strlen>
 8008c66:	f04f 0a00 	mov.w	sl, #0
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	f04f 0b00 	mov.w	fp, #0
 8008c70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008c74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c76:	781a      	ldrb	r2, [r3, #0]
 8008c78:	2a2b      	cmp	r2, #43	; 0x2b
 8008c7a:	d04c      	beq.n	8008d16 <_strtod_l+0xce>
 8008c7c:	d839      	bhi.n	8008cf2 <_strtod_l+0xaa>
 8008c7e:	2a0d      	cmp	r2, #13
 8008c80:	d832      	bhi.n	8008ce8 <_strtod_l+0xa0>
 8008c82:	2a08      	cmp	r2, #8
 8008c84:	d832      	bhi.n	8008cec <_strtod_l+0xa4>
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	d03c      	beq.n	8008d04 <_strtod_l+0xbc>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	930e      	str	r3, [sp, #56]	; 0x38
 8008c8e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008c90:	7833      	ldrb	r3, [r6, #0]
 8008c92:	2b30      	cmp	r3, #48	; 0x30
 8008c94:	f040 80b4 	bne.w	8008e00 <_strtod_l+0x1b8>
 8008c98:	7873      	ldrb	r3, [r6, #1]
 8008c9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c9e:	2b58      	cmp	r3, #88	; 0x58
 8008ca0:	d16c      	bne.n	8008d7c <_strtod_l+0x134>
 8008ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	ab1e      	add	r3, sp, #120	; 0x78
 8008ca8:	9702      	str	r7, [sp, #8]
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	4a8f      	ldr	r2, [pc, #572]	; (8008eec <_strtod_l+0x2a4>)
 8008cae:	ab1f      	add	r3, sp, #124	; 0x7c
 8008cb0:	a91d      	add	r1, sp, #116	; 0x74
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f001 fd40 	bl	800a738 <__gethex>
 8008cb8:	f010 0707 	ands.w	r7, r0, #7
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	d005      	beq.n	8008ccc <_strtod_l+0x84>
 8008cc0:	2f06      	cmp	r7, #6
 8008cc2:	d12a      	bne.n	8008d1a <_strtod_l+0xd2>
 8008cc4:	3601      	adds	r6, #1
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	961d      	str	r6, [sp, #116]	; 0x74
 8008cca:	930e      	str	r3, [sp, #56]	; 0x38
 8008ccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f040 8596 	bne.w	8009800 <_strtod_l+0xbb8>
 8008cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cd6:	b1db      	cbz	r3, 8008d10 <_strtod_l+0xc8>
 8008cd8:	4652      	mov	r2, sl
 8008cda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008cde:	ec43 2b10 	vmov	d0, r2, r3
 8008ce2:	b023      	add	sp, #140	; 0x8c
 8008ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce8:	2a20      	cmp	r2, #32
 8008cea:	d1ce      	bne.n	8008c8a <_strtod_l+0x42>
 8008cec:	3301      	adds	r3, #1
 8008cee:	931d      	str	r3, [sp, #116]	; 0x74
 8008cf0:	e7c0      	b.n	8008c74 <_strtod_l+0x2c>
 8008cf2:	2a2d      	cmp	r2, #45	; 0x2d
 8008cf4:	d1c9      	bne.n	8008c8a <_strtod_l+0x42>
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	920e      	str	r2, [sp, #56]	; 0x38
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	921d      	str	r2, [sp, #116]	; 0x74
 8008cfe:	785b      	ldrb	r3, [r3, #1]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1c4      	bne.n	8008c8e <_strtod_l+0x46>
 8008d04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d06:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f040 8576 	bne.w	80097fc <_strtod_l+0xbb4>
 8008d10:	4652      	mov	r2, sl
 8008d12:	465b      	mov	r3, fp
 8008d14:	e7e3      	b.n	8008cde <_strtod_l+0x96>
 8008d16:	2200      	movs	r2, #0
 8008d18:	e7ee      	b.n	8008cf8 <_strtod_l+0xb0>
 8008d1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008d1c:	b13a      	cbz	r2, 8008d2e <_strtod_l+0xe6>
 8008d1e:	2135      	movs	r1, #53	; 0x35
 8008d20:	a820      	add	r0, sp, #128	; 0x80
 8008d22:	f002 fcb4 	bl	800b68e <__copybits>
 8008d26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f002 f879 	bl	800ae20 <_Bfree>
 8008d2e:	3f01      	subs	r7, #1
 8008d30:	2f05      	cmp	r7, #5
 8008d32:	d807      	bhi.n	8008d44 <_strtod_l+0xfc>
 8008d34:	e8df f007 	tbb	[pc, r7]
 8008d38:	1d180b0e 	.word	0x1d180b0e
 8008d3c:	030e      	.short	0x030e
 8008d3e:	f04f 0b00 	mov.w	fp, #0
 8008d42:	46da      	mov	sl, fp
 8008d44:	0728      	lsls	r0, r5, #28
 8008d46:	d5c1      	bpl.n	8008ccc <_strtod_l+0x84>
 8008d48:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008d4c:	e7be      	b.n	8008ccc <_strtod_l+0x84>
 8008d4e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008d52:	e7f7      	b.n	8008d44 <_strtod_l+0xfc>
 8008d54:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008d58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008d5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d66:	e7ed      	b.n	8008d44 <_strtod_l+0xfc>
 8008d68:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008ef0 <_strtod_l+0x2a8>
 8008d6c:	f04f 0a00 	mov.w	sl, #0
 8008d70:	e7e8      	b.n	8008d44 <_strtod_l+0xfc>
 8008d72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008d76:	f04f 3aff 	mov.w	sl, #4294967295
 8008d7a:	e7e3      	b.n	8008d44 <_strtod_l+0xfc>
 8008d7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	921d      	str	r2, [sp, #116]	; 0x74
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b30      	cmp	r3, #48	; 0x30
 8008d86:	d0f9      	beq.n	8008d7c <_strtod_l+0x134>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d09f      	beq.n	8008ccc <_strtod_l+0x84>
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	f04f 0900 	mov.w	r9, #0
 8008d92:	9304      	str	r3, [sp, #16]
 8008d94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d96:	930a      	str	r3, [sp, #40]	; 0x28
 8008d98:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d9c:	464f      	mov	r7, r9
 8008d9e:	220a      	movs	r2, #10
 8008da0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008da2:	7806      	ldrb	r6, [r0, #0]
 8008da4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008da8:	b2d9      	uxtb	r1, r3
 8008daa:	2909      	cmp	r1, #9
 8008dac:	d92a      	bls.n	8008e04 <_strtod_l+0x1bc>
 8008dae:	9907      	ldr	r1, [sp, #28]
 8008db0:	462a      	mov	r2, r5
 8008db2:	f002 fedd 	bl	800bb70 <strncmp>
 8008db6:	b398      	cbz	r0, 8008e20 <_strtod_l+0x1d8>
 8008db8:	2000      	movs	r0, #0
 8008dba:	4633      	mov	r3, r6
 8008dbc:	463d      	mov	r5, r7
 8008dbe:	9007      	str	r0, [sp, #28]
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	2b65      	cmp	r3, #101	; 0x65
 8008dc4:	d001      	beq.n	8008dca <_strtod_l+0x182>
 8008dc6:	2b45      	cmp	r3, #69	; 0x45
 8008dc8:	d118      	bne.n	8008dfc <_strtod_l+0x1b4>
 8008dca:	b91d      	cbnz	r5, 8008dd4 <_strtod_l+0x18c>
 8008dcc:	9b04      	ldr	r3, [sp, #16]
 8008dce:	4303      	orrs	r3, r0
 8008dd0:	d098      	beq.n	8008d04 <_strtod_l+0xbc>
 8008dd2:	2500      	movs	r5, #0
 8008dd4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008dd8:	f108 0301 	add.w	r3, r8, #1
 8008ddc:	931d      	str	r3, [sp, #116]	; 0x74
 8008dde:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008de2:	2b2b      	cmp	r3, #43	; 0x2b
 8008de4:	d075      	beq.n	8008ed2 <_strtod_l+0x28a>
 8008de6:	2b2d      	cmp	r3, #45	; 0x2d
 8008de8:	d07b      	beq.n	8008ee2 <_strtod_l+0x29a>
 8008dea:	f04f 0c00 	mov.w	ip, #0
 8008dee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008df2:	2909      	cmp	r1, #9
 8008df4:	f240 8082 	bls.w	8008efc <_strtod_l+0x2b4>
 8008df8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008dfc:	2600      	movs	r6, #0
 8008dfe:	e09d      	b.n	8008f3c <_strtod_l+0x2f4>
 8008e00:	2300      	movs	r3, #0
 8008e02:	e7c4      	b.n	8008d8e <_strtod_l+0x146>
 8008e04:	2f08      	cmp	r7, #8
 8008e06:	bfd8      	it	le
 8008e08:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008e0a:	f100 0001 	add.w	r0, r0, #1
 8008e0e:	bfda      	itte	le
 8008e10:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e14:	9309      	strle	r3, [sp, #36]	; 0x24
 8008e16:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008e1a:	3701      	adds	r7, #1
 8008e1c:	901d      	str	r0, [sp, #116]	; 0x74
 8008e1e:	e7bf      	b.n	8008da0 <_strtod_l+0x158>
 8008e20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e22:	195a      	adds	r2, r3, r5
 8008e24:	921d      	str	r2, [sp, #116]	; 0x74
 8008e26:	5d5b      	ldrb	r3, [r3, r5]
 8008e28:	2f00      	cmp	r7, #0
 8008e2a:	d037      	beq.n	8008e9c <_strtod_l+0x254>
 8008e2c:	9007      	str	r0, [sp, #28]
 8008e2e:	463d      	mov	r5, r7
 8008e30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008e34:	2a09      	cmp	r2, #9
 8008e36:	d912      	bls.n	8008e5e <_strtod_l+0x216>
 8008e38:	2201      	movs	r2, #1
 8008e3a:	e7c2      	b.n	8008dc2 <_strtod_l+0x17a>
 8008e3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	921d      	str	r2, [sp, #116]	; 0x74
 8008e42:	785b      	ldrb	r3, [r3, #1]
 8008e44:	3001      	adds	r0, #1
 8008e46:	2b30      	cmp	r3, #48	; 0x30
 8008e48:	d0f8      	beq.n	8008e3c <_strtod_l+0x1f4>
 8008e4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008e4e:	2a08      	cmp	r2, #8
 8008e50:	f200 84db 	bhi.w	800980a <_strtod_l+0xbc2>
 8008e54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008e56:	9007      	str	r0, [sp, #28]
 8008e58:	2000      	movs	r0, #0
 8008e5a:	920a      	str	r2, [sp, #40]	; 0x28
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	3b30      	subs	r3, #48	; 0x30
 8008e60:	f100 0201 	add.w	r2, r0, #1
 8008e64:	d014      	beq.n	8008e90 <_strtod_l+0x248>
 8008e66:	9907      	ldr	r1, [sp, #28]
 8008e68:	4411      	add	r1, r2
 8008e6a:	9107      	str	r1, [sp, #28]
 8008e6c:	462a      	mov	r2, r5
 8008e6e:	eb00 0e05 	add.w	lr, r0, r5
 8008e72:	210a      	movs	r1, #10
 8008e74:	4572      	cmp	r2, lr
 8008e76:	d113      	bne.n	8008ea0 <_strtod_l+0x258>
 8008e78:	182a      	adds	r2, r5, r0
 8008e7a:	2a08      	cmp	r2, #8
 8008e7c:	f105 0501 	add.w	r5, r5, #1
 8008e80:	4405      	add	r5, r0
 8008e82:	dc1c      	bgt.n	8008ebe <_strtod_l+0x276>
 8008e84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e86:	220a      	movs	r2, #10
 8008e88:	fb02 3301 	mla	r3, r2, r1, r3
 8008e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e8e:	2200      	movs	r2, #0
 8008e90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e92:	1c59      	adds	r1, r3, #1
 8008e94:	911d      	str	r1, [sp, #116]	; 0x74
 8008e96:	785b      	ldrb	r3, [r3, #1]
 8008e98:	4610      	mov	r0, r2
 8008e9a:	e7c9      	b.n	8008e30 <_strtod_l+0x1e8>
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	e7d2      	b.n	8008e46 <_strtod_l+0x1fe>
 8008ea0:	2a08      	cmp	r2, #8
 8008ea2:	dc04      	bgt.n	8008eae <_strtod_l+0x266>
 8008ea4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ea6:	434e      	muls	r6, r1
 8008ea8:	9609      	str	r6, [sp, #36]	; 0x24
 8008eaa:	3201      	adds	r2, #1
 8008eac:	e7e2      	b.n	8008e74 <_strtod_l+0x22c>
 8008eae:	f102 0c01 	add.w	ip, r2, #1
 8008eb2:	f1bc 0f10 	cmp.w	ip, #16
 8008eb6:	bfd8      	it	le
 8008eb8:	fb01 f909 	mulle.w	r9, r1, r9
 8008ebc:	e7f5      	b.n	8008eaa <_strtod_l+0x262>
 8008ebe:	2d10      	cmp	r5, #16
 8008ec0:	bfdc      	itt	le
 8008ec2:	220a      	movle	r2, #10
 8008ec4:	fb02 3909 	mlale	r9, r2, r9, r3
 8008ec8:	e7e1      	b.n	8008e8e <_strtod_l+0x246>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	9307      	str	r3, [sp, #28]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	e77c      	b.n	8008dcc <_strtod_l+0x184>
 8008ed2:	f04f 0c00 	mov.w	ip, #0
 8008ed6:	f108 0302 	add.w	r3, r8, #2
 8008eda:	931d      	str	r3, [sp, #116]	; 0x74
 8008edc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008ee0:	e785      	b.n	8008dee <_strtod_l+0x1a6>
 8008ee2:	f04f 0c01 	mov.w	ip, #1
 8008ee6:	e7f6      	b.n	8008ed6 <_strtod_l+0x28e>
 8008ee8:	0800f988 	.word	0x0800f988
 8008eec:	0800f734 	.word	0x0800f734
 8008ef0:	7ff00000 	.word	0x7ff00000
 8008ef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ef6:	1c59      	adds	r1, r3, #1
 8008ef8:	911d      	str	r1, [sp, #116]	; 0x74
 8008efa:	785b      	ldrb	r3, [r3, #1]
 8008efc:	2b30      	cmp	r3, #48	; 0x30
 8008efe:	d0f9      	beq.n	8008ef4 <_strtod_l+0x2ac>
 8008f00:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008f04:	2908      	cmp	r1, #8
 8008f06:	f63f af79 	bhi.w	8008dfc <_strtod_l+0x1b4>
 8008f0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008f0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f10:	9308      	str	r3, [sp, #32]
 8008f12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f14:	1c59      	adds	r1, r3, #1
 8008f16:	911d      	str	r1, [sp, #116]	; 0x74
 8008f18:	785b      	ldrb	r3, [r3, #1]
 8008f1a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008f1e:	2e09      	cmp	r6, #9
 8008f20:	d937      	bls.n	8008f92 <_strtod_l+0x34a>
 8008f22:	9e08      	ldr	r6, [sp, #32]
 8008f24:	1b89      	subs	r1, r1, r6
 8008f26:	2908      	cmp	r1, #8
 8008f28:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008f2c:	dc02      	bgt.n	8008f34 <_strtod_l+0x2ec>
 8008f2e:	4576      	cmp	r6, lr
 8008f30:	bfa8      	it	ge
 8008f32:	4676      	movge	r6, lr
 8008f34:	f1bc 0f00 	cmp.w	ip, #0
 8008f38:	d000      	beq.n	8008f3c <_strtod_l+0x2f4>
 8008f3a:	4276      	negs	r6, r6
 8008f3c:	2d00      	cmp	r5, #0
 8008f3e:	d14f      	bne.n	8008fe0 <_strtod_l+0x398>
 8008f40:	9904      	ldr	r1, [sp, #16]
 8008f42:	4301      	orrs	r1, r0
 8008f44:	f47f aec2 	bne.w	8008ccc <_strtod_l+0x84>
 8008f48:	2a00      	cmp	r2, #0
 8008f4a:	f47f aedb 	bne.w	8008d04 <_strtod_l+0xbc>
 8008f4e:	2b69      	cmp	r3, #105	; 0x69
 8008f50:	d027      	beq.n	8008fa2 <_strtod_l+0x35a>
 8008f52:	dc24      	bgt.n	8008f9e <_strtod_l+0x356>
 8008f54:	2b49      	cmp	r3, #73	; 0x49
 8008f56:	d024      	beq.n	8008fa2 <_strtod_l+0x35a>
 8008f58:	2b4e      	cmp	r3, #78	; 0x4e
 8008f5a:	f47f aed3 	bne.w	8008d04 <_strtod_l+0xbc>
 8008f5e:	499e      	ldr	r1, [pc, #632]	; (80091d8 <_strtod_l+0x590>)
 8008f60:	a81d      	add	r0, sp, #116	; 0x74
 8008f62:	f001 fe41 	bl	800abe8 <__match>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f43f aecc 	beq.w	8008d04 <_strtod_l+0xbc>
 8008f6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b28      	cmp	r3, #40	; 0x28
 8008f72:	d12d      	bne.n	8008fd0 <_strtod_l+0x388>
 8008f74:	4999      	ldr	r1, [pc, #612]	; (80091dc <_strtod_l+0x594>)
 8008f76:	aa20      	add	r2, sp, #128	; 0x80
 8008f78:	a81d      	add	r0, sp, #116	; 0x74
 8008f7a:	f001 fe49 	bl	800ac10 <__hexnan>
 8008f7e:	2805      	cmp	r0, #5
 8008f80:	d126      	bne.n	8008fd0 <_strtod_l+0x388>
 8008f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f84:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008f88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008f8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008f90:	e69c      	b.n	8008ccc <_strtod_l+0x84>
 8008f92:	210a      	movs	r1, #10
 8008f94:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008f98:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008f9c:	e7b9      	b.n	8008f12 <_strtod_l+0x2ca>
 8008f9e:	2b6e      	cmp	r3, #110	; 0x6e
 8008fa0:	e7db      	b.n	8008f5a <_strtod_l+0x312>
 8008fa2:	498f      	ldr	r1, [pc, #572]	; (80091e0 <_strtod_l+0x598>)
 8008fa4:	a81d      	add	r0, sp, #116	; 0x74
 8008fa6:	f001 fe1f 	bl	800abe8 <__match>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	f43f aeaa 	beq.w	8008d04 <_strtod_l+0xbc>
 8008fb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fb2:	498c      	ldr	r1, [pc, #560]	; (80091e4 <_strtod_l+0x59c>)
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	a81d      	add	r0, sp, #116	; 0x74
 8008fb8:	931d      	str	r3, [sp, #116]	; 0x74
 8008fba:	f001 fe15 	bl	800abe8 <__match>
 8008fbe:	b910      	cbnz	r0, 8008fc6 <_strtod_l+0x37e>
 8008fc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	931d      	str	r3, [sp, #116]	; 0x74
 8008fc6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80091f4 <_strtod_l+0x5ac>
 8008fca:	f04f 0a00 	mov.w	sl, #0
 8008fce:	e67d      	b.n	8008ccc <_strtod_l+0x84>
 8008fd0:	4885      	ldr	r0, [pc, #532]	; (80091e8 <_strtod_l+0x5a0>)
 8008fd2:	f002 fdb5 	bl	800bb40 <nan>
 8008fd6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008fda:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008fde:	e675      	b.n	8008ccc <_strtod_l+0x84>
 8008fe0:	9b07      	ldr	r3, [sp, #28]
 8008fe2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fe4:	1af3      	subs	r3, r6, r3
 8008fe6:	2f00      	cmp	r7, #0
 8008fe8:	bf08      	it	eq
 8008fea:	462f      	moveq	r7, r5
 8008fec:	2d10      	cmp	r5, #16
 8008fee:	9308      	str	r3, [sp, #32]
 8008ff0:	46a8      	mov	r8, r5
 8008ff2:	bfa8      	it	ge
 8008ff4:	f04f 0810 	movge.w	r8, #16
 8008ff8:	f7f7 fa84 	bl	8000504 <__aeabi_ui2d>
 8008ffc:	2d09      	cmp	r5, #9
 8008ffe:	4682      	mov	sl, r0
 8009000:	468b      	mov	fp, r1
 8009002:	dd13      	ble.n	800902c <_strtod_l+0x3e4>
 8009004:	4b79      	ldr	r3, [pc, #484]	; (80091ec <_strtod_l+0x5a4>)
 8009006:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800900a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800900e:	f7f7 faf3 	bl	80005f8 <__aeabi_dmul>
 8009012:	4682      	mov	sl, r0
 8009014:	4648      	mov	r0, r9
 8009016:	468b      	mov	fp, r1
 8009018:	f7f7 fa74 	bl	8000504 <__aeabi_ui2d>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	4650      	mov	r0, sl
 8009022:	4659      	mov	r1, fp
 8009024:	f7f7 f932 	bl	800028c <__adddf3>
 8009028:	4682      	mov	sl, r0
 800902a:	468b      	mov	fp, r1
 800902c:	2d0f      	cmp	r5, #15
 800902e:	dc38      	bgt.n	80090a2 <_strtod_l+0x45a>
 8009030:	9b08      	ldr	r3, [sp, #32]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f43f ae4a 	beq.w	8008ccc <_strtod_l+0x84>
 8009038:	dd24      	ble.n	8009084 <_strtod_l+0x43c>
 800903a:	2b16      	cmp	r3, #22
 800903c:	dc0b      	bgt.n	8009056 <_strtod_l+0x40e>
 800903e:	4d6b      	ldr	r5, [pc, #428]	; (80091ec <_strtod_l+0x5a4>)
 8009040:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009044:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009048:	4652      	mov	r2, sl
 800904a:	465b      	mov	r3, fp
 800904c:	f7f7 fad4 	bl	80005f8 <__aeabi_dmul>
 8009050:	4682      	mov	sl, r0
 8009052:	468b      	mov	fp, r1
 8009054:	e63a      	b.n	8008ccc <_strtod_l+0x84>
 8009056:	9a08      	ldr	r2, [sp, #32]
 8009058:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800905c:	4293      	cmp	r3, r2
 800905e:	db20      	blt.n	80090a2 <_strtod_l+0x45a>
 8009060:	4c62      	ldr	r4, [pc, #392]	; (80091ec <_strtod_l+0x5a4>)
 8009062:	f1c5 050f 	rsb	r5, r5, #15
 8009066:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800906a:	4652      	mov	r2, sl
 800906c:	465b      	mov	r3, fp
 800906e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009072:	f7f7 fac1 	bl	80005f8 <__aeabi_dmul>
 8009076:	9b08      	ldr	r3, [sp, #32]
 8009078:	1b5d      	subs	r5, r3, r5
 800907a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800907e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009082:	e7e3      	b.n	800904c <_strtod_l+0x404>
 8009084:	9b08      	ldr	r3, [sp, #32]
 8009086:	3316      	adds	r3, #22
 8009088:	db0b      	blt.n	80090a2 <_strtod_l+0x45a>
 800908a:	9b07      	ldr	r3, [sp, #28]
 800908c:	4a57      	ldr	r2, [pc, #348]	; (80091ec <_strtod_l+0x5a4>)
 800908e:	1b9e      	subs	r6, r3, r6
 8009090:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009094:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009098:	4650      	mov	r0, sl
 800909a:	4659      	mov	r1, fp
 800909c:	f7f7 fbd6 	bl	800084c <__aeabi_ddiv>
 80090a0:	e7d6      	b.n	8009050 <_strtod_l+0x408>
 80090a2:	9b08      	ldr	r3, [sp, #32]
 80090a4:	eba5 0808 	sub.w	r8, r5, r8
 80090a8:	4498      	add	r8, r3
 80090aa:	f1b8 0f00 	cmp.w	r8, #0
 80090ae:	dd71      	ble.n	8009194 <_strtod_l+0x54c>
 80090b0:	f018 030f 	ands.w	r3, r8, #15
 80090b4:	d00a      	beq.n	80090cc <_strtod_l+0x484>
 80090b6:	494d      	ldr	r1, [pc, #308]	; (80091ec <_strtod_l+0x5a4>)
 80090b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090bc:	4652      	mov	r2, sl
 80090be:	465b      	mov	r3, fp
 80090c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090c4:	f7f7 fa98 	bl	80005f8 <__aeabi_dmul>
 80090c8:	4682      	mov	sl, r0
 80090ca:	468b      	mov	fp, r1
 80090cc:	f038 080f 	bics.w	r8, r8, #15
 80090d0:	d04d      	beq.n	800916e <_strtod_l+0x526>
 80090d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80090d6:	dd22      	ble.n	800911e <_strtod_l+0x4d6>
 80090d8:	2500      	movs	r5, #0
 80090da:	462e      	mov	r6, r5
 80090dc:	9509      	str	r5, [sp, #36]	; 0x24
 80090de:	9507      	str	r5, [sp, #28]
 80090e0:	2322      	movs	r3, #34	; 0x22
 80090e2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80091f4 <_strtod_l+0x5ac>
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	f04f 0a00 	mov.w	sl, #0
 80090ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f43f adec 	beq.w	8008ccc <_strtod_l+0x84>
 80090f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80090f6:	4620      	mov	r0, r4
 80090f8:	f001 fe92 	bl	800ae20 <_Bfree>
 80090fc:	9907      	ldr	r1, [sp, #28]
 80090fe:	4620      	mov	r0, r4
 8009100:	f001 fe8e 	bl	800ae20 <_Bfree>
 8009104:	4631      	mov	r1, r6
 8009106:	4620      	mov	r0, r4
 8009108:	f001 fe8a 	bl	800ae20 <_Bfree>
 800910c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800910e:	4620      	mov	r0, r4
 8009110:	f001 fe86 	bl	800ae20 <_Bfree>
 8009114:	4629      	mov	r1, r5
 8009116:	4620      	mov	r0, r4
 8009118:	f001 fe82 	bl	800ae20 <_Bfree>
 800911c:	e5d6      	b.n	8008ccc <_strtod_l+0x84>
 800911e:	2300      	movs	r3, #0
 8009120:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009124:	4650      	mov	r0, sl
 8009126:	4659      	mov	r1, fp
 8009128:	4699      	mov	r9, r3
 800912a:	f1b8 0f01 	cmp.w	r8, #1
 800912e:	dc21      	bgt.n	8009174 <_strtod_l+0x52c>
 8009130:	b10b      	cbz	r3, 8009136 <_strtod_l+0x4ee>
 8009132:	4682      	mov	sl, r0
 8009134:	468b      	mov	fp, r1
 8009136:	4b2e      	ldr	r3, [pc, #184]	; (80091f0 <_strtod_l+0x5a8>)
 8009138:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800913c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009140:	4652      	mov	r2, sl
 8009142:	465b      	mov	r3, fp
 8009144:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009148:	f7f7 fa56 	bl	80005f8 <__aeabi_dmul>
 800914c:	4b29      	ldr	r3, [pc, #164]	; (80091f4 <_strtod_l+0x5ac>)
 800914e:	460a      	mov	r2, r1
 8009150:	400b      	ands	r3, r1
 8009152:	4929      	ldr	r1, [pc, #164]	; (80091f8 <_strtod_l+0x5b0>)
 8009154:	428b      	cmp	r3, r1
 8009156:	4682      	mov	sl, r0
 8009158:	d8be      	bhi.n	80090d8 <_strtod_l+0x490>
 800915a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800915e:	428b      	cmp	r3, r1
 8009160:	bf86      	itte	hi
 8009162:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80091fc <_strtod_l+0x5b4>
 8009166:	f04f 3aff 	movhi.w	sl, #4294967295
 800916a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800916e:	2300      	movs	r3, #0
 8009170:	9304      	str	r3, [sp, #16]
 8009172:	e081      	b.n	8009278 <_strtod_l+0x630>
 8009174:	f018 0f01 	tst.w	r8, #1
 8009178:	d007      	beq.n	800918a <_strtod_l+0x542>
 800917a:	4b1d      	ldr	r3, [pc, #116]	; (80091f0 <_strtod_l+0x5a8>)
 800917c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	f7f7 fa38 	bl	80005f8 <__aeabi_dmul>
 8009188:	2301      	movs	r3, #1
 800918a:	f109 0901 	add.w	r9, r9, #1
 800918e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009192:	e7ca      	b.n	800912a <_strtod_l+0x4e2>
 8009194:	d0eb      	beq.n	800916e <_strtod_l+0x526>
 8009196:	f1c8 0800 	rsb	r8, r8, #0
 800919a:	f018 020f 	ands.w	r2, r8, #15
 800919e:	d00a      	beq.n	80091b6 <_strtod_l+0x56e>
 80091a0:	4b12      	ldr	r3, [pc, #72]	; (80091ec <_strtod_l+0x5a4>)
 80091a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091a6:	4650      	mov	r0, sl
 80091a8:	4659      	mov	r1, fp
 80091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ae:	f7f7 fb4d 	bl	800084c <__aeabi_ddiv>
 80091b2:	4682      	mov	sl, r0
 80091b4:	468b      	mov	fp, r1
 80091b6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80091ba:	d0d8      	beq.n	800916e <_strtod_l+0x526>
 80091bc:	f1b8 0f1f 	cmp.w	r8, #31
 80091c0:	dd1e      	ble.n	8009200 <_strtod_l+0x5b8>
 80091c2:	2500      	movs	r5, #0
 80091c4:	462e      	mov	r6, r5
 80091c6:	9509      	str	r5, [sp, #36]	; 0x24
 80091c8:	9507      	str	r5, [sp, #28]
 80091ca:	2322      	movs	r3, #34	; 0x22
 80091cc:	f04f 0a00 	mov.w	sl, #0
 80091d0:	f04f 0b00 	mov.w	fp, #0
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	e789      	b.n	80090ec <_strtod_l+0x4a4>
 80091d8:	0800f705 	.word	0x0800f705
 80091dc:	0800f748 	.word	0x0800f748
 80091e0:	0800f6fd 	.word	0x0800f6fd
 80091e4:	0800f88c 	.word	0x0800f88c
 80091e8:	0800fb48 	.word	0x0800fb48
 80091ec:	0800fa28 	.word	0x0800fa28
 80091f0:	0800fa00 	.word	0x0800fa00
 80091f4:	7ff00000 	.word	0x7ff00000
 80091f8:	7ca00000 	.word	0x7ca00000
 80091fc:	7fefffff 	.word	0x7fefffff
 8009200:	f018 0310 	ands.w	r3, r8, #16
 8009204:	bf18      	it	ne
 8009206:	236a      	movne	r3, #106	; 0x6a
 8009208:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80095c0 <_strtod_l+0x978>
 800920c:	9304      	str	r3, [sp, #16]
 800920e:	4650      	mov	r0, sl
 8009210:	4659      	mov	r1, fp
 8009212:	2300      	movs	r3, #0
 8009214:	f018 0f01 	tst.w	r8, #1
 8009218:	d004      	beq.n	8009224 <_strtod_l+0x5dc>
 800921a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800921e:	f7f7 f9eb 	bl	80005f8 <__aeabi_dmul>
 8009222:	2301      	movs	r3, #1
 8009224:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009228:	f109 0908 	add.w	r9, r9, #8
 800922c:	d1f2      	bne.n	8009214 <_strtod_l+0x5cc>
 800922e:	b10b      	cbz	r3, 8009234 <_strtod_l+0x5ec>
 8009230:	4682      	mov	sl, r0
 8009232:	468b      	mov	fp, r1
 8009234:	9b04      	ldr	r3, [sp, #16]
 8009236:	b1bb      	cbz	r3, 8009268 <_strtod_l+0x620>
 8009238:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800923c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009240:	2b00      	cmp	r3, #0
 8009242:	4659      	mov	r1, fp
 8009244:	dd10      	ble.n	8009268 <_strtod_l+0x620>
 8009246:	2b1f      	cmp	r3, #31
 8009248:	f340 8128 	ble.w	800949c <_strtod_l+0x854>
 800924c:	2b34      	cmp	r3, #52	; 0x34
 800924e:	bfde      	ittt	le
 8009250:	3b20      	suble	r3, #32
 8009252:	f04f 32ff 	movle.w	r2, #4294967295
 8009256:	fa02 f303 	lslle.w	r3, r2, r3
 800925a:	f04f 0a00 	mov.w	sl, #0
 800925e:	bfcc      	ite	gt
 8009260:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009264:	ea03 0b01 	andle.w	fp, r3, r1
 8009268:	2200      	movs	r2, #0
 800926a:	2300      	movs	r3, #0
 800926c:	4650      	mov	r0, sl
 800926e:	4659      	mov	r1, fp
 8009270:	f7f7 fc2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009274:	2800      	cmp	r0, #0
 8009276:	d1a4      	bne.n	80091c2 <_strtod_l+0x57a>
 8009278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800927e:	462b      	mov	r3, r5
 8009280:	463a      	mov	r2, r7
 8009282:	4620      	mov	r0, r4
 8009284:	f001 fe38 	bl	800aef8 <__s2b>
 8009288:	9009      	str	r0, [sp, #36]	; 0x24
 800928a:	2800      	cmp	r0, #0
 800928c:	f43f af24 	beq.w	80090d8 <_strtod_l+0x490>
 8009290:	9b07      	ldr	r3, [sp, #28]
 8009292:	1b9e      	subs	r6, r3, r6
 8009294:	9b08      	ldr	r3, [sp, #32]
 8009296:	2b00      	cmp	r3, #0
 8009298:	bfb4      	ite	lt
 800929a:	4633      	movlt	r3, r6
 800929c:	2300      	movge	r3, #0
 800929e:	9310      	str	r3, [sp, #64]	; 0x40
 80092a0:	9b08      	ldr	r3, [sp, #32]
 80092a2:	2500      	movs	r5, #0
 80092a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80092a8:	9318      	str	r3, [sp, #96]	; 0x60
 80092aa:	462e      	mov	r6, r5
 80092ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ae:	4620      	mov	r0, r4
 80092b0:	6859      	ldr	r1, [r3, #4]
 80092b2:	f001 fd75 	bl	800ada0 <_Balloc>
 80092b6:	9007      	str	r0, [sp, #28]
 80092b8:	2800      	cmp	r0, #0
 80092ba:	f43f af11 	beq.w	80090e0 <_strtod_l+0x498>
 80092be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c0:	691a      	ldr	r2, [r3, #16]
 80092c2:	3202      	adds	r2, #2
 80092c4:	f103 010c 	add.w	r1, r3, #12
 80092c8:	0092      	lsls	r2, r2, #2
 80092ca:	300c      	adds	r0, #12
 80092cc:	f001 fd5a 	bl	800ad84 <memcpy>
 80092d0:	ec4b ab10 	vmov	d0, sl, fp
 80092d4:	aa20      	add	r2, sp, #128	; 0x80
 80092d6:	a91f      	add	r1, sp, #124	; 0x7c
 80092d8:	4620      	mov	r0, r4
 80092da:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80092de:	f002 f947 	bl	800b570 <__d2b>
 80092e2:	901e      	str	r0, [sp, #120]	; 0x78
 80092e4:	2800      	cmp	r0, #0
 80092e6:	f43f aefb 	beq.w	80090e0 <_strtod_l+0x498>
 80092ea:	2101      	movs	r1, #1
 80092ec:	4620      	mov	r0, r4
 80092ee:	f001 fe9d 	bl	800b02c <__i2b>
 80092f2:	4606      	mov	r6, r0
 80092f4:	2800      	cmp	r0, #0
 80092f6:	f43f aef3 	beq.w	80090e0 <_strtod_l+0x498>
 80092fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80092fc:	9904      	ldr	r1, [sp, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	bfab      	itete	ge
 8009302:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009304:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009306:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009308:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800930c:	bfac      	ite	ge
 800930e:	eb03 0902 	addge.w	r9, r3, r2
 8009312:	1ad7      	sublt	r7, r2, r3
 8009314:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009316:	eba3 0801 	sub.w	r8, r3, r1
 800931a:	4490      	add	r8, r2
 800931c:	4ba3      	ldr	r3, [pc, #652]	; (80095ac <_strtod_l+0x964>)
 800931e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009322:	4598      	cmp	r8, r3
 8009324:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009328:	f280 80cc 	bge.w	80094c4 <_strtod_l+0x87c>
 800932c:	eba3 0308 	sub.w	r3, r3, r8
 8009330:	2b1f      	cmp	r3, #31
 8009332:	eba2 0203 	sub.w	r2, r2, r3
 8009336:	f04f 0101 	mov.w	r1, #1
 800933a:	f300 80b6 	bgt.w	80094aa <_strtod_l+0x862>
 800933e:	fa01 f303 	lsl.w	r3, r1, r3
 8009342:	9311      	str	r3, [sp, #68]	; 0x44
 8009344:	2300      	movs	r3, #0
 8009346:	930c      	str	r3, [sp, #48]	; 0x30
 8009348:	eb09 0802 	add.w	r8, r9, r2
 800934c:	9b04      	ldr	r3, [sp, #16]
 800934e:	45c1      	cmp	r9, r8
 8009350:	4417      	add	r7, r2
 8009352:	441f      	add	r7, r3
 8009354:	464b      	mov	r3, r9
 8009356:	bfa8      	it	ge
 8009358:	4643      	movge	r3, r8
 800935a:	42bb      	cmp	r3, r7
 800935c:	bfa8      	it	ge
 800935e:	463b      	movge	r3, r7
 8009360:	2b00      	cmp	r3, #0
 8009362:	bfc2      	ittt	gt
 8009364:	eba8 0803 	subgt.w	r8, r8, r3
 8009368:	1aff      	subgt	r7, r7, r3
 800936a:	eba9 0903 	subgt.w	r9, r9, r3
 800936e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009370:	2b00      	cmp	r3, #0
 8009372:	dd17      	ble.n	80093a4 <_strtod_l+0x75c>
 8009374:	4631      	mov	r1, r6
 8009376:	461a      	mov	r2, r3
 8009378:	4620      	mov	r0, r4
 800937a:	f001 ff13 	bl	800b1a4 <__pow5mult>
 800937e:	4606      	mov	r6, r0
 8009380:	2800      	cmp	r0, #0
 8009382:	f43f aead 	beq.w	80090e0 <_strtod_l+0x498>
 8009386:	4601      	mov	r1, r0
 8009388:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800938a:	4620      	mov	r0, r4
 800938c:	f001 fe64 	bl	800b058 <__multiply>
 8009390:	900f      	str	r0, [sp, #60]	; 0x3c
 8009392:	2800      	cmp	r0, #0
 8009394:	f43f aea4 	beq.w	80090e0 <_strtod_l+0x498>
 8009398:	991e      	ldr	r1, [sp, #120]	; 0x78
 800939a:	4620      	mov	r0, r4
 800939c:	f001 fd40 	bl	800ae20 <_Bfree>
 80093a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093a2:	931e      	str	r3, [sp, #120]	; 0x78
 80093a4:	f1b8 0f00 	cmp.w	r8, #0
 80093a8:	f300 8091 	bgt.w	80094ce <_strtod_l+0x886>
 80093ac:	9b08      	ldr	r3, [sp, #32]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	dd08      	ble.n	80093c4 <_strtod_l+0x77c>
 80093b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80093b4:	9907      	ldr	r1, [sp, #28]
 80093b6:	4620      	mov	r0, r4
 80093b8:	f001 fef4 	bl	800b1a4 <__pow5mult>
 80093bc:	9007      	str	r0, [sp, #28]
 80093be:	2800      	cmp	r0, #0
 80093c0:	f43f ae8e 	beq.w	80090e0 <_strtod_l+0x498>
 80093c4:	2f00      	cmp	r7, #0
 80093c6:	dd08      	ble.n	80093da <_strtod_l+0x792>
 80093c8:	9907      	ldr	r1, [sp, #28]
 80093ca:	463a      	mov	r2, r7
 80093cc:	4620      	mov	r0, r4
 80093ce:	f001 ff43 	bl	800b258 <__lshift>
 80093d2:	9007      	str	r0, [sp, #28]
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f43f ae83 	beq.w	80090e0 <_strtod_l+0x498>
 80093da:	f1b9 0f00 	cmp.w	r9, #0
 80093de:	dd08      	ble.n	80093f2 <_strtod_l+0x7aa>
 80093e0:	4631      	mov	r1, r6
 80093e2:	464a      	mov	r2, r9
 80093e4:	4620      	mov	r0, r4
 80093e6:	f001 ff37 	bl	800b258 <__lshift>
 80093ea:	4606      	mov	r6, r0
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f43f ae77 	beq.w	80090e0 <_strtod_l+0x498>
 80093f2:	9a07      	ldr	r2, [sp, #28]
 80093f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80093f6:	4620      	mov	r0, r4
 80093f8:	f001 ffb6 	bl	800b368 <__mdiff>
 80093fc:	4605      	mov	r5, r0
 80093fe:	2800      	cmp	r0, #0
 8009400:	f43f ae6e 	beq.w	80090e0 <_strtod_l+0x498>
 8009404:	68c3      	ldr	r3, [r0, #12]
 8009406:	930f      	str	r3, [sp, #60]	; 0x3c
 8009408:	2300      	movs	r3, #0
 800940a:	60c3      	str	r3, [r0, #12]
 800940c:	4631      	mov	r1, r6
 800940e:	f001 ff8f 	bl	800b330 <__mcmp>
 8009412:	2800      	cmp	r0, #0
 8009414:	da65      	bge.n	80094e2 <_strtod_l+0x89a>
 8009416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009418:	ea53 030a 	orrs.w	r3, r3, sl
 800941c:	f040 8087 	bne.w	800952e <_strtod_l+0x8e6>
 8009420:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009424:	2b00      	cmp	r3, #0
 8009426:	f040 8082 	bne.w	800952e <_strtod_l+0x8e6>
 800942a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800942e:	0d1b      	lsrs	r3, r3, #20
 8009430:	051b      	lsls	r3, r3, #20
 8009432:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009436:	d97a      	bls.n	800952e <_strtod_l+0x8e6>
 8009438:	696b      	ldr	r3, [r5, #20]
 800943a:	b913      	cbnz	r3, 8009442 <_strtod_l+0x7fa>
 800943c:	692b      	ldr	r3, [r5, #16]
 800943e:	2b01      	cmp	r3, #1
 8009440:	dd75      	ble.n	800952e <_strtod_l+0x8e6>
 8009442:	4629      	mov	r1, r5
 8009444:	2201      	movs	r2, #1
 8009446:	4620      	mov	r0, r4
 8009448:	f001 ff06 	bl	800b258 <__lshift>
 800944c:	4631      	mov	r1, r6
 800944e:	4605      	mov	r5, r0
 8009450:	f001 ff6e 	bl	800b330 <__mcmp>
 8009454:	2800      	cmp	r0, #0
 8009456:	dd6a      	ble.n	800952e <_strtod_l+0x8e6>
 8009458:	9904      	ldr	r1, [sp, #16]
 800945a:	4a55      	ldr	r2, [pc, #340]	; (80095b0 <_strtod_l+0x968>)
 800945c:	465b      	mov	r3, fp
 800945e:	2900      	cmp	r1, #0
 8009460:	f000 8085 	beq.w	800956e <_strtod_l+0x926>
 8009464:	ea02 010b 	and.w	r1, r2, fp
 8009468:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800946c:	dc7f      	bgt.n	800956e <_strtod_l+0x926>
 800946e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009472:	f77f aeaa 	ble.w	80091ca <_strtod_l+0x582>
 8009476:	4a4f      	ldr	r2, [pc, #316]	; (80095b4 <_strtod_l+0x96c>)
 8009478:	2300      	movs	r3, #0
 800947a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800947e:	4650      	mov	r0, sl
 8009480:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009484:	4659      	mov	r1, fp
 8009486:	f7f7 f8b7 	bl	80005f8 <__aeabi_dmul>
 800948a:	460b      	mov	r3, r1
 800948c:	4303      	orrs	r3, r0
 800948e:	bf08      	it	eq
 8009490:	2322      	moveq	r3, #34	; 0x22
 8009492:	4682      	mov	sl, r0
 8009494:	468b      	mov	fp, r1
 8009496:	bf08      	it	eq
 8009498:	6023      	streq	r3, [r4, #0]
 800949a:	e62b      	b.n	80090f4 <_strtod_l+0x4ac>
 800949c:	f04f 32ff 	mov.w	r2, #4294967295
 80094a0:	fa02 f303 	lsl.w	r3, r2, r3
 80094a4:	ea03 0a0a 	and.w	sl, r3, sl
 80094a8:	e6de      	b.n	8009268 <_strtod_l+0x620>
 80094aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80094ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80094b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80094b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80094ba:	fa01 f308 	lsl.w	r3, r1, r8
 80094be:	930c      	str	r3, [sp, #48]	; 0x30
 80094c0:	9111      	str	r1, [sp, #68]	; 0x44
 80094c2:	e741      	b.n	8009348 <_strtod_l+0x700>
 80094c4:	2300      	movs	r3, #0
 80094c6:	930c      	str	r3, [sp, #48]	; 0x30
 80094c8:	2301      	movs	r3, #1
 80094ca:	9311      	str	r3, [sp, #68]	; 0x44
 80094cc:	e73c      	b.n	8009348 <_strtod_l+0x700>
 80094ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80094d0:	4642      	mov	r2, r8
 80094d2:	4620      	mov	r0, r4
 80094d4:	f001 fec0 	bl	800b258 <__lshift>
 80094d8:	901e      	str	r0, [sp, #120]	; 0x78
 80094da:	2800      	cmp	r0, #0
 80094dc:	f47f af66 	bne.w	80093ac <_strtod_l+0x764>
 80094e0:	e5fe      	b.n	80090e0 <_strtod_l+0x498>
 80094e2:	465f      	mov	r7, fp
 80094e4:	d16e      	bne.n	80095c4 <_strtod_l+0x97c>
 80094e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094ec:	b342      	cbz	r2, 8009540 <_strtod_l+0x8f8>
 80094ee:	4a32      	ldr	r2, [pc, #200]	; (80095b8 <_strtod_l+0x970>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d128      	bne.n	8009546 <_strtod_l+0x8fe>
 80094f4:	9b04      	ldr	r3, [sp, #16]
 80094f6:	4650      	mov	r0, sl
 80094f8:	b1eb      	cbz	r3, 8009536 <_strtod_l+0x8ee>
 80094fa:	4a2d      	ldr	r2, [pc, #180]	; (80095b0 <_strtod_l+0x968>)
 80094fc:	403a      	ands	r2, r7
 80094fe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009502:	f04f 31ff 	mov.w	r1, #4294967295
 8009506:	d819      	bhi.n	800953c <_strtod_l+0x8f4>
 8009508:	0d12      	lsrs	r2, r2, #20
 800950a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800950e:	fa01 f303 	lsl.w	r3, r1, r3
 8009512:	4298      	cmp	r0, r3
 8009514:	d117      	bne.n	8009546 <_strtod_l+0x8fe>
 8009516:	4b29      	ldr	r3, [pc, #164]	; (80095bc <_strtod_l+0x974>)
 8009518:	429f      	cmp	r7, r3
 800951a:	d102      	bne.n	8009522 <_strtod_l+0x8da>
 800951c:	3001      	adds	r0, #1
 800951e:	f43f addf 	beq.w	80090e0 <_strtod_l+0x498>
 8009522:	4b23      	ldr	r3, [pc, #140]	; (80095b0 <_strtod_l+0x968>)
 8009524:	403b      	ands	r3, r7
 8009526:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800952a:	f04f 0a00 	mov.w	sl, #0
 800952e:	9b04      	ldr	r3, [sp, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1a0      	bne.n	8009476 <_strtod_l+0x82e>
 8009534:	e5de      	b.n	80090f4 <_strtod_l+0x4ac>
 8009536:	f04f 33ff 	mov.w	r3, #4294967295
 800953a:	e7ea      	b.n	8009512 <_strtod_l+0x8ca>
 800953c:	460b      	mov	r3, r1
 800953e:	e7e8      	b.n	8009512 <_strtod_l+0x8ca>
 8009540:	ea53 030a 	orrs.w	r3, r3, sl
 8009544:	d088      	beq.n	8009458 <_strtod_l+0x810>
 8009546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009548:	b1db      	cbz	r3, 8009582 <_strtod_l+0x93a>
 800954a:	423b      	tst	r3, r7
 800954c:	d0ef      	beq.n	800952e <_strtod_l+0x8e6>
 800954e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009550:	9a04      	ldr	r2, [sp, #16]
 8009552:	4650      	mov	r0, sl
 8009554:	4659      	mov	r1, fp
 8009556:	b1c3      	cbz	r3, 800958a <_strtod_l+0x942>
 8009558:	f7ff fb5a 	bl	8008c10 <sulp>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009564:	f7f6 fe92 	bl	800028c <__adddf3>
 8009568:	4682      	mov	sl, r0
 800956a:	468b      	mov	fp, r1
 800956c:	e7df      	b.n	800952e <_strtod_l+0x8e6>
 800956e:	4013      	ands	r3, r2
 8009570:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009574:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009578:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800957c:	f04f 3aff 	mov.w	sl, #4294967295
 8009580:	e7d5      	b.n	800952e <_strtod_l+0x8e6>
 8009582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009584:	ea13 0f0a 	tst.w	r3, sl
 8009588:	e7e0      	b.n	800954c <_strtod_l+0x904>
 800958a:	f7ff fb41 	bl	8008c10 <sulp>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009596:	f7f6 fe77 	bl	8000288 <__aeabi_dsub>
 800959a:	2200      	movs	r2, #0
 800959c:	2300      	movs	r3, #0
 800959e:	4682      	mov	sl, r0
 80095a0:	468b      	mov	fp, r1
 80095a2:	f7f7 fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d0c1      	beq.n	800952e <_strtod_l+0x8e6>
 80095aa:	e60e      	b.n	80091ca <_strtod_l+0x582>
 80095ac:	fffffc02 	.word	0xfffffc02
 80095b0:	7ff00000 	.word	0x7ff00000
 80095b4:	39500000 	.word	0x39500000
 80095b8:	000fffff 	.word	0x000fffff
 80095bc:	7fefffff 	.word	0x7fefffff
 80095c0:	0800f760 	.word	0x0800f760
 80095c4:	4631      	mov	r1, r6
 80095c6:	4628      	mov	r0, r5
 80095c8:	f002 f82e 	bl	800b628 <__ratio>
 80095cc:	ec59 8b10 	vmov	r8, r9, d0
 80095d0:	ee10 0a10 	vmov	r0, s0
 80095d4:	2200      	movs	r2, #0
 80095d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095da:	4649      	mov	r1, r9
 80095dc:	f7f7 fa88 	bl	8000af0 <__aeabi_dcmple>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d07c      	beq.n	80096de <_strtod_l+0xa96>
 80095e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d04c      	beq.n	8009684 <_strtod_l+0xa3c>
 80095ea:	4b95      	ldr	r3, [pc, #596]	; (8009840 <_strtod_l+0xbf8>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80095f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009840 <_strtod_l+0xbf8>
 80095f6:	f04f 0800 	mov.w	r8, #0
 80095fa:	4b92      	ldr	r3, [pc, #584]	; (8009844 <_strtod_l+0xbfc>)
 80095fc:	403b      	ands	r3, r7
 80095fe:	9311      	str	r3, [sp, #68]	; 0x44
 8009600:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009602:	4b91      	ldr	r3, [pc, #580]	; (8009848 <_strtod_l+0xc00>)
 8009604:	429a      	cmp	r2, r3
 8009606:	f040 80b2 	bne.w	800976e <_strtod_l+0xb26>
 800960a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800960e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009612:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009616:	ec4b ab10 	vmov	d0, sl, fp
 800961a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800961e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009622:	f001 ff29 	bl	800b478 <__ulp>
 8009626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800962a:	ec53 2b10 	vmov	r2, r3, d0
 800962e:	f7f6 ffe3 	bl	80005f8 <__aeabi_dmul>
 8009632:	4652      	mov	r2, sl
 8009634:	465b      	mov	r3, fp
 8009636:	f7f6 fe29 	bl	800028c <__adddf3>
 800963a:	460b      	mov	r3, r1
 800963c:	4981      	ldr	r1, [pc, #516]	; (8009844 <_strtod_l+0xbfc>)
 800963e:	4a83      	ldr	r2, [pc, #524]	; (800984c <_strtod_l+0xc04>)
 8009640:	4019      	ands	r1, r3
 8009642:	4291      	cmp	r1, r2
 8009644:	4682      	mov	sl, r0
 8009646:	d95e      	bls.n	8009706 <_strtod_l+0xabe>
 8009648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800964a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800964e:	4293      	cmp	r3, r2
 8009650:	d103      	bne.n	800965a <_strtod_l+0xa12>
 8009652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009654:	3301      	adds	r3, #1
 8009656:	f43f ad43 	beq.w	80090e0 <_strtod_l+0x498>
 800965a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009858 <_strtod_l+0xc10>
 800965e:	f04f 3aff 	mov.w	sl, #4294967295
 8009662:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009664:	4620      	mov	r0, r4
 8009666:	f001 fbdb 	bl	800ae20 <_Bfree>
 800966a:	9907      	ldr	r1, [sp, #28]
 800966c:	4620      	mov	r0, r4
 800966e:	f001 fbd7 	bl	800ae20 <_Bfree>
 8009672:	4631      	mov	r1, r6
 8009674:	4620      	mov	r0, r4
 8009676:	f001 fbd3 	bl	800ae20 <_Bfree>
 800967a:	4629      	mov	r1, r5
 800967c:	4620      	mov	r0, r4
 800967e:	f001 fbcf 	bl	800ae20 <_Bfree>
 8009682:	e613      	b.n	80092ac <_strtod_l+0x664>
 8009684:	f1ba 0f00 	cmp.w	sl, #0
 8009688:	d11b      	bne.n	80096c2 <_strtod_l+0xa7a>
 800968a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800968e:	b9f3      	cbnz	r3, 80096ce <_strtod_l+0xa86>
 8009690:	4b6b      	ldr	r3, [pc, #428]	; (8009840 <_strtod_l+0xbf8>)
 8009692:	2200      	movs	r2, #0
 8009694:	4640      	mov	r0, r8
 8009696:	4649      	mov	r1, r9
 8009698:	f7f7 fa20 	bl	8000adc <__aeabi_dcmplt>
 800969c:	b9d0      	cbnz	r0, 80096d4 <_strtod_l+0xa8c>
 800969e:	4640      	mov	r0, r8
 80096a0:	4649      	mov	r1, r9
 80096a2:	4b6b      	ldr	r3, [pc, #428]	; (8009850 <_strtod_l+0xc08>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	f7f6 ffa7 	bl	80005f8 <__aeabi_dmul>
 80096aa:	4680      	mov	r8, r0
 80096ac:	4689      	mov	r9, r1
 80096ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80096b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80096b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80096b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80096bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80096c0:	e79b      	b.n	80095fa <_strtod_l+0x9b2>
 80096c2:	f1ba 0f01 	cmp.w	sl, #1
 80096c6:	d102      	bne.n	80096ce <_strtod_l+0xa86>
 80096c8:	2f00      	cmp	r7, #0
 80096ca:	f43f ad7e 	beq.w	80091ca <_strtod_l+0x582>
 80096ce:	4b61      	ldr	r3, [pc, #388]	; (8009854 <_strtod_l+0xc0c>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	e78c      	b.n	80095ee <_strtod_l+0x9a6>
 80096d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009850 <_strtod_l+0xc08>
 80096d8:	f04f 0800 	mov.w	r8, #0
 80096dc:	e7e7      	b.n	80096ae <_strtod_l+0xa66>
 80096de:	4b5c      	ldr	r3, [pc, #368]	; (8009850 <_strtod_l+0xc08>)
 80096e0:	4640      	mov	r0, r8
 80096e2:	4649      	mov	r1, r9
 80096e4:	2200      	movs	r2, #0
 80096e6:	f7f6 ff87 	bl	80005f8 <__aeabi_dmul>
 80096ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ec:	4680      	mov	r8, r0
 80096ee:	4689      	mov	r9, r1
 80096f0:	b933      	cbnz	r3, 8009700 <_strtod_l+0xab8>
 80096f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096f6:	9012      	str	r0, [sp, #72]	; 0x48
 80096f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80096fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80096fe:	e7dd      	b.n	80096bc <_strtod_l+0xa74>
 8009700:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009704:	e7f9      	b.n	80096fa <_strtod_l+0xab2>
 8009706:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800970a:	9b04      	ldr	r3, [sp, #16]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1a8      	bne.n	8009662 <_strtod_l+0xa1a>
 8009710:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009714:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009716:	0d1b      	lsrs	r3, r3, #20
 8009718:	051b      	lsls	r3, r3, #20
 800971a:	429a      	cmp	r2, r3
 800971c:	d1a1      	bne.n	8009662 <_strtod_l+0xa1a>
 800971e:	4640      	mov	r0, r8
 8009720:	4649      	mov	r1, r9
 8009722:	f7f7 fac9 	bl	8000cb8 <__aeabi_d2lz>
 8009726:	f7f6 ff39 	bl	800059c <__aeabi_l2d>
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	4640      	mov	r0, r8
 8009730:	4649      	mov	r1, r9
 8009732:	f7f6 fda9 	bl	8000288 <__aeabi_dsub>
 8009736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009738:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800973c:	ea43 030a 	orr.w	r3, r3, sl
 8009740:	4313      	orrs	r3, r2
 8009742:	4680      	mov	r8, r0
 8009744:	4689      	mov	r9, r1
 8009746:	d053      	beq.n	80097f0 <_strtod_l+0xba8>
 8009748:	a335      	add	r3, pc, #212	; (adr r3, 8009820 <_strtod_l+0xbd8>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f7f7 f9c5 	bl	8000adc <__aeabi_dcmplt>
 8009752:	2800      	cmp	r0, #0
 8009754:	f47f acce 	bne.w	80090f4 <_strtod_l+0x4ac>
 8009758:	a333      	add	r3, pc, #204	; (adr r3, 8009828 <_strtod_l+0xbe0>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	4640      	mov	r0, r8
 8009760:	4649      	mov	r1, r9
 8009762:	f7f7 f9d9 	bl	8000b18 <__aeabi_dcmpgt>
 8009766:	2800      	cmp	r0, #0
 8009768:	f43f af7b 	beq.w	8009662 <_strtod_l+0xa1a>
 800976c:	e4c2      	b.n	80090f4 <_strtod_l+0x4ac>
 800976e:	9b04      	ldr	r3, [sp, #16]
 8009770:	b333      	cbz	r3, 80097c0 <_strtod_l+0xb78>
 8009772:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009774:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009778:	d822      	bhi.n	80097c0 <_strtod_l+0xb78>
 800977a:	a32d      	add	r3, pc, #180	; (adr r3, 8009830 <_strtod_l+0xbe8>)
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	4640      	mov	r0, r8
 8009782:	4649      	mov	r1, r9
 8009784:	f7f7 f9b4 	bl	8000af0 <__aeabi_dcmple>
 8009788:	b1a0      	cbz	r0, 80097b4 <_strtod_l+0xb6c>
 800978a:	4649      	mov	r1, r9
 800978c:	4640      	mov	r0, r8
 800978e:	f7f7 fa0b 	bl	8000ba8 <__aeabi_d2uiz>
 8009792:	2801      	cmp	r0, #1
 8009794:	bf38      	it	cc
 8009796:	2001      	movcc	r0, #1
 8009798:	f7f6 feb4 	bl	8000504 <__aeabi_ui2d>
 800979c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800979e:	4680      	mov	r8, r0
 80097a0:	4689      	mov	r9, r1
 80097a2:	bb13      	cbnz	r3, 80097ea <_strtod_l+0xba2>
 80097a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097a8:	9014      	str	r0, [sp, #80]	; 0x50
 80097aa:	9315      	str	r3, [sp, #84]	; 0x54
 80097ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80097b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80097b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80097bc:	1a9b      	subs	r3, r3, r2
 80097be:	930d      	str	r3, [sp, #52]	; 0x34
 80097c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80097c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80097cc:	f001 fe54 	bl	800b478 <__ulp>
 80097d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097d4:	ec53 2b10 	vmov	r2, r3, d0
 80097d8:	f7f6 ff0e 	bl	80005f8 <__aeabi_dmul>
 80097dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80097e0:	f7f6 fd54 	bl	800028c <__adddf3>
 80097e4:	4682      	mov	sl, r0
 80097e6:	468b      	mov	fp, r1
 80097e8:	e78f      	b.n	800970a <_strtod_l+0xac2>
 80097ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80097ee:	e7dd      	b.n	80097ac <_strtod_l+0xb64>
 80097f0:	a311      	add	r3, pc, #68	; (adr r3, 8009838 <_strtod_l+0xbf0>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	f7f7 f971 	bl	8000adc <__aeabi_dcmplt>
 80097fa:	e7b4      	b.n	8009766 <_strtod_l+0xb1e>
 80097fc:	2300      	movs	r3, #0
 80097fe:	930e      	str	r3, [sp, #56]	; 0x38
 8009800:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009802:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009804:	6013      	str	r3, [r2, #0]
 8009806:	f7ff ba65 	b.w	8008cd4 <_strtod_l+0x8c>
 800980a:	2b65      	cmp	r3, #101	; 0x65
 800980c:	f43f ab5d 	beq.w	8008eca <_strtod_l+0x282>
 8009810:	2b45      	cmp	r3, #69	; 0x45
 8009812:	f43f ab5a 	beq.w	8008eca <_strtod_l+0x282>
 8009816:	2201      	movs	r2, #1
 8009818:	f7ff bb92 	b.w	8008f40 <_strtod_l+0x2f8>
 800981c:	f3af 8000 	nop.w
 8009820:	94a03595 	.word	0x94a03595
 8009824:	3fdfffff 	.word	0x3fdfffff
 8009828:	35afe535 	.word	0x35afe535
 800982c:	3fe00000 	.word	0x3fe00000
 8009830:	ffc00000 	.word	0xffc00000
 8009834:	41dfffff 	.word	0x41dfffff
 8009838:	94a03595 	.word	0x94a03595
 800983c:	3fcfffff 	.word	0x3fcfffff
 8009840:	3ff00000 	.word	0x3ff00000
 8009844:	7ff00000 	.word	0x7ff00000
 8009848:	7fe00000 	.word	0x7fe00000
 800984c:	7c9fffff 	.word	0x7c9fffff
 8009850:	3fe00000 	.word	0x3fe00000
 8009854:	bff00000 	.word	0xbff00000
 8009858:	7fefffff 	.word	0x7fefffff

0800985c <_strtod_r>:
 800985c:	4b01      	ldr	r3, [pc, #4]	; (8009864 <_strtod_r+0x8>)
 800985e:	f7ff b9f3 	b.w	8008c48 <_strtod_l>
 8009862:	bf00      	nop
 8009864:	2000007c 	.word	0x2000007c

08009868 <_strtol_l.isra.0>:
 8009868:	2b01      	cmp	r3, #1
 800986a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800986e:	d001      	beq.n	8009874 <_strtol_l.isra.0+0xc>
 8009870:	2b24      	cmp	r3, #36	; 0x24
 8009872:	d906      	bls.n	8009882 <_strtol_l.isra.0+0x1a>
 8009874:	f7fe fafa 	bl	8007e6c <__errno>
 8009878:	2316      	movs	r3, #22
 800987a:	6003      	str	r3, [r0, #0]
 800987c:	2000      	movs	r0, #0
 800987e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009882:	4f3a      	ldr	r7, [pc, #232]	; (800996c <_strtol_l.isra.0+0x104>)
 8009884:	468e      	mov	lr, r1
 8009886:	4676      	mov	r6, lr
 8009888:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800988c:	5de5      	ldrb	r5, [r4, r7]
 800988e:	f015 0508 	ands.w	r5, r5, #8
 8009892:	d1f8      	bne.n	8009886 <_strtol_l.isra.0+0x1e>
 8009894:	2c2d      	cmp	r4, #45	; 0x2d
 8009896:	d134      	bne.n	8009902 <_strtol_l.isra.0+0x9a>
 8009898:	f89e 4000 	ldrb.w	r4, [lr]
 800989c:	f04f 0801 	mov.w	r8, #1
 80098a0:	f106 0e02 	add.w	lr, r6, #2
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d05c      	beq.n	8009962 <_strtol_l.isra.0+0xfa>
 80098a8:	2b10      	cmp	r3, #16
 80098aa:	d10c      	bne.n	80098c6 <_strtol_l.isra.0+0x5e>
 80098ac:	2c30      	cmp	r4, #48	; 0x30
 80098ae:	d10a      	bne.n	80098c6 <_strtol_l.isra.0+0x5e>
 80098b0:	f89e 4000 	ldrb.w	r4, [lr]
 80098b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80098b8:	2c58      	cmp	r4, #88	; 0x58
 80098ba:	d14d      	bne.n	8009958 <_strtol_l.isra.0+0xf0>
 80098bc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80098c0:	2310      	movs	r3, #16
 80098c2:	f10e 0e02 	add.w	lr, lr, #2
 80098c6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80098ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80098ce:	2600      	movs	r6, #0
 80098d0:	fbbc f9f3 	udiv	r9, ip, r3
 80098d4:	4635      	mov	r5, r6
 80098d6:	fb03 ca19 	mls	sl, r3, r9, ip
 80098da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80098de:	2f09      	cmp	r7, #9
 80098e0:	d818      	bhi.n	8009914 <_strtol_l.isra.0+0xac>
 80098e2:	463c      	mov	r4, r7
 80098e4:	42a3      	cmp	r3, r4
 80098e6:	dd24      	ble.n	8009932 <_strtol_l.isra.0+0xca>
 80098e8:	2e00      	cmp	r6, #0
 80098ea:	db1f      	blt.n	800992c <_strtol_l.isra.0+0xc4>
 80098ec:	45a9      	cmp	r9, r5
 80098ee:	d31d      	bcc.n	800992c <_strtol_l.isra.0+0xc4>
 80098f0:	d101      	bne.n	80098f6 <_strtol_l.isra.0+0x8e>
 80098f2:	45a2      	cmp	sl, r4
 80098f4:	db1a      	blt.n	800992c <_strtol_l.isra.0+0xc4>
 80098f6:	fb05 4503 	mla	r5, r5, r3, r4
 80098fa:	2601      	movs	r6, #1
 80098fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009900:	e7eb      	b.n	80098da <_strtol_l.isra.0+0x72>
 8009902:	2c2b      	cmp	r4, #43	; 0x2b
 8009904:	bf08      	it	eq
 8009906:	f89e 4000 	ldrbeq.w	r4, [lr]
 800990a:	46a8      	mov	r8, r5
 800990c:	bf08      	it	eq
 800990e:	f106 0e02 	addeq.w	lr, r6, #2
 8009912:	e7c7      	b.n	80098a4 <_strtol_l.isra.0+0x3c>
 8009914:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009918:	2f19      	cmp	r7, #25
 800991a:	d801      	bhi.n	8009920 <_strtol_l.isra.0+0xb8>
 800991c:	3c37      	subs	r4, #55	; 0x37
 800991e:	e7e1      	b.n	80098e4 <_strtol_l.isra.0+0x7c>
 8009920:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009924:	2f19      	cmp	r7, #25
 8009926:	d804      	bhi.n	8009932 <_strtol_l.isra.0+0xca>
 8009928:	3c57      	subs	r4, #87	; 0x57
 800992a:	e7db      	b.n	80098e4 <_strtol_l.isra.0+0x7c>
 800992c:	f04f 36ff 	mov.w	r6, #4294967295
 8009930:	e7e4      	b.n	80098fc <_strtol_l.isra.0+0x94>
 8009932:	2e00      	cmp	r6, #0
 8009934:	da05      	bge.n	8009942 <_strtol_l.isra.0+0xda>
 8009936:	2322      	movs	r3, #34	; 0x22
 8009938:	6003      	str	r3, [r0, #0]
 800993a:	4665      	mov	r5, ip
 800993c:	b942      	cbnz	r2, 8009950 <_strtol_l.isra.0+0xe8>
 800993e:	4628      	mov	r0, r5
 8009940:	e79d      	b.n	800987e <_strtol_l.isra.0+0x16>
 8009942:	f1b8 0f00 	cmp.w	r8, #0
 8009946:	d000      	beq.n	800994a <_strtol_l.isra.0+0xe2>
 8009948:	426d      	negs	r5, r5
 800994a:	2a00      	cmp	r2, #0
 800994c:	d0f7      	beq.n	800993e <_strtol_l.isra.0+0xd6>
 800994e:	b10e      	cbz	r6, 8009954 <_strtol_l.isra.0+0xec>
 8009950:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009954:	6011      	str	r1, [r2, #0]
 8009956:	e7f2      	b.n	800993e <_strtol_l.isra.0+0xd6>
 8009958:	2430      	movs	r4, #48	; 0x30
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1b3      	bne.n	80098c6 <_strtol_l.isra.0+0x5e>
 800995e:	2308      	movs	r3, #8
 8009960:	e7b1      	b.n	80098c6 <_strtol_l.isra.0+0x5e>
 8009962:	2c30      	cmp	r4, #48	; 0x30
 8009964:	d0a4      	beq.n	80098b0 <_strtol_l.isra.0+0x48>
 8009966:	230a      	movs	r3, #10
 8009968:	e7ad      	b.n	80098c6 <_strtol_l.isra.0+0x5e>
 800996a:	bf00      	nop
 800996c:	0800f789 	.word	0x0800f789

08009970 <_strtol_r>:
 8009970:	f7ff bf7a 	b.w	8009868 <_strtol_l.isra.0>

08009974 <quorem>:
 8009974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009978:	6903      	ldr	r3, [r0, #16]
 800997a:	690c      	ldr	r4, [r1, #16]
 800997c:	42a3      	cmp	r3, r4
 800997e:	4607      	mov	r7, r0
 8009980:	f2c0 8081 	blt.w	8009a86 <quorem+0x112>
 8009984:	3c01      	subs	r4, #1
 8009986:	f101 0814 	add.w	r8, r1, #20
 800998a:	f100 0514 	add.w	r5, r0, #20
 800998e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009998:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800999c:	3301      	adds	r3, #1
 800999e:	429a      	cmp	r2, r3
 80099a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80099a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80099a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80099ac:	d331      	bcc.n	8009a12 <quorem+0x9e>
 80099ae:	f04f 0e00 	mov.w	lr, #0
 80099b2:	4640      	mov	r0, r8
 80099b4:	46ac      	mov	ip, r5
 80099b6:	46f2      	mov	sl, lr
 80099b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80099bc:	b293      	uxth	r3, r2
 80099be:	fb06 e303 	mla	r3, r6, r3, lr
 80099c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	ebaa 0303 	sub.w	r3, sl, r3
 80099cc:	0c12      	lsrs	r2, r2, #16
 80099ce:	f8dc a000 	ldr.w	sl, [ip]
 80099d2:	fb06 e202 	mla	r2, r6, r2, lr
 80099d6:	fa13 f38a 	uxtah	r3, r3, sl
 80099da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099de:	fa1f fa82 	uxth.w	sl, r2
 80099e2:	f8dc 2000 	ldr.w	r2, [ip]
 80099e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80099ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099f4:	4581      	cmp	r9, r0
 80099f6:	f84c 3b04 	str.w	r3, [ip], #4
 80099fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80099fe:	d2db      	bcs.n	80099b8 <quorem+0x44>
 8009a00:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a04:	b92b      	cbnz	r3, 8009a12 <quorem+0x9e>
 8009a06:	9b01      	ldr	r3, [sp, #4]
 8009a08:	3b04      	subs	r3, #4
 8009a0a:	429d      	cmp	r5, r3
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	d32e      	bcc.n	8009a6e <quorem+0xfa>
 8009a10:	613c      	str	r4, [r7, #16]
 8009a12:	4638      	mov	r0, r7
 8009a14:	f001 fc8c 	bl	800b330 <__mcmp>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	db24      	blt.n	8009a66 <quorem+0xf2>
 8009a1c:	3601      	adds	r6, #1
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f04f 0c00 	mov.w	ip, #0
 8009a24:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a28:	f8d0 e000 	ldr.w	lr, [r0]
 8009a2c:	b293      	uxth	r3, r2
 8009a2e:	ebac 0303 	sub.w	r3, ip, r3
 8009a32:	0c12      	lsrs	r2, r2, #16
 8009a34:	fa13 f38e 	uxtah	r3, r3, lr
 8009a38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a46:	45c1      	cmp	r9, r8
 8009a48:	f840 3b04 	str.w	r3, [r0], #4
 8009a4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a50:	d2e8      	bcs.n	8009a24 <quorem+0xb0>
 8009a52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a5a:	b922      	cbnz	r2, 8009a66 <quorem+0xf2>
 8009a5c:	3b04      	subs	r3, #4
 8009a5e:	429d      	cmp	r5, r3
 8009a60:	461a      	mov	r2, r3
 8009a62:	d30a      	bcc.n	8009a7a <quorem+0x106>
 8009a64:	613c      	str	r4, [r7, #16]
 8009a66:	4630      	mov	r0, r6
 8009a68:	b003      	add	sp, #12
 8009a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6e:	6812      	ldr	r2, [r2, #0]
 8009a70:	3b04      	subs	r3, #4
 8009a72:	2a00      	cmp	r2, #0
 8009a74:	d1cc      	bne.n	8009a10 <quorem+0x9c>
 8009a76:	3c01      	subs	r4, #1
 8009a78:	e7c7      	b.n	8009a0a <quorem+0x96>
 8009a7a:	6812      	ldr	r2, [r2, #0]
 8009a7c:	3b04      	subs	r3, #4
 8009a7e:	2a00      	cmp	r2, #0
 8009a80:	d1f0      	bne.n	8009a64 <quorem+0xf0>
 8009a82:	3c01      	subs	r4, #1
 8009a84:	e7eb      	b.n	8009a5e <quorem+0xea>
 8009a86:	2000      	movs	r0, #0
 8009a88:	e7ee      	b.n	8009a68 <quorem+0xf4>
 8009a8a:	0000      	movs	r0, r0
 8009a8c:	0000      	movs	r0, r0
	...

08009a90 <_dtoa_r>:
 8009a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a94:	ed2d 8b02 	vpush	{d8}
 8009a98:	ec57 6b10 	vmov	r6, r7, d0
 8009a9c:	b095      	sub	sp, #84	; 0x54
 8009a9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009aa0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009aa4:	9105      	str	r1, [sp, #20]
 8009aa6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009aaa:	4604      	mov	r4, r0
 8009aac:	9209      	str	r2, [sp, #36]	; 0x24
 8009aae:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ab0:	b975      	cbnz	r5, 8009ad0 <_dtoa_r+0x40>
 8009ab2:	2010      	movs	r0, #16
 8009ab4:	f001 f94c 	bl	800ad50 <malloc>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	6260      	str	r0, [r4, #36]	; 0x24
 8009abc:	b920      	cbnz	r0, 8009ac8 <_dtoa_r+0x38>
 8009abe:	4bb2      	ldr	r3, [pc, #712]	; (8009d88 <_dtoa_r+0x2f8>)
 8009ac0:	21ea      	movs	r1, #234	; 0xea
 8009ac2:	48b2      	ldr	r0, [pc, #712]	; (8009d8c <_dtoa_r+0x2fc>)
 8009ac4:	f002 f874 	bl	800bbb0 <__assert_func>
 8009ac8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009acc:	6005      	str	r5, [r0, #0]
 8009ace:	60c5      	str	r5, [r0, #12]
 8009ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ad2:	6819      	ldr	r1, [r3, #0]
 8009ad4:	b151      	cbz	r1, 8009aec <_dtoa_r+0x5c>
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	604a      	str	r2, [r1, #4]
 8009ada:	2301      	movs	r3, #1
 8009adc:	4093      	lsls	r3, r2
 8009ade:	608b      	str	r3, [r1, #8]
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f001 f99d 	bl	800ae20 <_Bfree>
 8009ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ae8:	2200      	movs	r2, #0
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	1e3b      	subs	r3, r7, #0
 8009aee:	bfb9      	ittee	lt
 8009af0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009af4:	9303      	strlt	r3, [sp, #12]
 8009af6:	2300      	movge	r3, #0
 8009af8:	f8c8 3000 	strge.w	r3, [r8]
 8009afc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009b00:	4ba3      	ldr	r3, [pc, #652]	; (8009d90 <_dtoa_r+0x300>)
 8009b02:	bfbc      	itt	lt
 8009b04:	2201      	movlt	r2, #1
 8009b06:	f8c8 2000 	strlt.w	r2, [r8]
 8009b0a:	ea33 0309 	bics.w	r3, r3, r9
 8009b0e:	d11b      	bne.n	8009b48 <_dtoa_r+0xb8>
 8009b10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b12:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b16:	6013      	str	r3, [r2, #0]
 8009b18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b1c:	4333      	orrs	r3, r6
 8009b1e:	f000 857a 	beq.w	800a616 <_dtoa_r+0xb86>
 8009b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b24:	b963      	cbnz	r3, 8009b40 <_dtoa_r+0xb0>
 8009b26:	4b9b      	ldr	r3, [pc, #620]	; (8009d94 <_dtoa_r+0x304>)
 8009b28:	e024      	b.n	8009b74 <_dtoa_r+0xe4>
 8009b2a:	4b9b      	ldr	r3, [pc, #620]	; (8009d98 <_dtoa_r+0x308>)
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	3308      	adds	r3, #8
 8009b30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009b32:	6013      	str	r3, [r2, #0]
 8009b34:	9800      	ldr	r0, [sp, #0]
 8009b36:	b015      	add	sp, #84	; 0x54
 8009b38:	ecbd 8b02 	vpop	{d8}
 8009b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b40:	4b94      	ldr	r3, [pc, #592]	; (8009d94 <_dtoa_r+0x304>)
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	3303      	adds	r3, #3
 8009b46:	e7f3      	b.n	8009b30 <_dtoa_r+0xa0>
 8009b48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	ec51 0b17 	vmov	r0, r1, d7
 8009b52:	2300      	movs	r3, #0
 8009b54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009b58:	f7f6 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b5c:	4680      	mov	r8, r0
 8009b5e:	b158      	cbz	r0, 8009b78 <_dtoa_r+0xe8>
 8009b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b62:	2301      	movs	r3, #1
 8009b64:	6013      	str	r3, [r2, #0]
 8009b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 8551 	beq.w	800a610 <_dtoa_r+0xb80>
 8009b6e:	488b      	ldr	r0, [pc, #556]	; (8009d9c <_dtoa_r+0x30c>)
 8009b70:	6018      	str	r0, [r3, #0]
 8009b72:	1e43      	subs	r3, r0, #1
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	e7dd      	b.n	8009b34 <_dtoa_r+0xa4>
 8009b78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009b7c:	aa12      	add	r2, sp, #72	; 0x48
 8009b7e:	a913      	add	r1, sp, #76	; 0x4c
 8009b80:	4620      	mov	r0, r4
 8009b82:	f001 fcf5 	bl	800b570 <__d2b>
 8009b86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b8a:	4683      	mov	fp, r0
 8009b8c:	2d00      	cmp	r5, #0
 8009b8e:	d07c      	beq.n	8009c8a <_dtoa_r+0x1fa>
 8009b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009b96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009b9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ba2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ba6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009baa:	4b7d      	ldr	r3, [pc, #500]	; (8009da0 <_dtoa_r+0x310>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	4630      	mov	r0, r6
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	f7f6 fb69 	bl	8000288 <__aeabi_dsub>
 8009bb6:	a36e      	add	r3, pc, #440	; (adr r3, 8009d70 <_dtoa_r+0x2e0>)
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	f7f6 fd1c 	bl	80005f8 <__aeabi_dmul>
 8009bc0:	a36d      	add	r3, pc, #436	; (adr r3, 8009d78 <_dtoa_r+0x2e8>)
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	f7f6 fb61 	bl	800028c <__adddf3>
 8009bca:	4606      	mov	r6, r0
 8009bcc:	4628      	mov	r0, r5
 8009bce:	460f      	mov	r7, r1
 8009bd0:	f7f6 fca8 	bl	8000524 <__aeabi_i2d>
 8009bd4:	a36a      	add	r3, pc, #424	; (adr r3, 8009d80 <_dtoa_r+0x2f0>)
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	f7f6 fd0d 	bl	80005f8 <__aeabi_dmul>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4630      	mov	r0, r6
 8009be4:	4639      	mov	r1, r7
 8009be6:	f7f6 fb51 	bl	800028c <__adddf3>
 8009bea:	4606      	mov	r6, r0
 8009bec:	460f      	mov	r7, r1
 8009bee:	f7f6 ffb3 	bl	8000b58 <__aeabi_d2iz>
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	4682      	mov	sl, r0
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f7f6 ff6e 	bl	8000adc <__aeabi_dcmplt>
 8009c00:	b148      	cbz	r0, 8009c16 <_dtoa_r+0x186>
 8009c02:	4650      	mov	r0, sl
 8009c04:	f7f6 fc8e 	bl	8000524 <__aeabi_i2d>
 8009c08:	4632      	mov	r2, r6
 8009c0a:	463b      	mov	r3, r7
 8009c0c:	f7f6 ff5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c10:	b908      	cbnz	r0, 8009c16 <_dtoa_r+0x186>
 8009c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c16:	f1ba 0f16 	cmp.w	sl, #22
 8009c1a:	d854      	bhi.n	8009cc6 <_dtoa_r+0x236>
 8009c1c:	4b61      	ldr	r3, [pc, #388]	; (8009da4 <_dtoa_r+0x314>)
 8009c1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c2a:	f7f6 ff57 	bl	8000adc <__aeabi_dcmplt>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	d04b      	beq.n	8009cca <_dtoa_r+0x23a>
 8009c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c36:	2300      	movs	r3, #0
 8009c38:	930e      	str	r3, [sp, #56]	; 0x38
 8009c3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c3c:	1b5d      	subs	r5, r3, r5
 8009c3e:	1e6b      	subs	r3, r5, #1
 8009c40:	9304      	str	r3, [sp, #16]
 8009c42:	bf43      	ittte	mi
 8009c44:	2300      	movmi	r3, #0
 8009c46:	f1c5 0801 	rsbmi	r8, r5, #1
 8009c4a:	9304      	strmi	r3, [sp, #16]
 8009c4c:	f04f 0800 	movpl.w	r8, #0
 8009c50:	f1ba 0f00 	cmp.w	sl, #0
 8009c54:	db3b      	blt.n	8009cce <_dtoa_r+0x23e>
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009c5c:	4453      	add	r3, sl
 8009c5e:	9304      	str	r3, [sp, #16]
 8009c60:	2300      	movs	r3, #0
 8009c62:	9306      	str	r3, [sp, #24]
 8009c64:	9b05      	ldr	r3, [sp, #20]
 8009c66:	2b09      	cmp	r3, #9
 8009c68:	d869      	bhi.n	8009d3e <_dtoa_r+0x2ae>
 8009c6a:	2b05      	cmp	r3, #5
 8009c6c:	bfc4      	itt	gt
 8009c6e:	3b04      	subgt	r3, #4
 8009c70:	9305      	strgt	r3, [sp, #20]
 8009c72:	9b05      	ldr	r3, [sp, #20]
 8009c74:	f1a3 0302 	sub.w	r3, r3, #2
 8009c78:	bfcc      	ite	gt
 8009c7a:	2500      	movgt	r5, #0
 8009c7c:	2501      	movle	r5, #1
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d869      	bhi.n	8009d56 <_dtoa_r+0x2c6>
 8009c82:	e8df f003 	tbb	[pc, r3]
 8009c86:	4e2c      	.short	0x4e2c
 8009c88:	5a4c      	.short	0x5a4c
 8009c8a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009c8e:	441d      	add	r5, r3
 8009c90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c94:	2b20      	cmp	r3, #32
 8009c96:	bfc1      	itttt	gt
 8009c98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c9c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009ca0:	fa09 f303 	lslgt.w	r3, r9, r3
 8009ca4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009ca8:	bfda      	itte	le
 8009caa:	f1c3 0320 	rsble	r3, r3, #32
 8009cae:	fa06 f003 	lslle.w	r0, r6, r3
 8009cb2:	4318      	orrgt	r0, r3
 8009cb4:	f7f6 fc26 	bl	8000504 <__aeabi_ui2d>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	4606      	mov	r6, r0
 8009cbc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009cc0:	3d01      	subs	r5, #1
 8009cc2:	9310      	str	r3, [sp, #64]	; 0x40
 8009cc4:	e771      	b.n	8009baa <_dtoa_r+0x11a>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e7b6      	b.n	8009c38 <_dtoa_r+0x1a8>
 8009cca:	900e      	str	r0, [sp, #56]	; 0x38
 8009ccc:	e7b5      	b.n	8009c3a <_dtoa_r+0x1aa>
 8009cce:	f1ca 0300 	rsb	r3, sl, #0
 8009cd2:	9306      	str	r3, [sp, #24]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	eba8 080a 	sub.w	r8, r8, sl
 8009cda:	930d      	str	r3, [sp, #52]	; 0x34
 8009cdc:	e7c2      	b.n	8009c64 <_dtoa_r+0x1d4>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	9308      	str	r3, [sp, #32]
 8009ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	dc39      	bgt.n	8009d5c <_dtoa_r+0x2cc>
 8009ce8:	f04f 0901 	mov.w	r9, #1
 8009cec:	f8cd 9004 	str.w	r9, [sp, #4]
 8009cf0:	464b      	mov	r3, r9
 8009cf2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009cf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	6042      	str	r2, [r0, #4]
 8009cfc:	2204      	movs	r2, #4
 8009cfe:	f102 0614 	add.w	r6, r2, #20
 8009d02:	429e      	cmp	r6, r3
 8009d04:	6841      	ldr	r1, [r0, #4]
 8009d06:	d92f      	bls.n	8009d68 <_dtoa_r+0x2d8>
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f001 f849 	bl	800ada0 <_Balloc>
 8009d0e:	9000      	str	r0, [sp, #0]
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d14b      	bne.n	8009dac <_dtoa_r+0x31c>
 8009d14:	4b24      	ldr	r3, [pc, #144]	; (8009da8 <_dtoa_r+0x318>)
 8009d16:	4602      	mov	r2, r0
 8009d18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d1c:	e6d1      	b.n	8009ac2 <_dtoa_r+0x32>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e7de      	b.n	8009ce0 <_dtoa_r+0x250>
 8009d22:	2300      	movs	r3, #0
 8009d24:	9308      	str	r3, [sp, #32]
 8009d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d28:	eb0a 0903 	add.w	r9, sl, r3
 8009d2c:	f109 0301 	add.w	r3, r9, #1
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	9301      	str	r3, [sp, #4]
 8009d34:	bfb8      	it	lt
 8009d36:	2301      	movlt	r3, #1
 8009d38:	e7dd      	b.n	8009cf6 <_dtoa_r+0x266>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e7f2      	b.n	8009d24 <_dtoa_r+0x294>
 8009d3e:	2501      	movs	r5, #1
 8009d40:	2300      	movs	r3, #0
 8009d42:	9305      	str	r3, [sp, #20]
 8009d44:	9508      	str	r5, [sp, #32]
 8009d46:	f04f 39ff 	mov.w	r9, #4294967295
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d50:	2312      	movs	r3, #18
 8009d52:	9209      	str	r2, [sp, #36]	; 0x24
 8009d54:	e7cf      	b.n	8009cf6 <_dtoa_r+0x266>
 8009d56:	2301      	movs	r3, #1
 8009d58:	9308      	str	r3, [sp, #32]
 8009d5a:	e7f4      	b.n	8009d46 <_dtoa_r+0x2b6>
 8009d5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009d60:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d64:	464b      	mov	r3, r9
 8009d66:	e7c6      	b.n	8009cf6 <_dtoa_r+0x266>
 8009d68:	3101      	adds	r1, #1
 8009d6a:	6041      	str	r1, [r0, #4]
 8009d6c:	0052      	lsls	r2, r2, #1
 8009d6e:	e7c6      	b.n	8009cfe <_dtoa_r+0x26e>
 8009d70:	636f4361 	.word	0x636f4361
 8009d74:	3fd287a7 	.word	0x3fd287a7
 8009d78:	8b60c8b3 	.word	0x8b60c8b3
 8009d7c:	3fc68a28 	.word	0x3fc68a28
 8009d80:	509f79fb 	.word	0x509f79fb
 8009d84:	3fd34413 	.word	0x3fd34413
 8009d88:	0800f896 	.word	0x0800f896
 8009d8c:	0800f8ad 	.word	0x0800f8ad
 8009d90:	7ff00000 	.word	0x7ff00000
 8009d94:	0800f892 	.word	0x0800f892
 8009d98:	0800f889 	.word	0x0800f889
 8009d9c:	0800f709 	.word	0x0800f709
 8009da0:	3ff80000 	.word	0x3ff80000
 8009da4:	0800fa28 	.word	0x0800fa28
 8009da8:	0800f90c 	.word	0x0800f90c
 8009dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dae:	9a00      	ldr	r2, [sp, #0]
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	9b01      	ldr	r3, [sp, #4]
 8009db4:	2b0e      	cmp	r3, #14
 8009db6:	f200 80ad 	bhi.w	8009f14 <_dtoa_r+0x484>
 8009dba:	2d00      	cmp	r5, #0
 8009dbc:	f000 80aa 	beq.w	8009f14 <_dtoa_r+0x484>
 8009dc0:	f1ba 0f00 	cmp.w	sl, #0
 8009dc4:	dd36      	ble.n	8009e34 <_dtoa_r+0x3a4>
 8009dc6:	4ac3      	ldr	r2, [pc, #780]	; (800a0d4 <_dtoa_r+0x644>)
 8009dc8:	f00a 030f 	and.w	r3, sl, #15
 8009dcc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009dd0:	ed93 7b00 	vldr	d7, [r3]
 8009dd4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009dd8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009ddc:	eeb0 8a47 	vmov.f32	s16, s14
 8009de0:	eef0 8a67 	vmov.f32	s17, s15
 8009de4:	d016      	beq.n	8009e14 <_dtoa_r+0x384>
 8009de6:	4bbc      	ldr	r3, [pc, #752]	; (800a0d8 <_dtoa_r+0x648>)
 8009de8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009dec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009df0:	f7f6 fd2c 	bl	800084c <__aeabi_ddiv>
 8009df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009df8:	f007 070f 	and.w	r7, r7, #15
 8009dfc:	2503      	movs	r5, #3
 8009dfe:	4eb6      	ldr	r6, [pc, #728]	; (800a0d8 <_dtoa_r+0x648>)
 8009e00:	b957      	cbnz	r7, 8009e18 <_dtoa_r+0x388>
 8009e02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e06:	ec53 2b18 	vmov	r2, r3, d8
 8009e0a:	f7f6 fd1f 	bl	800084c <__aeabi_ddiv>
 8009e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e12:	e029      	b.n	8009e68 <_dtoa_r+0x3d8>
 8009e14:	2502      	movs	r5, #2
 8009e16:	e7f2      	b.n	8009dfe <_dtoa_r+0x36e>
 8009e18:	07f9      	lsls	r1, r7, #31
 8009e1a:	d508      	bpl.n	8009e2e <_dtoa_r+0x39e>
 8009e1c:	ec51 0b18 	vmov	r0, r1, d8
 8009e20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e24:	f7f6 fbe8 	bl	80005f8 <__aeabi_dmul>
 8009e28:	ec41 0b18 	vmov	d8, r0, r1
 8009e2c:	3501      	adds	r5, #1
 8009e2e:	107f      	asrs	r7, r7, #1
 8009e30:	3608      	adds	r6, #8
 8009e32:	e7e5      	b.n	8009e00 <_dtoa_r+0x370>
 8009e34:	f000 80a6 	beq.w	8009f84 <_dtoa_r+0x4f4>
 8009e38:	f1ca 0600 	rsb	r6, sl, #0
 8009e3c:	4ba5      	ldr	r3, [pc, #660]	; (800a0d4 <_dtoa_r+0x644>)
 8009e3e:	4fa6      	ldr	r7, [pc, #664]	; (800a0d8 <_dtoa_r+0x648>)
 8009e40:	f006 020f 	and.w	r2, r6, #15
 8009e44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e50:	f7f6 fbd2 	bl	80005f8 <__aeabi_dmul>
 8009e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e58:	1136      	asrs	r6, r6, #4
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	2502      	movs	r5, #2
 8009e5e:	2e00      	cmp	r6, #0
 8009e60:	f040 8085 	bne.w	8009f6e <_dtoa_r+0x4de>
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1d2      	bne.n	8009e0e <_dtoa_r+0x37e>
 8009e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f000 808c 	beq.w	8009f88 <_dtoa_r+0x4f8>
 8009e70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e74:	4b99      	ldr	r3, [pc, #612]	; (800a0dc <_dtoa_r+0x64c>)
 8009e76:	2200      	movs	r2, #0
 8009e78:	4630      	mov	r0, r6
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	f7f6 fe2e 	bl	8000adc <__aeabi_dcmplt>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	f000 8081 	beq.w	8009f88 <_dtoa_r+0x4f8>
 8009e86:	9b01      	ldr	r3, [sp, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d07d      	beq.n	8009f88 <_dtoa_r+0x4f8>
 8009e8c:	f1b9 0f00 	cmp.w	r9, #0
 8009e90:	dd3c      	ble.n	8009f0c <_dtoa_r+0x47c>
 8009e92:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009e96:	9307      	str	r3, [sp, #28]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	4b91      	ldr	r3, [pc, #580]	; (800a0e0 <_dtoa_r+0x650>)
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	4639      	mov	r1, r7
 8009ea0:	f7f6 fbaa 	bl	80005f8 <__aeabi_dmul>
 8009ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ea8:	3501      	adds	r5, #1
 8009eaa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009eae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f7f6 fb36 	bl	8000524 <__aeabi_i2d>
 8009eb8:	4632      	mov	r2, r6
 8009eba:	463b      	mov	r3, r7
 8009ebc:	f7f6 fb9c 	bl	80005f8 <__aeabi_dmul>
 8009ec0:	4b88      	ldr	r3, [pc, #544]	; (800a0e4 <_dtoa_r+0x654>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f7f6 f9e2 	bl	800028c <__adddf3>
 8009ec8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ed0:	9303      	str	r3, [sp, #12]
 8009ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d15c      	bne.n	8009f92 <_dtoa_r+0x502>
 8009ed8:	4b83      	ldr	r3, [pc, #524]	; (800a0e8 <_dtoa_r+0x658>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	4630      	mov	r0, r6
 8009ede:	4639      	mov	r1, r7
 8009ee0:	f7f6 f9d2 	bl	8000288 <__aeabi_dsub>
 8009ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ee8:	4606      	mov	r6, r0
 8009eea:	460f      	mov	r7, r1
 8009eec:	f7f6 fe14 	bl	8000b18 <__aeabi_dcmpgt>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	f040 8296 	bne.w	800a422 <_dtoa_r+0x992>
 8009ef6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009efa:	4630      	mov	r0, r6
 8009efc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f00:	4639      	mov	r1, r7
 8009f02:	f7f6 fdeb 	bl	8000adc <__aeabi_dcmplt>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	f040 8288 	bne.w	800a41c <_dtoa_r+0x98c>
 8009f0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009f10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f2c0 8158 	blt.w	800a1cc <_dtoa_r+0x73c>
 8009f1c:	f1ba 0f0e 	cmp.w	sl, #14
 8009f20:	f300 8154 	bgt.w	800a1cc <_dtoa_r+0x73c>
 8009f24:	4b6b      	ldr	r3, [pc, #428]	; (800a0d4 <_dtoa_r+0x644>)
 8009f26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f280 80e3 	bge.w	800a0fc <_dtoa_r+0x66c>
 8009f36:	9b01      	ldr	r3, [sp, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f300 80df 	bgt.w	800a0fc <_dtoa_r+0x66c>
 8009f3e:	f040 826d 	bne.w	800a41c <_dtoa_r+0x98c>
 8009f42:	4b69      	ldr	r3, [pc, #420]	; (800a0e8 <_dtoa_r+0x658>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	4640      	mov	r0, r8
 8009f48:	4649      	mov	r1, r9
 8009f4a:	f7f6 fb55 	bl	80005f8 <__aeabi_dmul>
 8009f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f52:	f7f6 fdd7 	bl	8000b04 <__aeabi_dcmpge>
 8009f56:	9e01      	ldr	r6, [sp, #4]
 8009f58:	4637      	mov	r7, r6
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	f040 8243 	bne.w	800a3e6 <_dtoa_r+0x956>
 8009f60:	9d00      	ldr	r5, [sp, #0]
 8009f62:	2331      	movs	r3, #49	; 0x31
 8009f64:	f805 3b01 	strb.w	r3, [r5], #1
 8009f68:	f10a 0a01 	add.w	sl, sl, #1
 8009f6c:	e23f      	b.n	800a3ee <_dtoa_r+0x95e>
 8009f6e:	07f2      	lsls	r2, r6, #31
 8009f70:	d505      	bpl.n	8009f7e <_dtoa_r+0x4ee>
 8009f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f76:	f7f6 fb3f 	bl	80005f8 <__aeabi_dmul>
 8009f7a:	3501      	adds	r5, #1
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	1076      	asrs	r6, r6, #1
 8009f80:	3708      	adds	r7, #8
 8009f82:	e76c      	b.n	8009e5e <_dtoa_r+0x3ce>
 8009f84:	2502      	movs	r5, #2
 8009f86:	e76f      	b.n	8009e68 <_dtoa_r+0x3d8>
 8009f88:	9b01      	ldr	r3, [sp, #4]
 8009f8a:	f8cd a01c 	str.w	sl, [sp, #28]
 8009f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f90:	e78d      	b.n	8009eae <_dtoa_r+0x41e>
 8009f92:	9900      	ldr	r1, [sp, #0]
 8009f94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009f96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f98:	4b4e      	ldr	r3, [pc, #312]	; (800a0d4 <_dtoa_r+0x644>)
 8009f9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f9e:	4401      	add	r1, r0
 8009fa0:	9102      	str	r1, [sp, #8]
 8009fa2:	9908      	ldr	r1, [sp, #32]
 8009fa4:	eeb0 8a47 	vmov.f32	s16, s14
 8009fa8:	eef0 8a67 	vmov.f32	s17, s15
 8009fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009fb4:	2900      	cmp	r1, #0
 8009fb6:	d045      	beq.n	800a044 <_dtoa_r+0x5b4>
 8009fb8:	494c      	ldr	r1, [pc, #304]	; (800a0ec <_dtoa_r+0x65c>)
 8009fba:	2000      	movs	r0, #0
 8009fbc:	f7f6 fc46 	bl	800084c <__aeabi_ddiv>
 8009fc0:	ec53 2b18 	vmov	r2, r3, d8
 8009fc4:	f7f6 f960 	bl	8000288 <__aeabi_dsub>
 8009fc8:	9d00      	ldr	r5, [sp, #0]
 8009fca:	ec41 0b18 	vmov	d8, r0, r1
 8009fce:	4639      	mov	r1, r7
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7f6 fdc1 	bl	8000b58 <__aeabi_d2iz>
 8009fd6:	900c      	str	r0, [sp, #48]	; 0x30
 8009fd8:	f7f6 faa4 	bl	8000524 <__aeabi_i2d>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	f7f6 f950 	bl	8000288 <__aeabi_dsub>
 8009fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fea:	3330      	adds	r3, #48	; 0x30
 8009fec:	f805 3b01 	strb.w	r3, [r5], #1
 8009ff0:	ec53 2b18 	vmov	r2, r3, d8
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	460f      	mov	r7, r1
 8009ff8:	f7f6 fd70 	bl	8000adc <__aeabi_dcmplt>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d165      	bne.n	800a0cc <_dtoa_r+0x63c>
 800a000:	4632      	mov	r2, r6
 800a002:	463b      	mov	r3, r7
 800a004:	4935      	ldr	r1, [pc, #212]	; (800a0dc <_dtoa_r+0x64c>)
 800a006:	2000      	movs	r0, #0
 800a008:	f7f6 f93e 	bl	8000288 <__aeabi_dsub>
 800a00c:	ec53 2b18 	vmov	r2, r3, d8
 800a010:	f7f6 fd64 	bl	8000adc <__aeabi_dcmplt>
 800a014:	2800      	cmp	r0, #0
 800a016:	f040 80b9 	bne.w	800a18c <_dtoa_r+0x6fc>
 800a01a:	9b02      	ldr	r3, [sp, #8]
 800a01c:	429d      	cmp	r5, r3
 800a01e:	f43f af75 	beq.w	8009f0c <_dtoa_r+0x47c>
 800a022:	4b2f      	ldr	r3, [pc, #188]	; (800a0e0 <_dtoa_r+0x650>)
 800a024:	ec51 0b18 	vmov	r0, r1, d8
 800a028:	2200      	movs	r2, #0
 800a02a:	f7f6 fae5 	bl	80005f8 <__aeabi_dmul>
 800a02e:	4b2c      	ldr	r3, [pc, #176]	; (800a0e0 <_dtoa_r+0x650>)
 800a030:	ec41 0b18 	vmov	d8, r0, r1
 800a034:	2200      	movs	r2, #0
 800a036:	4630      	mov	r0, r6
 800a038:	4639      	mov	r1, r7
 800a03a:	f7f6 fadd 	bl	80005f8 <__aeabi_dmul>
 800a03e:	4606      	mov	r6, r0
 800a040:	460f      	mov	r7, r1
 800a042:	e7c4      	b.n	8009fce <_dtoa_r+0x53e>
 800a044:	ec51 0b17 	vmov	r0, r1, d7
 800a048:	f7f6 fad6 	bl	80005f8 <__aeabi_dmul>
 800a04c:	9b02      	ldr	r3, [sp, #8]
 800a04e:	9d00      	ldr	r5, [sp, #0]
 800a050:	930c      	str	r3, [sp, #48]	; 0x30
 800a052:	ec41 0b18 	vmov	d8, r0, r1
 800a056:	4639      	mov	r1, r7
 800a058:	4630      	mov	r0, r6
 800a05a:	f7f6 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800a05e:	9011      	str	r0, [sp, #68]	; 0x44
 800a060:	f7f6 fa60 	bl	8000524 <__aeabi_i2d>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4630      	mov	r0, r6
 800a06a:	4639      	mov	r1, r7
 800a06c:	f7f6 f90c 	bl	8000288 <__aeabi_dsub>
 800a070:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a072:	3330      	adds	r3, #48	; 0x30
 800a074:	f805 3b01 	strb.w	r3, [r5], #1
 800a078:	9b02      	ldr	r3, [sp, #8]
 800a07a:	429d      	cmp	r5, r3
 800a07c:	4606      	mov	r6, r0
 800a07e:	460f      	mov	r7, r1
 800a080:	f04f 0200 	mov.w	r2, #0
 800a084:	d134      	bne.n	800a0f0 <_dtoa_r+0x660>
 800a086:	4b19      	ldr	r3, [pc, #100]	; (800a0ec <_dtoa_r+0x65c>)
 800a088:	ec51 0b18 	vmov	r0, r1, d8
 800a08c:	f7f6 f8fe 	bl	800028c <__adddf3>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	4630      	mov	r0, r6
 800a096:	4639      	mov	r1, r7
 800a098:	f7f6 fd3e 	bl	8000b18 <__aeabi_dcmpgt>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d175      	bne.n	800a18c <_dtoa_r+0x6fc>
 800a0a0:	ec53 2b18 	vmov	r2, r3, d8
 800a0a4:	4911      	ldr	r1, [pc, #68]	; (800a0ec <_dtoa_r+0x65c>)
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	f7f6 f8ee 	bl	8000288 <__aeabi_dsub>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	f7f6 fd12 	bl	8000adc <__aeabi_dcmplt>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	f43f af27 	beq.w	8009f0c <_dtoa_r+0x47c>
 800a0be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0c0:	1e6b      	subs	r3, r5, #1
 800a0c2:	930c      	str	r3, [sp, #48]	; 0x30
 800a0c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0c8:	2b30      	cmp	r3, #48	; 0x30
 800a0ca:	d0f8      	beq.n	800a0be <_dtoa_r+0x62e>
 800a0cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a0d0:	e04a      	b.n	800a168 <_dtoa_r+0x6d8>
 800a0d2:	bf00      	nop
 800a0d4:	0800fa28 	.word	0x0800fa28
 800a0d8:	0800fa00 	.word	0x0800fa00
 800a0dc:	3ff00000 	.word	0x3ff00000
 800a0e0:	40240000 	.word	0x40240000
 800a0e4:	401c0000 	.word	0x401c0000
 800a0e8:	40140000 	.word	0x40140000
 800a0ec:	3fe00000 	.word	0x3fe00000
 800a0f0:	4baf      	ldr	r3, [pc, #700]	; (800a3b0 <_dtoa_r+0x920>)
 800a0f2:	f7f6 fa81 	bl	80005f8 <__aeabi_dmul>
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	460f      	mov	r7, r1
 800a0fa:	e7ac      	b.n	800a056 <_dtoa_r+0x5c6>
 800a0fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a100:	9d00      	ldr	r5, [sp, #0]
 800a102:	4642      	mov	r2, r8
 800a104:	464b      	mov	r3, r9
 800a106:	4630      	mov	r0, r6
 800a108:	4639      	mov	r1, r7
 800a10a:	f7f6 fb9f 	bl	800084c <__aeabi_ddiv>
 800a10e:	f7f6 fd23 	bl	8000b58 <__aeabi_d2iz>
 800a112:	9002      	str	r0, [sp, #8]
 800a114:	f7f6 fa06 	bl	8000524 <__aeabi_i2d>
 800a118:	4642      	mov	r2, r8
 800a11a:	464b      	mov	r3, r9
 800a11c:	f7f6 fa6c 	bl	80005f8 <__aeabi_dmul>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	4630      	mov	r0, r6
 800a126:	4639      	mov	r1, r7
 800a128:	f7f6 f8ae 	bl	8000288 <__aeabi_dsub>
 800a12c:	9e02      	ldr	r6, [sp, #8]
 800a12e:	9f01      	ldr	r7, [sp, #4]
 800a130:	3630      	adds	r6, #48	; 0x30
 800a132:	f805 6b01 	strb.w	r6, [r5], #1
 800a136:	9e00      	ldr	r6, [sp, #0]
 800a138:	1bae      	subs	r6, r5, r6
 800a13a:	42b7      	cmp	r7, r6
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	d137      	bne.n	800a1b2 <_dtoa_r+0x722>
 800a142:	f7f6 f8a3 	bl	800028c <__adddf3>
 800a146:	4642      	mov	r2, r8
 800a148:	464b      	mov	r3, r9
 800a14a:	4606      	mov	r6, r0
 800a14c:	460f      	mov	r7, r1
 800a14e:	f7f6 fce3 	bl	8000b18 <__aeabi_dcmpgt>
 800a152:	b9c8      	cbnz	r0, 800a188 <_dtoa_r+0x6f8>
 800a154:	4642      	mov	r2, r8
 800a156:	464b      	mov	r3, r9
 800a158:	4630      	mov	r0, r6
 800a15a:	4639      	mov	r1, r7
 800a15c:	f7f6 fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a160:	b110      	cbz	r0, 800a168 <_dtoa_r+0x6d8>
 800a162:	9b02      	ldr	r3, [sp, #8]
 800a164:	07d9      	lsls	r1, r3, #31
 800a166:	d40f      	bmi.n	800a188 <_dtoa_r+0x6f8>
 800a168:	4620      	mov	r0, r4
 800a16a:	4659      	mov	r1, fp
 800a16c:	f000 fe58 	bl	800ae20 <_Bfree>
 800a170:	2300      	movs	r3, #0
 800a172:	702b      	strb	r3, [r5, #0]
 800a174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a176:	f10a 0001 	add.w	r0, sl, #1
 800a17a:	6018      	str	r0, [r3, #0]
 800a17c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f43f acd8 	beq.w	8009b34 <_dtoa_r+0xa4>
 800a184:	601d      	str	r5, [r3, #0]
 800a186:	e4d5      	b.n	8009b34 <_dtoa_r+0xa4>
 800a188:	f8cd a01c 	str.w	sl, [sp, #28]
 800a18c:	462b      	mov	r3, r5
 800a18e:	461d      	mov	r5, r3
 800a190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a194:	2a39      	cmp	r2, #57	; 0x39
 800a196:	d108      	bne.n	800a1aa <_dtoa_r+0x71a>
 800a198:	9a00      	ldr	r2, [sp, #0]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d1f7      	bne.n	800a18e <_dtoa_r+0x6fe>
 800a19e:	9a07      	ldr	r2, [sp, #28]
 800a1a0:	9900      	ldr	r1, [sp, #0]
 800a1a2:	3201      	adds	r2, #1
 800a1a4:	9207      	str	r2, [sp, #28]
 800a1a6:	2230      	movs	r2, #48	; 0x30
 800a1a8:	700a      	strb	r2, [r1, #0]
 800a1aa:	781a      	ldrb	r2, [r3, #0]
 800a1ac:	3201      	adds	r2, #1
 800a1ae:	701a      	strb	r2, [r3, #0]
 800a1b0:	e78c      	b.n	800a0cc <_dtoa_r+0x63c>
 800a1b2:	4b7f      	ldr	r3, [pc, #508]	; (800a3b0 <_dtoa_r+0x920>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f7f6 fa1f 	bl	80005f8 <__aeabi_dmul>
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	2300      	movs	r3, #0
 800a1be:	4606      	mov	r6, r0
 800a1c0:	460f      	mov	r7, r1
 800a1c2:	f7f6 fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d09b      	beq.n	800a102 <_dtoa_r+0x672>
 800a1ca:	e7cd      	b.n	800a168 <_dtoa_r+0x6d8>
 800a1cc:	9a08      	ldr	r2, [sp, #32]
 800a1ce:	2a00      	cmp	r2, #0
 800a1d0:	f000 80c4 	beq.w	800a35c <_dtoa_r+0x8cc>
 800a1d4:	9a05      	ldr	r2, [sp, #20]
 800a1d6:	2a01      	cmp	r2, #1
 800a1d8:	f300 80a8 	bgt.w	800a32c <_dtoa_r+0x89c>
 800a1dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1de:	2a00      	cmp	r2, #0
 800a1e0:	f000 80a0 	beq.w	800a324 <_dtoa_r+0x894>
 800a1e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a1e8:	9e06      	ldr	r6, [sp, #24]
 800a1ea:	4645      	mov	r5, r8
 800a1ec:	9a04      	ldr	r2, [sp, #16]
 800a1ee:	2101      	movs	r1, #1
 800a1f0:	441a      	add	r2, r3
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	4498      	add	r8, r3
 800a1f6:	9204      	str	r2, [sp, #16]
 800a1f8:	f000 ff18 	bl	800b02c <__i2b>
 800a1fc:	4607      	mov	r7, r0
 800a1fe:	2d00      	cmp	r5, #0
 800a200:	dd0b      	ble.n	800a21a <_dtoa_r+0x78a>
 800a202:	9b04      	ldr	r3, [sp, #16]
 800a204:	2b00      	cmp	r3, #0
 800a206:	dd08      	ble.n	800a21a <_dtoa_r+0x78a>
 800a208:	42ab      	cmp	r3, r5
 800a20a:	9a04      	ldr	r2, [sp, #16]
 800a20c:	bfa8      	it	ge
 800a20e:	462b      	movge	r3, r5
 800a210:	eba8 0803 	sub.w	r8, r8, r3
 800a214:	1aed      	subs	r5, r5, r3
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	9304      	str	r3, [sp, #16]
 800a21a:	9b06      	ldr	r3, [sp, #24]
 800a21c:	b1fb      	cbz	r3, 800a25e <_dtoa_r+0x7ce>
 800a21e:	9b08      	ldr	r3, [sp, #32]
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 809f 	beq.w	800a364 <_dtoa_r+0x8d4>
 800a226:	2e00      	cmp	r6, #0
 800a228:	dd11      	ble.n	800a24e <_dtoa_r+0x7be>
 800a22a:	4639      	mov	r1, r7
 800a22c:	4632      	mov	r2, r6
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 ffb8 	bl	800b1a4 <__pow5mult>
 800a234:	465a      	mov	r2, fp
 800a236:	4601      	mov	r1, r0
 800a238:	4607      	mov	r7, r0
 800a23a:	4620      	mov	r0, r4
 800a23c:	f000 ff0c 	bl	800b058 <__multiply>
 800a240:	4659      	mov	r1, fp
 800a242:	9007      	str	r0, [sp, #28]
 800a244:	4620      	mov	r0, r4
 800a246:	f000 fdeb 	bl	800ae20 <_Bfree>
 800a24a:	9b07      	ldr	r3, [sp, #28]
 800a24c:	469b      	mov	fp, r3
 800a24e:	9b06      	ldr	r3, [sp, #24]
 800a250:	1b9a      	subs	r2, r3, r6
 800a252:	d004      	beq.n	800a25e <_dtoa_r+0x7ce>
 800a254:	4659      	mov	r1, fp
 800a256:	4620      	mov	r0, r4
 800a258:	f000 ffa4 	bl	800b1a4 <__pow5mult>
 800a25c:	4683      	mov	fp, r0
 800a25e:	2101      	movs	r1, #1
 800a260:	4620      	mov	r0, r4
 800a262:	f000 fee3 	bl	800b02c <__i2b>
 800a266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a268:	2b00      	cmp	r3, #0
 800a26a:	4606      	mov	r6, r0
 800a26c:	dd7c      	ble.n	800a368 <_dtoa_r+0x8d8>
 800a26e:	461a      	mov	r2, r3
 800a270:	4601      	mov	r1, r0
 800a272:	4620      	mov	r0, r4
 800a274:	f000 ff96 	bl	800b1a4 <__pow5mult>
 800a278:	9b05      	ldr	r3, [sp, #20]
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	4606      	mov	r6, r0
 800a27e:	dd76      	ble.n	800a36e <_dtoa_r+0x8de>
 800a280:	2300      	movs	r3, #0
 800a282:	9306      	str	r3, [sp, #24]
 800a284:	6933      	ldr	r3, [r6, #16]
 800a286:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a28a:	6918      	ldr	r0, [r3, #16]
 800a28c:	f000 fe7e 	bl	800af8c <__hi0bits>
 800a290:	f1c0 0020 	rsb	r0, r0, #32
 800a294:	9b04      	ldr	r3, [sp, #16]
 800a296:	4418      	add	r0, r3
 800a298:	f010 001f 	ands.w	r0, r0, #31
 800a29c:	f000 8086 	beq.w	800a3ac <_dtoa_r+0x91c>
 800a2a0:	f1c0 0320 	rsb	r3, r0, #32
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	dd7f      	ble.n	800a3a8 <_dtoa_r+0x918>
 800a2a8:	f1c0 001c 	rsb	r0, r0, #28
 800a2ac:	9b04      	ldr	r3, [sp, #16]
 800a2ae:	4403      	add	r3, r0
 800a2b0:	4480      	add	r8, r0
 800a2b2:	4405      	add	r5, r0
 800a2b4:	9304      	str	r3, [sp, #16]
 800a2b6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ba:	dd05      	ble.n	800a2c8 <_dtoa_r+0x838>
 800a2bc:	4659      	mov	r1, fp
 800a2be:	4642      	mov	r2, r8
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f000 ffc9 	bl	800b258 <__lshift>
 800a2c6:	4683      	mov	fp, r0
 800a2c8:	9b04      	ldr	r3, [sp, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	dd05      	ble.n	800a2da <_dtoa_r+0x84a>
 800a2ce:	4631      	mov	r1, r6
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f000 ffc0 	bl	800b258 <__lshift>
 800a2d8:	4606      	mov	r6, r0
 800a2da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d069      	beq.n	800a3b4 <_dtoa_r+0x924>
 800a2e0:	4631      	mov	r1, r6
 800a2e2:	4658      	mov	r0, fp
 800a2e4:	f001 f824 	bl	800b330 <__mcmp>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	da63      	bge.n	800a3b4 <_dtoa_r+0x924>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	4659      	mov	r1, fp
 800a2f0:	220a      	movs	r2, #10
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f000 fdb6 	bl	800ae64 <__multadd>
 800a2f8:	9b08      	ldr	r3, [sp, #32]
 800a2fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2fe:	4683      	mov	fp, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 818f 	beq.w	800a624 <_dtoa_r+0xb94>
 800a306:	4639      	mov	r1, r7
 800a308:	2300      	movs	r3, #0
 800a30a:	220a      	movs	r2, #10
 800a30c:	4620      	mov	r0, r4
 800a30e:	f000 fda9 	bl	800ae64 <__multadd>
 800a312:	f1b9 0f00 	cmp.w	r9, #0
 800a316:	4607      	mov	r7, r0
 800a318:	f300 808e 	bgt.w	800a438 <_dtoa_r+0x9a8>
 800a31c:	9b05      	ldr	r3, [sp, #20]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	dc50      	bgt.n	800a3c4 <_dtoa_r+0x934>
 800a322:	e089      	b.n	800a438 <_dtoa_r+0x9a8>
 800a324:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a326:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a32a:	e75d      	b.n	800a1e8 <_dtoa_r+0x758>
 800a32c:	9b01      	ldr	r3, [sp, #4]
 800a32e:	1e5e      	subs	r6, r3, #1
 800a330:	9b06      	ldr	r3, [sp, #24]
 800a332:	42b3      	cmp	r3, r6
 800a334:	bfbf      	itttt	lt
 800a336:	9b06      	ldrlt	r3, [sp, #24]
 800a338:	9606      	strlt	r6, [sp, #24]
 800a33a:	1af2      	sublt	r2, r6, r3
 800a33c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a33e:	bfb6      	itet	lt
 800a340:	189b      	addlt	r3, r3, r2
 800a342:	1b9e      	subge	r6, r3, r6
 800a344:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a346:	9b01      	ldr	r3, [sp, #4]
 800a348:	bfb8      	it	lt
 800a34a:	2600      	movlt	r6, #0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bfb5      	itete	lt
 800a350:	eba8 0503 	sublt.w	r5, r8, r3
 800a354:	9b01      	ldrge	r3, [sp, #4]
 800a356:	2300      	movlt	r3, #0
 800a358:	4645      	movge	r5, r8
 800a35a:	e747      	b.n	800a1ec <_dtoa_r+0x75c>
 800a35c:	9e06      	ldr	r6, [sp, #24]
 800a35e:	9f08      	ldr	r7, [sp, #32]
 800a360:	4645      	mov	r5, r8
 800a362:	e74c      	b.n	800a1fe <_dtoa_r+0x76e>
 800a364:	9a06      	ldr	r2, [sp, #24]
 800a366:	e775      	b.n	800a254 <_dtoa_r+0x7c4>
 800a368:	9b05      	ldr	r3, [sp, #20]
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	dc18      	bgt.n	800a3a0 <_dtoa_r+0x910>
 800a36e:	9b02      	ldr	r3, [sp, #8]
 800a370:	b9b3      	cbnz	r3, 800a3a0 <_dtoa_r+0x910>
 800a372:	9b03      	ldr	r3, [sp, #12]
 800a374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a378:	b9a3      	cbnz	r3, 800a3a4 <_dtoa_r+0x914>
 800a37a:	9b03      	ldr	r3, [sp, #12]
 800a37c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a380:	0d1b      	lsrs	r3, r3, #20
 800a382:	051b      	lsls	r3, r3, #20
 800a384:	b12b      	cbz	r3, 800a392 <_dtoa_r+0x902>
 800a386:	9b04      	ldr	r3, [sp, #16]
 800a388:	3301      	adds	r3, #1
 800a38a:	9304      	str	r3, [sp, #16]
 800a38c:	f108 0801 	add.w	r8, r8, #1
 800a390:	2301      	movs	r3, #1
 800a392:	9306      	str	r3, [sp, #24]
 800a394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a396:	2b00      	cmp	r3, #0
 800a398:	f47f af74 	bne.w	800a284 <_dtoa_r+0x7f4>
 800a39c:	2001      	movs	r0, #1
 800a39e:	e779      	b.n	800a294 <_dtoa_r+0x804>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	e7f6      	b.n	800a392 <_dtoa_r+0x902>
 800a3a4:	9b02      	ldr	r3, [sp, #8]
 800a3a6:	e7f4      	b.n	800a392 <_dtoa_r+0x902>
 800a3a8:	d085      	beq.n	800a2b6 <_dtoa_r+0x826>
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	301c      	adds	r0, #28
 800a3ae:	e77d      	b.n	800a2ac <_dtoa_r+0x81c>
 800a3b0:	40240000 	.word	0x40240000
 800a3b4:	9b01      	ldr	r3, [sp, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	dc38      	bgt.n	800a42c <_dtoa_r+0x99c>
 800a3ba:	9b05      	ldr	r3, [sp, #20]
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	dd35      	ble.n	800a42c <_dtoa_r+0x99c>
 800a3c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a3c4:	f1b9 0f00 	cmp.w	r9, #0
 800a3c8:	d10d      	bne.n	800a3e6 <_dtoa_r+0x956>
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	464b      	mov	r3, r9
 800a3ce:	2205      	movs	r2, #5
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f000 fd47 	bl	800ae64 <__multadd>
 800a3d6:	4601      	mov	r1, r0
 800a3d8:	4606      	mov	r6, r0
 800a3da:	4658      	mov	r0, fp
 800a3dc:	f000 ffa8 	bl	800b330 <__mcmp>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	f73f adbd 	bgt.w	8009f60 <_dtoa_r+0x4d0>
 800a3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e8:	9d00      	ldr	r5, [sp, #0]
 800a3ea:	ea6f 0a03 	mvn.w	sl, r3
 800a3ee:	f04f 0800 	mov.w	r8, #0
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f000 fd13 	bl	800ae20 <_Bfree>
 800a3fa:	2f00      	cmp	r7, #0
 800a3fc:	f43f aeb4 	beq.w	800a168 <_dtoa_r+0x6d8>
 800a400:	f1b8 0f00 	cmp.w	r8, #0
 800a404:	d005      	beq.n	800a412 <_dtoa_r+0x982>
 800a406:	45b8      	cmp	r8, r7
 800a408:	d003      	beq.n	800a412 <_dtoa_r+0x982>
 800a40a:	4641      	mov	r1, r8
 800a40c:	4620      	mov	r0, r4
 800a40e:	f000 fd07 	bl	800ae20 <_Bfree>
 800a412:	4639      	mov	r1, r7
 800a414:	4620      	mov	r0, r4
 800a416:	f000 fd03 	bl	800ae20 <_Bfree>
 800a41a:	e6a5      	b.n	800a168 <_dtoa_r+0x6d8>
 800a41c:	2600      	movs	r6, #0
 800a41e:	4637      	mov	r7, r6
 800a420:	e7e1      	b.n	800a3e6 <_dtoa_r+0x956>
 800a422:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a424:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a428:	4637      	mov	r7, r6
 800a42a:	e599      	b.n	8009f60 <_dtoa_r+0x4d0>
 800a42c:	9b08      	ldr	r3, [sp, #32]
 800a42e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	f000 80fd 	beq.w	800a632 <_dtoa_r+0xba2>
 800a438:	2d00      	cmp	r5, #0
 800a43a:	dd05      	ble.n	800a448 <_dtoa_r+0x9b8>
 800a43c:	4639      	mov	r1, r7
 800a43e:	462a      	mov	r2, r5
 800a440:	4620      	mov	r0, r4
 800a442:	f000 ff09 	bl	800b258 <__lshift>
 800a446:	4607      	mov	r7, r0
 800a448:	9b06      	ldr	r3, [sp, #24]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d05c      	beq.n	800a508 <_dtoa_r+0xa78>
 800a44e:	6879      	ldr	r1, [r7, #4]
 800a450:	4620      	mov	r0, r4
 800a452:	f000 fca5 	bl	800ada0 <_Balloc>
 800a456:	4605      	mov	r5, r0
 800a458:	b928      	cbnz	r0, 800a466 <_dtoa_r+0x9d6>
 800a45a:	4b80      	ldr	r3, [pc, #512]	; (800a65c <_dtoa_r+0xbcc>)
 800a45c:	4602      	mov	r2, r0
 800a45e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a462:	f7ff bb2e 	b.w	8009ac2 <_dtoa_r+0x32>
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	3202      	adds	r2, #2
 800a46a:	0092      	lsls	r2, r2, #2
 800a46c:	f107 010c 	add.w	r1, r7, #12
 800a470:	300c      	adds	r0, #12
 800a472:	f000 fc87 	bl	800ad84 <memcpy>
 800a476:	2201      	movs	r2, #1
 800a478:	4629      	mov	r1, r5
 800a47a:	4620      	mov	r0, r4
 800a47c:	f000 feec 	bl	800b258 <__lshift>
 800a480:	9b00      	ldr	r3, [sp, #0]
 800a482:	3301      	adds	r3, #1
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	9b00      	ldr	r3, [sp, #0]
 800a488:	444b      	add	r3, r9
 800a48a:	9307      	str	r3, [sp, #28]
 800a48c:	9b02      	ldr	r3, [sp, #8]
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	46b8      	mov	r8, r7
 800a494:	9306      	str	r3, [sp, #24]
 800a496:	4607      	mov	r7, r0
 800a498:	9b01      	ldr	r3, [sp, #4]
 800a49a:	4631      	mov	r1, r6
 800a49c:	3b01      	subs	r3, #1
 800a49e:	4658      	mov	r0, fp
 800a4a0:	9302      	str	r3, [sp, #8]
 800a4a2:	f7ff fa67 	bl	8009974 <quorem>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	3330      	adds	r3, #48	; 0x30
 800a4aa:	9004      	str	r0, [sp, #16]
 800a4ac:	4641      	mov	r1, r8
 800a4ae:	4658      	mov	r0, fp
 800a4b0:	9308      	str	r3, [sp, #32]
 800a4b2:	f000 ff3d 	bl	800b330 <__mcmp>
 800a4b6:	463a      	mov	r2, r7
 800a4b8:	4681      	mov	r9, r0
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f000 ff53 	bl	800b368 <__mdiff>
 800a4c2:	68c2      	ldr	r2, [r0, #12]
 800a4c4:	9b08      	ldr	r3, [sp, #32]
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	bb02      	cbnz	r2, 800a50c <_dtoa_r+0xa7c>
 800a4ca:	4601      	mov	r1, r0
 800a4cc:	4658      	mov	r0, fp
 800a4ce:	f000 ff2f 	bl	800b330 <__mcmp>
 800a4d2:	9b08      	ldr	r3, [sp, #32]
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	4620      	mov	r0, r4
 800a4da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a4de:	f000 fc9f 	bl	800ae20 <_Bfree>
 800a4e2:	9b05      	ldr	r3, [sp, #20]
 800a4e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4e6:	9d01      	ldr	r5, [sp, #4]
 800a4e8:	ea43 0102 	orr.w	r1, r3, r2
 800a4ec:	9b06      	ldr	r3, [sp, #24]
 800a4ee:	430b      	orrs	r3, r1
 800a4f0:	9b08      	ldr	r3, [sp, #32]
 800a4f2:	d10d      	bne.n	800a510 <_dtoa_r+0xa80>
 800a4f4:	2b39      	cmp	r3, #57	; 0x39
 800a4f6:	d029      	beq.n	800a54c <_dtoa_r+0xabc>
 800a4f8:	f1b9 0f00 	cmp.w	r9, #0
 800a4fc:	dd01      	ble.n	800a502 <_dtoa_r+0xa72>
 800a4fe:	9b04      	ldr	r3, [sp, #16]
 800a500:	3331      	adds	r3, #49	; 0x31
 800a502:	9a02      	ldr	r2, [sp, #8]
 800a504:	7013      	strb	r3, [r2, #0]
 800a506:	e774      	b.n	800a3f2 <_dtoa_r+0x962>
 800a508:	4638      	mov	r0, r7
 800a50a:	e7b9      	b.n	800a480 <_dtoa_r+0x9f0>
 800a50c:	2201      	movs	r2, #1
 800a50e:	e7e2      	b.n	800a4d6 <_dtoa_r+0xa46>
 800a510:	f1b9 0f00 	cmp.w	r9, #0
 800a514:	db06      	blt.n	800a524 <_dtoa_r+0xa94>
 800a516:	9905      	ldr	r1, [sp, #20]
 800a518:	ea41 0909 	orr.w	r9, r1, r9
 800a51c:	9906      	ldr	r1, [sp, #24]
 800a51e:	ea59 0101 	orrs.w	r1, r9, r1
 800a522:	d120      	bne.n	800a566 <_dtoa_r+0xad6>
 800a524:	2a00      	cmp	r2, #0
 800a526:	ddec      	ble.n	800a502 <_dtoa_r+0xa72>
 800a528:	4659      	mov	r1, fp
 800a52a:	2201      	movs	r2, #1
 800a52c:	4620      	mov	r0, r4
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	f000 fe92 	bl	800b258 <__lshift>
 800a534:	4631      	mov	r1, r6
 800a536:	4683      	mov	fp, r0
 800a538:	f000 fefa 	bl	800b330 <__mcmp>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	9b01      	ldr	r3, [sp, #4]
 800a540:	dc02      	bgt.n	800a548 <_dtoa_r+0xab8>
 800a542:	d1de      	bne.n	800a502 <_dtoa_r+0xa72>
 800a544:	07da      	lsls	r2, r3, #31
 800a546:	d5dc      	bpl.n	800a502 <_dtoa_r+0xa72>
 800a548:	2b39      	cmp	r3, #57	; 0x39
 800a54a:	d1d8      	bne.n	800a4fe <_dtoa_r+0xa6e>
 800a54c:	9a02      	ldr	r2, [sp, #8]
 800a54e:	2339      	movs	r3, #57	; 0x39
 800a550:	7013      	strb	r3, [r2, #0]
 800a552:	462b      	mov	r3, r5
 800a554:	461d      	mov	r5, r3
 800a556:	3b01      	subs	r3, #1
 800a558:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a55c:	2a39      	cmp	r2, #57	; 0x39
 800a55e:	d050      	beq.n	800a602 <_dtoa_r+0xb72>
 800a560:	3201      	adds	r2, #1
 800a562:	701a      	strb	r2, [r3, #0]
 800a564:	e745      	b.n	800a3f2 <_dtoa_r+0x962>
 800a566:	2a00      	cmp	r2, #0
 800a568:	dd03      	ble.n	800a572 <_dtoa_r+0xae2>
 800a56a:	2b39      	cmp	r3, #57	; 0x39
 800a56c:	d0ee      	beq.n	800a54c <_dtoa_r+0xabc>
 800a56e:	3301      	adds	r3, #1
 800a570:	e7c7      	b.n	800a502 <_dtoa_r+0xa72>
 800a572:	9a01      	ldr	r2, [sp, #4]
 800a574:	9907      	ldr	r1, [sp, #28]
 800a576:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a57a:	428a      	cmp	r2, r1
 800a57c:	d02a      	beq.n	800a5d4 <_dtoa_r+0xb44>
 800a57e:	4659      	mov	r1, fp
 800a580:	2300      	movs	r3, #0
 800a582:	220a      	movs	r2, #10
 800a584:	4620      	mov	r0, r4
 800a586:	f000 fc6d 	bl	800ae64 <__multadd>
 800a58a:	45b8      	cmp	r8, r7
 800a58c:	4683      	mov	fp, r0
 800a58e:	f04f 0300 	mov.w	r3, #0
 800a592:	f04f 020a 	mov.w	r2, #10
 800a596:	4641      	mov	r1, r8
 800a598:	4620      	mov	r0, r4
 800a59a:	d107      	bne.n	800a5ac <_dtoa_r+0xb1c>
 800a59c:	f000 fc62 	bl	800ae64 <__multadd>
 800a5a0:	4680      	mov	r8, r0
 800a5a2:	4607      	mov	r7, r0
 800a5a4:	9b01      	ldr	r3, [sp, #4]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	9301      	str	r3, [sp, #4]
 800a5aa:	e775      	b.n	800a498 <_dtoa_r+0xa08>
 800a5ac:	f000 fc5a 	bl	800ae64 <__multadd>
 800a5b0:	4639      	mov	r1, r7
 800a5b2:	4680      	mov	r8, r0
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	220a      	movs	r2, #10
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f000 fc53 	bl	800ae64 <__multadd>
 800a5be:	4607      	mov	r7, r0
 800a5c0:	e7f0      	b.n	800a5a4 <_dtoa_r+0xb14>
 800a5c2:	f1b9 0f00 	cmp.w	r9, #0
 800a5c6:	9a00      	ldr	r2, [sp, #0]
 800a5c8:	bfcc      	ite	gt
 800a5ca:	464d      	movgt	r5, r9
 800a5cc:	2501      	movle	r5, #1
 800a5ce:	4415      	add	r5, r2
 800a5d0:	f04f 0800 	mov.w	r8, #0
 800a5d4:	4659      	mov	r1, fp
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	4620      	mov	r0, r4
 800a5da:	9301      	str	r3, [sp, #4]
 800a5dc:	f000 fe3c 	bl	800b258 <__lshift>
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	4683      	mov	fp, r0
 800a5e4:	f000 fea4 	bl	800b330 <__mcmp>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	dcb2      	bgt.n	800a552 <_dtoa_r+0xac2>
 800a5ec:	d102      	bne.n	800a5f4 <_dtoa_r+0xb64>
 800a5ee:	9b01      	ldr	r3, [sp, #4]
 800a5f0:	07db      	lsls	r3, r3, #31
 800a5f2:	d4ae      	bmi.n	800a552 <_dtoa_r+0xac2>
 800a5f4:	462b      	mov	r3, r5
 800a5f6:	461d      	mov	r5, r3
 800a5f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5fc:	2a30      	cmp	r2, #48	; 0x30
 800a5fe:	d0fa      	beq.n	800a5f6 <_dtoa_r+0xb66>
 800a600:	e6f7      	b.n	800a3f2 <_dtoa_r+0x962>
 800a602:	9a00      	ldr	r2, [sp, #0]
 800a604:	429a      	cmp	r2, r3
 800a606:	d1a5      	bne.n	800a554 <_dtoa_r+0xac4>
 800a608:	f10a 0a01 	add.w	sl, sl, #1
 800a60c:	2331      	movs	r3, #49	; 0x31
 800a60e:	e779      	b.n	800a504 <_dtoa_r+0xa74>
 800a610:	4b13      	ldr	r3, [pc, #76]	; (800a660 <_dtoa_r+0xbd0>)
 800a612:	f7ff baaf 	b.w	8009b74 <_dtoa_r+0xe4>
 800a616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f47f aa86 	bne.w	8009b2a <_dtoa_r+0x9a>
 800a61e:	4b11      	ldr	r3, [pc, #68]	; (800a664 <_dtoa_r+0xbd4>)
 800a620:	f7ff baa8 	b.w	8009b74 <_dtoa_r+0xe4>
 800a624:	f1b9 0f00 	cmp.w	r9, #0
 800a628:	dc03      	bgt.n	800a632 <_dtoa_r+0xba2>
 800a62a:	9b05      	ldr	r3, [sp, #20]
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	f73f aec9 	bgt.w	800a3c4 <_dtoa_r+0x934>
 800a632:	9d00      	ldr	r5, [sp, #0]
 800a634:	4631      	mov	r1, r6
 800a636:	4658      	mov	r0, fp
 800a638:	f7ff f99c 	bl	8009974 <quorem>
 800a63c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a640:	f805 3b01 	strb.w	r3, [r5], #1
 800a644:	9a00      	ldr	r2, [sp, #0]
 800a646:	1aaa      	subs	r2, r5, r2
 800a648:	4591      	cmp	r9, r2
 800a64a:	ddba      	ble.n	800a5c2 <_dtoa_r+0xb32>
 800a64c:	4659      	mov	r1, fp
 800a64e:	2300      	movs	r3, #0
 800a650:	220a      	movs	r2, #10
 800a652:	4620      	mov	r0, r4
 800a654:	f000 fc06 	bl	800ae64 <__multadd>
 800a658:	4683      	mov	fp, r0
 800a65a:	e7eb      	b.n	800a634 <_dtoa_r+0xba4>
 800a65c:	0800f90c 	.word	0x0800f90c
 800a660:	0800f708 	.word	0x0800f708
 800a664:	0800f889 	.word	0x0800f889

0800a668 <rshift>:
 800a668:	6903      	ldr	r3, [r0, #16]
 800a66a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a66e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a672:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a676:	f100 0414 	add.w	r4, r0, #20
 800a67a:	dd45      	ble.n	800a708 <rshift+0xa0>
 800a67c:	f011 011f 	ands.w	r1, r1, #31
 800a680:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a684:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a688:	d10c      	bne.n	800a6a4 <rshift+0x3c>
 800a68a:	f100 0710 	add.w	r7, r0, #16
 800a68e:	4629      	mov	r1, r5
 800a690:	42b1      	cmp	r1, r6
 800a692:	d334      	bcc.n	800a6fe <rshift+0x96>
 800a694:	1a9b      	subs	r3, r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	1eea      	subs	r2, r5, #3
 800a69a:	4296      	cmp	r6, r2
 800a69c:	bf38      	it	cc
 800a69e:	2300      	movcc	r3, #0
 800a6a0:	4423      	add	r3, r4
 800a6a2:	e015      	b.n	800a6d0 <rshift+0x68>
 800a6a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a6a8:	f1c1 0820 	rsb	r8, r1, #32
 800a6ac:	40cf      	lsrs	r7, r1
 800a6ae:	f105 0e04 	add.w	lr, r5, #4
 800a6b2:	46a1      	mov	r9, r4
 800a6b4:	4576      	cmp	r6, lr
 800a6b6:	46f4      	mov	ip, lr
 800a6b8:	d815      	bhi.n	800a6e6 <rshift+0x7e>
 800a6ba:	1a9b      	subs	r3, r3, r2
 800a6bc:	009a      	lsls	r2, r3, #2
 800a6be:	3a04      	subs	r2, #4
 800a6c0:	3501      	adds	r5, #1
 800a6c2:	42ae      	cmp	r6, r5
 800a6c4:	bf38      	it	cc
 800a6c6:	2200      	movcc	r2, #0
 800a6c8:	18a3      	adds	r3, r4, r2
 800a6ca:	50a7      	str	r7, [r4, r2]
 800a6cc:	b107      	cbz	r7, 800a6d0 <rshift+0x68>
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	1b1a      	subs	r2, r3, r4
 800a6d2:	42a3      	cmp	r3, r4
 800a6d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a6d8:	bf08      	it	eq
 800a6da:	2300      	moveq	r3, #0
 800a6dc:	6102      	str	r2, [r0, #16]
 800a6de:	bf08      	it	eq
 800a6e0:	6143      	streq	r3, [r0, #20]
 800a6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6e6:	f8dc c000 	ldr.w	ip, [ip]
 800a6ea:	fa0c fc08 	lsl.w	ip, ip, r8
 800a6ee:	ea4c 0707 	orr.w	r7, ip, r7
 800a6f2:	f849 7b04 	str.w	r7, [r9], #4
 800a6f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6fa:	40cf      	lsrs	r7, r1
 800a6fc:	e7da      	b.n	800a6b4 <rshift+0x4c>
 800a6fe:	f851 cb04 	ldr.w	ip, [r1], #4
 800a702:	f847 cf04 	str.w	ip, [r7, #4]!
 800a706:	e7c3      	b.n	800a690 <rshift+0x28>
 800a708:	4623      	mov	r3, r4
 800a70a:	e7e1      	b.n	800a6d0 <rshift+0x68>

0800a70c <__hexdig_fun>:
 800a70c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a710:	2b09      	cmp	r3, #9
 800a712:	d802      	bhi.n	800a71a <__hexdig_fun+0xe>
 800a714:	3820      	subs	r0, #32
 800a716:	b2c0      	uxtb	r0, r0
 800a718:	4770      	bx	lr
 800a71a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a71e:	2b05      	cmp	r3, #5
 800a720:	d801      	bhi.n	800a726 <__hexdig_fun+0x1a>
 800a722:	3847      	subs	r0, #71	; 0x47
 800a724:	e7f7      	b.n	800a716 <__hexdig_fun+0xa>
 800a726:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a72a:	2b05      	cmp	r3, #5
 800a72c:	d801      	bhi.n	800a732 <__hexdig_fun+0x26>
 800a72e:	3827      	subs	r0, #39	; 0x27
 800a730:	e7f1      	b.n	800a716 <__hexdig_fun+0xa>
 800a732:	2000      	movs	r0, #0
 800a734:	4770      	bx	lr
	...

0800a738 <__gethex>:
 800a738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73c:	ed2d 8b02 	vpush	{d8}
 800a740:	b089      	sub	sp, #36	; 0x24
 800a742:	ee08 0a10 	vmov	s16, r0
 800a746:	9304      	str	r3, [sp, #16]
 800a748:	4bbc      	ldr	r3, [pc, #752]	; (800aa3c <__gethex+0x304>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	4618      	mov	r0, r3
 800a750:	468b      	mov	fp, r1
 800a752:	4690      	mov	r8, r2
 800a754:	f7f5 fd3c 	bl	80001d0 <strlen>
 800a758:	9b01      	ldr	r3, [sp, #4]
 800a75a:	f8db 2000 	ldr.w	r2, [fp]
 800a75e:	4403      	add	r3, r0
 800a760:	4682      	mov	sl, r0
 800a762:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a766:	9305      	str	r3, [sp, #20]
 800a768:	1c93      	adds	r3, r2, #2
 800a76a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a76e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a772:	32fe      	adds	r2, #254	; 0xfe
 800a774:	18d1      	adds	r1, r2, r3
 800a776:	461f      	mov	r7, r3
 800a778:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a77c:	9100      	str	r1, [sp, #0]
 800a77e:	2830      	cmp	r0, #48	; 0x30
 800a780:	d0f8      	beq.n	800a774 <__gethex+0x3c>
 800a782:	f7ff ffc3 	bl	800a70c <__hexdig_fun>
 800a786:	4604      	mov	r4, r0
 800a788:	2800      	cmp	r0, #0
 800a78a:	d13a      	bne.n	800a802 <__gethex+0xca>
 800a78c:	9901      	ldr	r1, [sp, #4]
 800a78e:	4652      	mov	r2, sl
 800a790:	4638      	mov	r0, r7
 800a792:	f001 f9ed 	bl	800bb70 <strncmp>
 800a796:	4605      	mov	r5, r0
 800a798:	2800      	cmp	r0, #0
 800a79a:	d168      	bne.n	800a86e <__gethex+0x136>
 800a79c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a7a0:	eb07 060a 	add.w	r6, r7, sl
 800a7a4:	f7ff ffb2 	bl	800a70c <__hexdig_fun>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d062      	beq.n	800a872 <__gethex+0x13a>
 800a7ac:	4633      	mov	r3, r6
 800a7ae:	7818      	ldrb	r0, [r3, #0]
 800a7b0:	2830      	cmp	r0, #48	; 0x30
 800a7b2:	461f      	mov	r7, r3
 800a7b4:	f103 0301 	add.w	r3, r3, #1
 800a7b8:	d0f9      	beq.n	800a7ae <__gethex+0x76>
 800a7ba:	f7ff ffa7 	bl	800a70c <__hexdig_fun>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	fab0 f480 	clz	r4, r0
 800a7c4:	0964      	lsrs	r4, r4, #5
 800a7c6:	4635      	mov	r5, r6
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	463a      	mov	r2, r7
 800a7cc:	4616      	mov	r6, r2
 800a7ce:	3201      	adds	r2, #1
 800a7d0:	7830      	ldrb	r0, [r6, #0]
 800a7d2:	f7ff ff9b 	bl	800a70c <__hexdig_fun>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d1f8      	bne.n	800a7cc <__gethex+0x94>
 800a7da:	9901      	ldr	r1, [sp, #4]
 800a7dc:	4652      	mov	r2, sl
 800a7de:	4630      	mov	r0, r6
 800a7e0:	f001 f9c6 	bl	800bb70 <strncmp>
 800a7e4:	b980      	cbnz	r0, 800a808 <__gethex+0xd0>
 800a7e6:	b94d      	cbnz	r5, 800a7fc <__gethex+0xc4>
 800a7e8:	eb06 050a 	add.w	r5, r6, sl
 800a7ec:	462a      	mov	r2, r5
 800a7ee:	4616      	mov	r6, r2
 800a7f0:	3201      	adds	r2, #1
 800a7f2:	7830      	ldrb	r0, [r6, #0]
 800a7f4:	f7ff ff8a 	bl	800a70c <__hexdig_fun>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d1f8      	bne.n	800a7ee <__gethex+0xb6>
 800a7fc:	1bad      	subs	r5, r5, r6
 800a7fe:	00ad      	lsls	r5, r5, #2
 800a800:	e004      	b.n	800a80c <__gethex+0xd4>
 800a802:	2400      	movs	r4, #0
 800a804:	4625      	mov	r5, r4
 800a806:	e7e0      	b.n	800a7ca <__gethex+0x92>
 800a808:	2d00      	cmp	r5, #0
 800a80a:	d1f7      	bne.n	800a7fc <__gethex+0xc4>
 800a80c:	7833      	ldrb	r3, [r6, #0]
 800a80e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a812:	2b50      	cmp	r3, #80	; 0x50
 800a814:	d13b      	bne.n	800a88e <__gethex+0x156>
 800a816:	7873      	ldrb	r3, [r6, #1]
 800a818:	2b2b      	cmp	r3, #43	; 0x2b
 800a81a:	d02c      	beq.n	800a876 <__gethex+0x13e>
 800a81c:	2b2d      	cmp	r3, #45	; 0x2d
 800a81e:	d02e      	beq.n	800a87e <__gethex+0x146>
 800a820:	1c71      	adds	r1, r6, #1
 800a822:	f04f 0900 	mov.w	r9, #0
 800a826:	7808      	ldrb	r0, [r1, #0]
 800a828:	f7ff ff70 	bl	800a70c <__hexdig_fun>
 800a82c:	1e43      	subs	r3, r0, #1
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b18      	cmp	r3, #24
 800a832:	d82c      	bhi.n	800a88e <__gethex+0x156>
 800a834:	f1a0 0210 	sub.w	r2, r0, #16
 800a838:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a83c:	f7ff ff66 	bl	800a70c <__hexdig_fun>
 800a840:	1e43      	subs	r3, r0, #1
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b18      	cmp	r3, #24
 800a846:	d91d      	bls.n	800a884 <__gethex+0x14c>
 800a848:	f1b9 0f00 	cmp.w	r9, #0
 800a84c:	d000      	beq.n	800a850 <__gethex+0x118>
 800a84e:	4252      	negs	r2, r2
 800a850:	4415      	add	r5, r2
 800a852:	f8cb 1000 	str.w	r1, [fp]
 800a856:	b1e4      	cbz	r4, 800a892 <__gethex+0x15a>
 800a858:	9b00      	ldr	r3, [sp, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	bf14      	ite	ne
 800a85e:	2700      	movne	r7, #0
 800a860:	2706      	moveq	r7, #6
 800a862:	4638      	mov	r0, r7
 800a864:	b009      	add	sp, #36	; 0x24
 800a866:	ecbd 8b02 	vpop	{d8}
 800a86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86e:	463e      	mov	r6, r7
 800a870:	4625      	mov	r5, r4
 800a872:	2401      	movs	r4, #1
 800a874:	e7ca      	b.n	800a80c <__gethex+0xd4>
 800a876:	f04f 0900 	mov.w	r9, #0
 800a87a:	1cb1      	adds	r1, r6, #2
 800a87c:	e7d3      	b.n	800a826 <__gethex+0xee>
 800a87e:	f04f 0901 	mov.w	r9, #1
 800a882:	e7fa      	b.n	800a87a <__gethex+0x142>
 800a884:	230a      	movs	r3, #10
 800a886:	fb03 0202 	mla	r2, r3, r2, r0
 800a88a:	3a10      	subs	r2, #16
 800a88c:	e7d4      	b.n	800a838 <__gethex+0x100>
 800a88e:	4631      	mov	r1, r6
 800a890:	e7df      	b.n	800a852 <__gethex+0x11a>
 800a892:	1bf3      	subs	r3, r6, r7
 800a894:	3b01      	subs	r3, #1
 800a896:	4621      	mov	r1, r4
 800a898:	2b07      	cmp	r3, #7
 800a89a:	dc0b      	bgt.n	800a8b4 <__gethex+0x17c>
 800a89c:	ee18 0a10 	vmov	r0, s16
 800a8a0:	f000 fa7e 	bl	800ada0 <_Balloc>
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	b940      	cbnz	r0, 800a8ba <__gethex+0x182>
 800a8a8:	4b65      	ldr	r3, [pc, #404]	; (800aa40 <__gethex+0x308>)
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	21de      	movs	r1, #222	; 0xde
 800a8ae:	4865      	ldr	r0, [pc, #404]	; (800aa44 <__gethex+0x30c>)
 800a8b0:	f001 f97e 	bl	800bbb0 <__assert_func>
 800a8b4:	3101      	adds	r1, #1
 800a8b6:	105b      	asrs	r3, r3, #1
 800a8b8:	e7ee      	b.n	800a898 <__gethex+0x160>
 800a8ba:	f100 0914 	add.w	r9, r0, #20
 800a8be:	f04f 0b00 	mov.w	fp, #0
 800a8c2:	f1ca 0301 	rsb	r3, sl, #1
 800a8c6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a8ca:	f8cd b000 	str.w	fp, [sp]
 800a8ce:	9306      	str	r3, [sp, #24]
 800a8d0:	42b7      	cmp	r7, r6
 800a8d2:	d340      	bcc.n	800a956 <__gethex+0x21e>
 800a8d4:	9802      	ldr	r0, [sp, #8]
 800a8d6:	9b00      	ldr	r3, [sp, #0]
 800a8d8:	f840 3b04 	str.w	r3, [r0], #4
 800a8dc:	eba0 0009 	sub.w	r0, r0, r9
 800a8e0:	1080      	asrs	r0, r0, #2
 800a8e2:	0146      	lsls	r6, r0, #5
 800a8e4:	6120      	str	r0, [r4, #16]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 fb50 	bl	800af8c <__hi0bits>
 800a8ec:	1a30      	subs	r0, r6, r0
 800a8ee:	f8d8 6000 	ldr.w	r6, [r8]
 800a8f2:	42b0      	cmp	r0, r6
 800a8f4:	dd63      	ble.n	800a9be <__gethex+0x286>
 800a8f6:	1b87      	subs	r7, r0, r6
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f000 feea 	bl	800b6d4 <__any_on>
 800a900:	4682      	mov	sl, r0
 800a902:	b1a8      	cbz	r0, 800a930 <__gethex+0x1f8>
 800a904:	1e7b      	subs	r3, r7, #1
 800a906:	1159      	asrs	r1, r3, #5
 800a908:	f003 021f 	and.w	r2, r3, #31
 800a90c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a910:	f04f 0a01 	mov.w	sl, #1
 800a914:	fa0a f202 	lsl.w	r2, sl, r2
 800a918:	420a      	tst	r2, r1
 800a91a:	d009      	beq.n	800a930 <__gethex+0x1f8>
 800a91c:	4553      	cmp	r3, sl
 800a91e:	dd05      	ble.n	800a92c <__gethex+0x1f4>
 800a920:	1eb9      	subs	r1, r7, #2
 800a922:	4620      	mov	r0, r4
 800a924:	f000 fed6 	bl	800b6d4 <__any_on>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d145      	bne.n	800a9b8 <__gethex+0x280>
 800a92c:	f04f 0a02 	mov.w	sl, #2
 800a930:	4639      	mov	r1, r7
 800a932:	4620      	mov	r0, r4
 800a934:	f7ff fe98 	bl	800a668 <rshift>
 800a938:	443d      	add	r5, r7
 800a93a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a93e:	42ab      	cmp	r3, r5
 800a940:	da4c      	bge.n	800a9dc <__gethex+0x2a4>
 800a942:	ee18 0a10 	vmov	r0, s16
 800a946:	4621      	mov	r1, r4
 800a948:	f000 fa6a 	bl	800ae20 <_Bfree>
 800a94c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a94e:	2300      	movs	r3, #0
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	27a3      	movs	r7, #163	; 0xa3
 800a954:	e785      	b.n	800a862 <__gethex+0x12a>
 800a956:	1e73      	subs	r3, r6, #1
 800a958:	9a05      	ldr	r2, [sp, #20]
 800a95a:	9303      	str	r3, [sp, #12]
 800a95c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a960:	4293      	cmp	r3, r2
 800a962:	d019      	beq.n	800a998 <__gethex+0x260>
 800a964:	f1bb 0f20 	cmp.w	fp, #32
 800a968:	d107      	bne.n	800a97a <__gethex+0x242>
 800a96a:	9b02      	ldr	r3, [sp, #8]
 800a96c:	9a00      	ldr	r2, [sp, #0]
 800a96e:	f843 2b04 	str.w	r2, [r3], #4
 800a972:	9302      	str	r3, [sp, #8]
 800a974:	2300      	movs	r3, #0
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	469b      	mov	fp, r3
 800a97a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a97e:	f7ff fec5 	bl	800a70c <__hexdig_fun>
 800a982:	9b00      	ldr	r3, [sp, #0]
 800a984:	f000 000f 	and.w	r0, r0, #15
 800a988:	fa00 f00b 	lsl.w	r0, r0, fp
 800a98c:	4303      	orrs	r3, r0
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	f10b 0b04 	add.w	fp, fp, #4
 800a994:	9b03      	ldr	r3, [sp, #12]
 800a996:	e00d      	b.n	800a9b4 <__gethex+0x27c>
 800a998:	9b03      	ldr	r3, [sp, #12]
 800a99a:	9a06      	ldr	r2, [sp, #24]
 800a99c:	4413      	add	r3, r2
 800a99e:	42bb      	cmp	r3, r7
 800a9a0:	d3e0      	bcc.n	800a964 <__gethex+0x22c>
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	9901      	ldr	r1, [sp, #4]
 800a9a6:	9307      	str	r3, [sp, #28]
 800a9a8:	4652      	mov	r2, sl
 800a9aa:	f001 f8e1 	bl	800bb70 <strncmp>
 800a9ae:	9b07      	ldr	r3, [sp, #28]
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d1d7      	bne.n	800a964 <__gethex+0x22c>
 800a9b4:	461e      	mov	r6, r3
 800a9b6:	e78b      	b.n	800a8d0 <__gethex+0x198>
 800a9b8:	f04f 0a03 	mov.w	sl, #3
 800a9bc:	e7b8      	b.n	800a930 <__gethex+0x1f8>
 800a9be:	da0a      	bge.n	800a9d6 <__gethex+0x29e>
 800a9c0:	1a37      	subs	r7, r6, r0
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	ee18 0a10 	vmov	r0, s16
 800a9c8:	463a      	mov	r2, r7
 800a9ca:	f000 fc45 	bl	800b258 <__lshift>
 800a9ce:	1bed      	subs	r5, r5, r7
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	f100 0914 	add.w	r9, r0, #20
 800a9d6:	f04f 0a00 	mov.w	sl, #0
 800a9da:	e7ae      	b.n	800a93a <__gethex+0x202>
 800a9dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a9e0:	42a8      	cmp	r0, r5
 800a9e2:	dd72      	ble.n	800aaca <__gethex+0x392>
 800a9e4:	1b45      	subs	r5, r0, r5
 800a9e6:	42ae      	cmp	r6, r5
 800a9e8:	dc36      	bgt.n	800aa58 <__gethex+0x320>
 800a9ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d02a      	beq.n	800aa48 <__gethex+0x310>
 800a9f2:	2b03      	cmp	r3, #3
 800a9f4:	d02c      	beq.n	800aa50 <__gethex+0x318>
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d115      	bne.n	800aa26 <__gethex+0x2ee>
 800a9fa:	42ae      	cmp	r6, r5
 800a9fc:	d113      	bne.n	800aa26 <__gethex+0x2ee>
 800a9fe:	2e01      	cmp	r6, #1
 800aa00:	d10b      	bne.n	800aa1a <__gethex+0x2e2>
 800aa02:	9a04      	ldr	r2, [sp, #16]
 800aa04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa08:	6013      	str	r3, [r2, #0]
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	6123      	str	r3, [r4, #16]
 800aa0e:	f8c9 3000 	str.w	r3, [r9]
 800aa12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa14:	2762      	movs	r7, #98	; 0x62
 800aa16:	601c      	str	r4, [r3, #0]
 800aa18:	e723      	b.n	800a862 <__gethex+0x12a>
 800aa1a:	1e71      	subs	r1, r6, #1
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f000 fe59 	bl	800b6d4 <__any_on>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d1ed      	bne.n	800aa02 <__gethex+0x2ca>
 800aa26:	ee18 0a10 	vmov	r0, s16
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	f000 f9f8 	bl	800ae20 <_Bfree>
 800aa30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa32:	2300      	movs	r3, #0
 800aa34:	6013      	str	r3, [r2, #0]
 800aa36:	2750      	movs	r7, #80	; 0x50
 800aa38:	e713      	b.n	800a862 <__gethex+0x12a>
 800aa3a:	bf00      	nop
 800aa3c:	0800f988 	.word	0x0800f988
 800aa40:	0800f90c 	.word	0x0800f90c
 800aa44:	0800f91d 	.word	0x0800f91d
 800aa48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1eb      	bne.n	800aa26 <__gethex+0x2ee>
 800aa4e:	e7d8      	b.n	800aa02 <__gethex+0x2ca>
 800aa50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1d5      	bne.n	800aa02 <__gethex+0x2ca>
 800aa56:	e7e6      	b.n	800aa26 <__gethex+0x2ee>
 800aa58:	1e6f      	subs	r7, r5, #1
 800aa5a:	f1ba 0f00 	cmp.w	sl, #0
 800aa5e:	d131      	bne.n	800aac4 <__gethex+0x38c>
 800aa60:	b127      	cbz	r7, 800aa6c <__gethex+0x334>
 800aa62:	4639      	mov	r1, r7
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fe35 	bl	800b6d4 <__any_on>
 800aa6a:	4682      	mov	sl, r0
 800aa6c:	117b      	asrs	r3, r7, #5
 800aa6e:	2101      	movs	r1, #1
 800aa70:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aa74:	f007 071f 	and.w	r7, r7, #31
 800aa78:	fa01 f707 	lsl.w	r7, r1, r7
 800aa7c:	421f      	tst	r7, r3
 800aa7e:	4629      	mov	r1, r5
 800aa80:	4620      	mov	r0, r4
 800aa82:	bf18      	it	ne
 800aa84:	f04a 0a02 	orrne.w	sl, sl, #2
 800aa88:	1b76      	subs	r6, r6, r5
 800aa8a:	f7ff fded 	bl	800a668 <rshift>
 800aa8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa92:	2702      	movs	r7, #2
 800aa94:	f1ba 0f00 	cmp.w	sl, #0
 800aa98:	d048      	beq.n	800ab2c <__gethex+0x3f4>
 800aa9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d015      	beq.n	800aace <__gethex+0x396>
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d017      	beq.n	800aad6 <__gethex+0x39e>
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d109      	bne.n	800aabe <__gethex+0x386>
 800aaaa:	f01a 0f02 	tst.w	sl, #2
 800aaae:	d006      	beq.n	800aabe <__gethex+0x386>
 800aab0:	f8d9 0000 	ldr.w	r0, [r9]
 800aab4:	ea4a 0a00 	orr.w	sl, sl, r0
 800aab8:	f01a 0f01 	tst.w	sl, #1
 800aabc:	d10e      	bne.n	800aadc <__gethex+0x3a4>
 800aabe:	f047 0710 	orr.w	r7, r7, #16
 800aac2:	e033      	b.n	800ab2c <__gethex+0x3f4>
 800aac4:	f04f 0a01 	mov.w	sl, #1
 800aac8:	e7d0      	b.n	800aa6c <__gethex+0x334>
 800aaca:	2701      	movs	r7, #1
 800aacc:	e7e2      	b.n	800aa94 <__gethex+0x35c>
 800aace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aad0:	f1c3 0301 	rsb	r3, r3, #1
 800aad4:	9315      	str	r3, [sp, #84]	; 0x54
 800aad6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0f0      	beq.n	800aabe <__gethex+0x386>
 800aadc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aae0:	f104 0314 	add.w	r3, r4, #20
 800aae4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aae8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aaec:	f04f 0c00 	mov.w	ip, #0
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaf6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aafa:	d01c      	beq.n	800ab36 <__gethex+0x3fe>
 800aafc:	3201      	adds	r2, #1
 800aafe:	6002      	str	r2, [r0, #0]
 800ab00:	2f02      	cmp	r7, #2
 800ab02:	f104 0314 	add.w	r3, r4, #20
 800ab06:	d13f      	bne.n	800ab88 <__gethex+0x450>
 800ab08:	f8d8 2000 	ldr.w	r2, [r8]
 800ab0c:	3a01      	subs	r2, #1
 800ab0e:	42b2      	cmp	r2, r6
 800ab10:	d10a      	bne.n	800ab28 <__gethex+0x3f0>
 800ab12:	1171      	asrs	r1, r6, #5
 800ab14:	2201      	movs	r2, #1
 800ab16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab1a:	f006 061f 	and.w	r6, r6, #31
 800ab1e:	fa02 f606 	lsl.w	r6, r2, r6
 800ab22:	421e      	tst	r6, r3
 800ab24:	bf18      	it	ne
 800ab26:	4617      	movne	r7, r2
 800ab28:	f047 0720 	orr.w	r7, r7, #32
 800ab2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab2e:	601c      	str	r4, [r3, #0]
 800ab30:	9b04      	ldr	r3, [sp, #16]
 800ab32:	601d      	str	r5, [r3, #0]
 800ab34:	e695      	b.n	800a862 <__gethex+0x12a>
 800ab36:	4299      	cmp	r1, r3
 800ab38:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab3c:	d8d8      	bhi.n	800aaf0 <__gethex+0x3b8>
 800ab3e:	68a3      	ldr	r3, [r4, #8]
 800ab40:	459b      	cmp	fp, r3
 800ab42:	db19      	blt.n	800ab78 <__gethex+0x440>
 800ab44:	6861      	ldr	r1, [r4, #4]
 800ab46:	ee18 0a10 	vmov	r0, s16
 800ab4a:	3101      	adds	r1, #1
 800ab4c:	f000 f928 	bl	800ada0 <_Balloc>
 800ab50:	4681      	mov	r9, r0
 800ab52:	b918      	cbnz	r0, 800ab5c <__gethex+0x424>
 800ab54:	4b1a      	ldr	r3, [pc, #104]	; (800abc0 <__gethex+0x488>)
 800ab56:	4602      	mov	r2, r0
 800ab58:	2184      	movs	r1, #132	; 0x84
 800ab5a:	e6a8      	b.n	800a8ae <__gethex+0x176>
 800ab5c:	6922      	ldr	r2, [r4, #16]
 800ab5e:	3202      	adds	r2, #2
 800ab60:	f104 010c 	add.w	r1, r4, #12
 800ab64:	0092      	lsls	r2, r2, #2
 800ab66:	300c      	adds	r0, #12
 800ab68:	f000 f90c 	bl	800ad84 <memcpy>
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	ee18 0a10 	vmov	r0, s16
 800ab72:	f000 f955 	bl	800ae20 <_Bfree>
 800ab76:	464c      	mov	r4, r9
 800ab78:	6923      	ldr	r3, [r4, #16]
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab80:	6122      	str	r2, [r4, #16]
 800ab82:	2201      	movs	r2, #1
 800ab84:	615a      	str	r2, [r3, #20]
 800ab86:	e7bb      	b.n	800ab00 <__gethex+0x3c8>
 800ab88:	6922      	ldr	r2, [r4, #16]
 800ab8a:	455a      	cmp	r2, fp
 800ab8c:	dd0b      	ble.n	800aba6 <__gethex+0x46e>
 800ab8e:	2101      	movs	r1, #1
 800ab90:	4620      	mov	r0, r4
 800ab92:	f7ff fd69 	bl	800a668 <rshift>
 800ab96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab9a:	3501      	adds	r5, #1
 800ab9c:	42ab      	cmp	r3, r5
 800ab9e:	f6ff aed0 	blt.w	800a942 <__gethex+0x20a>
 800aba2:	2701      	movs	r7, #1
 800aba4:	e7c0      	b.n	800ab28 <__gethex+0x3f0>
 800aba6:	f016 061f 	ands.w	r6, r6, #31
 800abaa:	d0fa      	beq.n	800aba2 <__gethex+0x46a>
 800abac:	449a      	add	sl, r3
 800abae:	f1c6 0620 	rsb	r6, r6, #32
 800abb2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800abb6:	f000 f9e9 	bl	800af8c <__hi0bits>
 800abba:	42b0      	cmp	r0, r6
 800abbc:	dbe7      	blt.n	800ab8e <__gethex+0x456>
 800abbe:	e7f0      	b.n	800aba2 <__gethex+0x46a>
 800abc0:	0800f90c 	.word	0x0800f90c

0800abc4 <L_shift>:
 800abc4:	f1c2 0208 	rsb	r2, r2, #8
 800abc8:	0092      	lsls	r2, r2, #2
 800abca:	b570      	push	{r4, r5, r6, lr}
 800abcc:	f1c2 0620 	rsb	r6, r2, #32
 800abd0:	6843      	ldr	r3, [r0, #4]
 800abd2:	6804      	ldr	r4, [r0, #0]
 800abd4:	fa03 f506 	lsl.w	r5, r3, r6
 800abd8:	432c      	orrs	r4, r5
 800abda:	40d3      	lsrs	r3, r2
 800abdc:	6004      	str	r4, [r0, #0]
 800abde:	f840 3f04 	str.w	r3, [r0, #4]!
 800abe2:	4288      	cmp	r0, r1
 800abe4:	d3f4      	bcc.n	800abd0 <L_shift+0xc>
 800abe6:	bd70      	pop	{r4, r5, r6, pc}

0800abe8 <__match>:
 800abe8:	b530      	push	{r4, r5, lr}
 800abea:	6803      	ldr	r3, [r0, #0]
 800abec:	3301      	adds	r3, #1
 800abee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abf2:	b914      	cbnz	r4, 800abfa <__match+0x12>
 800abf4:	6003      	str	r3, [r0, #0]
 800abf6:	2001      	movs	r0, #1
 800abf8:	bd30      	pop	{r4, r5, pc}
 800abfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ac02:	2d19      	cmp	r5, #25
 800ac04:	bf98      	it	ls
 800ac06:	3220      	addls	r2, #32
 800ac08:	42a2      	cmp	r2, r4
 800ac0a:	d0f0      	beq.n	800abee <__match+0x6>
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	e7f3      	b.n	800abf8 <__match+0x10>

0800ac10 <__hexnan>:
 800ac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac14:	680b      	ldr	r3, [r1, #0]
 800ac16:	6801      	ldr	r1, [r0, #0]
 800ac18:	115e      	asrs	r6, r3, #5
 800ac1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac1e:	f013 031f 	ands.w	r3, r3, #31
 800ac22:	b087      	sub	sp, #28
 800ac24:	bf18      	it	ne
 800ac26:	3604      	addne	r6, #4
 800ac28:	2500      	movs	r5, #0
 800ac2a:	1f37      	subs	r7, r6, #4
 800ac2c:	4682      	mov	sl, r0
 800ac2e:	4690      	mov	r8, r2
 800ac30:	9301      	str	r3, [sp, #4]
 800ac32:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac36:	46b9      	mov	r9, r7
 800ac38:	463c      	mov	r4, r7
 800ac3a:	9502      	str	r5, [sp, #8]
 800ac3c:	46ab      	mov	fp, r5
 800ac3e:	784a      	ldrb	r2, [r1, #1]
 800ac40:	1c4b      	adds	r3, r1, #1
 800ac42:	9303      	str	r3, [sp, #12]
 800ac44:	b342      	cbz	r2, 800ac98 <__hexnan+0x88>
 800ac46:	4610      	mov	r0, r2
 800ac48:	9105      	str	r1, [sp, #20]
 800ac4a:	9204      	str	r2, [sp, #16]
 800ac4c:	f7ff fd5e 	bl	800a70c <__hexdig_fun>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d14f      	bne.n	800acf4 <__hexnan+0xe4>
 800ac54:	9a04      	ldr	r2, [sp, #16]
 800ac56:	9905      	ldr	r1, [sp, #20]
 800ac58:	2a20      	cmp	r2, #32
 800ac5a:	d818      	bhi.n	800ac8e <__hexnan+0x7e>
 800ac5c:	9b02      	ldr	r3, [sp, #8]
 800ac5e:	459b      	cmp	fp, r3
 800ac60:	dd13      	ble.n	800ac8a <__hexnan+0x7a>
 800ac62:	454c      	cmp	r4, r9
 800ac64:	d206      	bcs.n	800ac74 <__hexnan+0x64>
 800ac66:	2d07      	cmp	r5, #7
 800ac68:	dc04      	bgt.n	800ac74 <__hexnan+0x64>
 800ac6a:	462a      	mov	r2, r5
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f7ff ffa8 	bl	800abc4 <L_shift>
 800ac74:	4544      	cmp	r4, r8
 800ac76:	d950      	bls.n	800ad1a <__hexnan+0x10a>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	f1a4 0904 	sub.w	r9, r4, #4
 800ac7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac82:	f8cd b008 	str.w	fp, [sp, #8]
 800ac86:	464c      	mov	r4, r9
 800ac88:	461d      	mov	r5, r3
 800ac8a:	9903      	ldr	r1, [sp, #12]
 800ac8c:	e7d7      	b.n	800ac3e <__hexnan+0x2e>
 800ac8e:	2a29      	cmp	r2, #41	; 0x29
 800ac90:	d156      	bne.n	800ad40 <__hexnan+0x130>
 800ac92:	3102      	adds	r1, #2
 800ac94:	f8ca 1000 	str.w	r1, [sl]
 800ac98:	f1bb 0f00 	cmp.w	fp, #0
 800ac9c:	d050      	beq.n	800ad40 <__hexnan+0x130>
 800ac9e:	454c      	cmp	r4, r9
 800aca0:	d206      	bcs.n	800acb0 <__hexnan+0xa0>
 800aca2:	2d07      	cmp	r5, #7
 800aca4:	dc04      	bgt.n	800acb0 <__hexnan+0xa0>
 800aca6:	462a      	mov	r2, r5
 800aca8:	4649      	mov	r1, r9
 800acaa:	4620      	mov	r0, r4
 800acac:	f7ff ff8a 	bl	800abc4 <L_shift>
 800acb0:	4544      	cmp	r4, r8
 800acb2:	d934      	bls.n	800ad1e <__hexnan+0x10e>
 800acb4:	f1a8 0204 	sub.w	r2, r8, #4
 800acb8:	4623      	mov	r3, r4
 800acba:	f853 1b04 	ldr.w	r1, [r3], #4
 800acbe:	f842 1f04 	str.w	r1, [r2, #4]!
 800acc2:	429f      	cmp	r7, r3
 800acc4:	d2f9      	bcs.n	800acba <__hexnan+0xaa>
 800acc6:	1b3b      	subs	r3, r7, r4
 800acc8:	f023 0303 	bic.w	r3, r3, #3
 800accc:	3304      	adds	r3, #4
 800acce:	3401      	adds	r4, #1
 800acd0:	3e03      	subs	r6, #3
 800acd2:	42b4      	cmp	r4, r6
 800acd4:	bf88      	it	hi
 800acd6:	2304      	movhi	r3, #4
 800acd8:	4443      	add	r3, r8
 800acda:	2200      	movs	r2, #0
 800acdc:	f843 2b04 	str.w	r2, [r3], #4
 800ace0:	429f      	cmp	r7, r3
 800ace2:	d2fb      	bcs.n	800acdc <__hexnan+0xcc>
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	b91b      	cbnz	r3, 800acf0 <__hexnan+0xe0>
 800ace8:	4547      	cmp	r7, r8
 800acea:	d127      	bne.n	800ad3c <__hexnan+0x12c>
 800acec:	2301      	movs	r3, #1
 800acee:	603b      	str	r3, [r7, #0]
 800acf0:	2005      	movs	r0, #5
 800acf2:	e026      	b.n	800ad42 <__hexnan+0x132>
 800acf4:	3501      	adds	r5, #1
 800acf6:	2d08      	cmp	r5, #8
 800acf8:	f10b 0b01 	add.w	fp, fp, #1
 800acfc:	dd06      	ble.n	800ad0c <__hexnan+0xfc>
 800acfe:	4544      	cmp	r4, r8
 800ad00:	d9c3      	bls.n	800ac8a <__hexnan+0x7a>
 800ad02:	2300      	movs	r3, #0
 800ad04:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad08:	2501      	movs	r5, #1
 800ad0a:	3c04      	subs	r4, #4
 800ad0c:	6822      	ldr	r2, [r4, #0]
 800ad0e:	f000 000f 	and.w	r0, r0, #15
 800ad12:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ad16:	6022      	str	r2, [r4, #0]
 800ad18:	e7b7      	b.n	800ac8a <__hexnan+0x7a>
 800ad1a:	2508      	movs	r5, #8
 800ad1c:	e7b5      	b.n	800ac8a <__hexnan+0x7a>
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d0df      	beq.n	800ace4 <__hexnan+0xd4>
 800ad24:	f04f 32ff 	mov.w	r2, #4294967295
 800ad28:	f1c3 0320 	rsb	r3, r3, #32
 800ad2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad34:	401a      	ands	r2, r3
 800ad36:	f846 2c04 	str.w	r2, [r6, #-4]
 800ad3a:	e7d3      	b.n	800ace4 <__hexnan+0xd4>
 800ad3c:	3f04      	subs	r7, #4
 800ad3e:	e7d1      	b.n	800ace4 <__hexnan+0xd4>
 800ad40:	2004      	movs	r0, #4
 800ad42:	b007      	add	sp, #28
 800ad44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad48 <_localeconv_r>:
 800ad48:	4800      	ldr	r0, [pc, #0]	; (800ad4c <_localeconv_r+0x4>)
 800ad4a:	4770      	bx	lr
 800ad4c:	2000016c 	.word	0x2000016c

0800ad50 <malloc>:
 800ad50:	4b02      	ldr	r3, [pc, #8]	; (800ad5c <malloc+0xc>)
 800ad52:	4601      	mov	r1, r0
 800ad54:	6818      	ldr	r0, [r3, #0]
 800ad56:	f000 bd3d 	b.w	800b7d4 <_malloc_r>
 800ad5a:	bf00      	nop
 800ad5c:	20000014 	.word	0x20000014

0800ad60 <__ascii_mbtowc>:
 800ad60:	b082      	sub	sp, #8
 800ad62:	b901      	cbnz	r1, 800ad66 <__ascii_mbtowc+0x6>
 800ad64:	a901      	add	r1, sp, #4
 800ad66:	b142      	cbz	r2, 800ad7a <__ascii_mbtowc+0x1a>
 800ad68:	b14b      	cbz	r3, 800ad7e <__ascii_mbtowc+0x1e>
 800ad6a:	7813      	ldrb	r3, [r2, #0]
 800ad6c:	600b      	str	r3, [r1, #0]
 800ad6e:	7812      	ldrb	r2, [r2, #0]
 800ad70:	1e10      	subs	r0, r2, #0
 800ad72:	bf18      	it	ne
 800ad74:	2001      	movne	r0, #1
 800ad76:	b002      	add	sp, #8
 800ad78:	4770      	bx	lr
 800ad7a:	4610      	mov	r0, r2
 800ad7c:	e7fb      	b.n	800ad76 <__ascii_mbtowc+0x16>
 800ad7e:	f06f 0001 	mvn.w	r0, #1
 800ad82:	e7f8      	b.n	800ad76 <__ascii_mbtowc+0x16>

0800ad84 <memcpy>:
 800ad84:	440a      	add	r2, r1
 800ad86:	4291      	cmp	r1, r2
 800ad88:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad8c:	d100      	bne.n	800ad90 <memcpy+0xc>
 800ad8e:	4770      	bx	lr
 800ad90:	b510      	push	{r4, lr}
 800ad92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad9a:	4291      	cmp	r1, r2
 800ad9c:	d1f9      	bne.n	800ad92 <memcpy+0xe>
 800ad9e:	bd10      	pop	{r4, pc}

0800ada0 <_Balloc>:
 800ada0:	b570      	push	{r4, r5, r6, lr}
 800ada2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ada4:	4604      	mov	r4, r0
 800ada6:	460d      	mov	r5, r1
 800ada8:	b976      	cbnz	r6, 800adc8 <_Balloc+0x28>
 800adaa:	2010      	movs	r0, #16
 800adac:	f7ff ffd0 	bl	800ad50 <malloc>
 800adb0:	4602      	mov	r2, r0
 800adb2:	6260      	str	r0, [r4, #36]	; 0x24
 800adb4:	b920      	cbnz	r0, 800adc0 <_Balloc+0x20>
 800adb6:	4b18      	ldr	r3, [pc, #96]	; (800ae18 <_Balloc+0x78>)
 800adb8:	4818      	ldr	r0, [pc, #96]	; (800ae1c <_Balloc+0x7c>)
 800adba:	2166      	movs	r1, #102	; 0x66
 800adbc:	f000 fef8 	bl	800bbb0 <__assert_func>
 800adc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adc4:	6006      	str	r6, [r0, #0]
 800adc6:	60c6      	str	r6, [r0, #12]
 800adc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800adca:	68f3      	ldr	r3, [r6, #12]
 800adcc:	b183      	cbz	r3, 800adf0 <_Balloc+0x50>
 800adce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800add6:	b9b8      	cbnz	r0, 800ae08 <_Balloc+0x68>
 800add8:	2101      	movs	r1, #1
 800adda:	fa01 f605 	lsl.w	r6, r1, r5
 800adde:	1d72      	adds	r2, r6, #5
 800ade0:	0092      	lsls	r2, r2, #2
 800ade2:	4620      	mov	r0, r4
 800ade4:	f000 fc97 	bl	800b716 <_calloc_r>
 800ade8:	b160      	cbz	r0, 800ae04 <_Balloc+0x64>
 800adea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800adee:	e00e      	b.n	800ae0e <_Balloc+0x6e>
 800adf0:	2221      	movs	r2, #33	; 0x21
 800adf2:	2104      	movs	r1, #4
 800adf4:	4620      	mov	r0, r4
 800adf6:	f000 fc8e 	bl	800b716 <_calloc_r>
 800adfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adfc:	60f0      	str	r0, [r6, #12]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1e4      	bne.n	800adce <_Balloc+0x2e>
 800ae04:	2000      	movs	r0, #0
 800ae06:	bd70      	pop	{r4, r5, r6, pc}
 800ae08:	6802      	ldr	r2, [r0, #0]
 800ae0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae14:	e7f7      	b.n	800ae06 <_Balloc+0x66>
 800ae16:	bf00      	nop
 800ae18:	0800f896 	.word	0x0800f896
 800ae1c:	0800f99c 	.word	0x0800f99c

0800ae20 <_Bfree>:
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae24:	4605      	mov	r5, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	b976      	cbnz	r6, 800ae48 <_Bfree+0x28>
 800ae2a:	2010      	movs	r0, #16
 800ae2c:	f7ff ff90 	bl	800ad50 <malloc>
 800ae30:	4602      	mov	r2, r0
 800ae32:	6268      	str	r0, [r5, #36]	; 0x24
 800ae34:	b920      	cbnz	r0, 800ae40 <_Bfree+0x20>
 800ae36:	4b09      	ldr	r3, [pc, #36]	; (800ae5c <_Bfree+0x3c>)
 800ae38:	4809      	ldr	r0, [pc, #36]	; (800ae60 <_Bfree+0x40>)
 800ae3a:	218a      	movs	r1, #138	; 0x8a
 800ae3c:	f000 feb8 	bl	800bbb0 <__assert_func>
 800ae40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae44:	6006      	str	r6, [r0, #0]
 800ae46:	60c6      	str	r6, [r0, #12]
 800ae48:	b13c      	cbz	r4, 800ae5a <_Bfree+0x3a>
 800ae4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae4c:	6862      	ldr	r2, [r4, #4]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae54:	6021      	str	r1, [r4, #0]
 800ae56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae5a:	bd70      	pop	{r4, r5, r6, pc}
 800ae5c:	0800f896 	.word	0x0800f896
 800ae60:	0800f99c 	.word	0x0800f99c

0800ae64 <__multadd>:
 800ae64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae68:	690e      	ldr	r6, [r1, #16]
 800ae6a:	4607      	mov	r7, r0
 800ae6c:	4698      	mov	r8, r3
 800ae6e:	460c      	mov	r4, r1
 800ae70:	f101 0014 	add.w	r0, r1, #20
 800ae74:	2300      	movs	r3, #0
 800ae76:	6805      	ldr	r5, [r0, #0]
 800ae78:	b2a9      	uxth	r1, r5
 800ae7a:	fb02 8101 	mla	r1, r2, r1, r8
 800ae7e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ae82:	0c2d      	lsrs	r5, r5, #16
 800ae84:	fb02 c505 	mla	r5, r2, r5, ip
 800ae88:	b289      	uxth	r1, r1
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ae90:	429e      	cmp	r6, r3
 800ae92:	f840 1b04 	str.w	r1, [r0], #4
 800ae96:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ae9a:	dcec      	bgt.n	800ae76 <__multadd+0x12>
 800ae9c:	f1b8 0f00 	cmp.w	r8, #0
 800aea0:	d022      	beq.n	800aee8 <__multadd+0x84>
 800aea2:	68a3      	ldr	r3, [r4, #8]
 800aea4:	42b3      	cmp	r3, r6
 800aea6:	dc19      	bgt.n	800aedc <__multadd+0x78>
 800aea8:	6861      	ldr	r1, [r4, #4]
 800aeaa:	4638      	mov	r0, r7
 800aeac:	3101      	adds	r1, #1
 800aeae:	f7ff ff77 	bl	800ada0 <_Balloc>
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	b928      	cbnz	r0, 800aec2 <__multadd+0x5e>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	4b0d      	ldr	r3, [pc, #52]	; (800aef0 <__multadd+0x8c>)
 800aeba:	480e      	ldr	r0, [pc, #56]	; (800aef4 <__multadd+0x90>)
 800aebc:	21b5      	movs	r1, #181	; 0xb5
 800aebe:	f000 fe77 	bl	800bbb0 <__assert_func>
 800aec2:	6922      	ldr	r2, [r4, #16]
 800aec4:	3202      	adds	r2, #2
 800aec6:	f104 010c 	add.w	r1, r4, #12
 800aeca:	0092      	lsls	r2, r2, #2
 800aecc:	300c      	adds	r0, #12
 800aece:	f7ff ff59 	bl	800ad84 <memcpy>
 800aed2:	4621      	mov	r1, r4
 800aed4:	4638      	mov	r0, r7
 800aed6:	f7ff ffa3 	bl	800ae20 <_Bfree>
 800aeda:	462c      	mov	r4, r5
 800aedc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800aee0:	3601      	adds	r6, #1
 800aee2:	f8c3 8014 	str.w	r8, [r3, #20]
 800aee6:	6126      	str	r6, [r4, #16]
 800aee8:	4620      	mov	r0, r4
 800aeea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeee:	bf00      	nop
 800aef0:	0800f90c 	.word	0x0800f90c
 800aef4:	0800f99c 	.word	0x0800f99c

0800aef8 <__s2b>:
 800aef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aefc:	460c      	mov	r4, r1
 800aefe:	4615      	mov	r5, r2
 800af00:	461f      	mov	r7, r3
 800af02:	2209      	movs	r2, #9
 800af04:	3308      	adds	r3, #8
 800af06:	4606      	mov	r6, r0
 800af08:	fb93 f3f2 	sdiv	r3, r3, r2
 800af0c:	2100      	movs	r1, #0
 800af0e:	2201      	movs	r2, #1
 800af10:	429a      	cmp	r2, r3
 800af12:	db09      	blt.n	800af28 <__s2b+0x30>
 800af14:	4630      	mov	r0, r6
 800af16:	f7ff ff43 	bl	800ada0 <_Balloc>
 800af1a:	b940      	cbnz	r0, 800af2e <__s2b+0x36>
 800af1c:	4602      	mov	r2, r0
 800af1e:	4b19      	ldr	r3, [pc, #100]	; (800af84 <__s2b+0x8c>)
 800af20:	4819      	ldr	r0, [pc, #100]	; (800af88 <__s2b+0x90>)
 800af22:	21ce      	movs	r1, #206	; 0xce
 800af24:	f000 fe44 	bl	800bbb0 <__assert_func>
 800af28:	0052      	lsls	r2, r2, #1
 800af2a:	3101      	adds	r1, #1
 800af2c:	e7f0      	b.n	800af10 <__s2b+0x18>
 800af2e:	9b08      	ldr	r3, [sp, #32]
 800af30:	6143      	str	r3, [r0, #20]
 800af32:	2d09      	cmp	r5, #9
 800af34:	f04f 0301 	mov.w	r3, #1
 800af38:	6103      	str	r3, [r0, #16]
 800af3a:	dd16      	ble.n	800af6a <__s2b+0x72>
 800af3c:	f104 0909 	add.w	r9, r4, #9
 800af40:	46c8      	mov	r8, r9
 800af42:	442c      	add	r4, r5
 800af44:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af48:	4601      	mov	r1, r0
 800af4a:	3b30      	subs	r3, #48	; 0x30
 800af4c:	220a      	movs	r2, #10
 800af4e:	4630      	mov	r0, r6
 800af50:	f7ff ff88 	bl	800ae64 <__multadd>
 800af54:	45a0      	cmp	r8, r4
 800af56:	d1f5      	bne.n	800af44 <__s2b+0x4c>
 800af58:	f1a5 0408 	sub.w	r4, r5, #8
 800af5c:	444c      	add	r4, r9
 800af5e:	1b2d      	subs	r5, r5, r4
 800af60:	1963      	adds	r3, r4, r5
 800af62:	42bb      	cmp	r3, r7
 800af64:	db04      	blt.n	800af70 <__s2b+0x78>
 800af66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af6a:	340a      	adds	r4, #10
 800af6c:	2509      	movs	r5, #9
 800af6e:	e7f6      	b.n	800af5e <__s2b+0x66>
 800af70:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af74:	4601      	mov	r1, r0
 800af76:	3b30      	subs	r3, #48	; 0x30
 800af78:	220a      	movs	r2, #10
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7ff ff72 	bl	800ae64 <__multadd>
 800af80:	e7ee      	b.n	800af60 <__s2b+0x68>
 800af82:	bf00      	nop
 800af84:	0800f90c 	.word	0x0800f90c
 800af88:	0800f99c 	.word	0x0800f99c

0800af8c <__hi0bits>:
 800af8c:	0c03      	lsrs	r3, r0, #16
 800af8e:	041b      	lsls	r3, r3, #16
 800af90:	b9d3      	cbnz	r3, 800afc8 <__hi0bits+0x3c>
 800af92:	0400      	lsls	r0, r0, #16
 800af94:	2310      	movs	r3, #16
 800af96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af9a:	bf04      	itt	eq
 800af9c:	0200      	lsleq	r0, r0, #8
 800af9e:	3308      	addeq	r3, #8
 800afa0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800afa4:	bf04      	itt	eq
 800afa6:	0100      	lsleq	r0, r0, #4
 800afa8:	3304      	addeq	r3, #4
 800afaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800afae:	bf04      	itt	eq
 800afb0:	0080      	lsleq	r0, r0, #2
 800afb2:	3302      	addeq	r3, #2
 800afb4:	2800      	cmp	r0, #0
 800afb6:	db05      	blt.n	800afc4 <__hi0bits+0x38>
 800afb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afbc:	f103 0301 	add.w	r3, r3, #1
 800afc0:	bf08      	it	eq
 800afc2:	2320      	moveq	r3, #32
 800afc4:	4618      	mov	r0, r3
 800afc6:	4770      	bx	lr
 800afc8:	2300      	movs	r3, #0
 800afca:	e7e4      	b.n	800af96 <__hi0bits+0xa>

0800afcc <__lo0bits>:
 800afcc:	6803      	ldr	r3, [r0, #0]
 800afce:	f013 0207 	ands.w	r2, r3, #7
 800afd2:	4601      	mov	r1, r0
 800afd4:	d00b      	beq.n	800afee <__lo0bits+0x22>
 800afd6:	07da      	lsls	r2, r3, #31
 800afd8:	d424      	bmi.n	800b024 <__lo0bits+0x58>
 800afda:	0798      	lsls	r0, r3, #30
 800afdc:	bf49      	itett	mi
 800afde:	085b      	lsrmi	r3, r3, #1
 800afe0:	089b      	lsrpl	r3, r3, #2
 800afe2:	2001      	movmi	r0, #1
 800afe4:	600b      	strmi	r3, [r1, #0]
 800afe6:	bf5c      	itt	pl
 800afe8:	600b      	strpl	r3, [r1, #0]
 800afea:	2002      	movpl	r0, #2
 800afec:	4770      	bx	lr
 800afee:	b298      	uxth	r0, r3
 800aff0:	b9b0      	cbnz	r0, 800b020 <__lo0bits+0x54>
 800aff2:	0c1b      	lsrs	r3, r3, #16
 800aff4:	2010      	movs	r0, #16
 800aff6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800affa:	bf04      	itt	eq
 800affc:	0a1b      	lsreq	r3, r3, #8
 800affe:	3008      	addeq	r0, #8
 800b000:	071a      	lsls	r2, r3, #28
 800b002:	bf04      	itt	eq
 800b004:	091b      	lsreq	r3, r3, #4
 800b006:	3004      	addeq	r0, #4
 800b008:	079a      	lsls	r2, r3, #30
 800b00a:	bf04      	itt	eq
 800b00c:	089b      	lsreq	r3, r3, #2
 800b00e:	3002      	addeq	r0, #2
 800b010:	07da      	lsls	r2, r3, #31
 800b012:	d403      	bmi.n	800b01c <__lo0bits+0x50>
 800b014:	085b      	lsrs	r3, r3, #1
 800b016:	f100 0001 	add.w	r0, r0, #1
 800b01a:	d005      	beq.n	800b028 <__lo0bits+0x5c>
 800b01c:	600b      	str	r3, [r1, #0]
 800b01e:	4770      	bx	lr
 800b020:	4610      	mov	r0, r2
 800b022:	e7e8      	b.n	800aff6 <__lo0bits+0x2a>
 800b024:	2000      	movs	r0, #0
 800b026:	4770      	bx	lr
 800b028:	2020      	movs	r0, #32
 800b02a:	4770      	bx	lr

0800b02c <__i2b>:
 800b02c:	b510      	push	{r4, lr}
 800b02e:	460c      	mov	r4, r1
 800b030:	2101      	movs	r1, #1
 800b032:	f7ff feb5 	bl	800ada0 <_Balloc>
 800b036:	4602      	mov	r2, r0
 800b038:	b928      	cbnz	r0, 800b046 <__i2b+0x1a>
 800b03a:	4b05      	ldr	r3, [pc, #20]	; (800b050 <__i2b+0x24>)
 800b03c:	4805      	ldr	r0, [pc, #20]	; (800b054 <__i2b+0x28>)
 800b03e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b042:	f000 fdb5 	bl	800bbb0 <__assert_func>
 800b046:	2301      	movs	r3, #1
 800b048:	6144      	str	r4, [r0, #20]
 800b04a:	6103      	str	r3, [r0, #16]
 800b04c:	bd10      	pop	{r4, pc}
 800b04e:	bf00      	nop
 800b050:	0800f90c 	.word	0x0800f90c
 800b054:	0800f99c 	.word	0x0800f99c

0800b058 <__multiply>:
 800b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05c:	4614      	mov	r4, r2
 800b05e:	690a      	ldr	r2, [r1, #16]
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	429a      	cmp	r2, r3
 800b064:	bfb8      	it	lt
 800b066:	460b      	movlt	r3, r1
 800b068:	460d      	mov	r5, r1
 800b06a:	bfbc      	itt	lt
 800b06c:	4625      	movlt	r5, r4
 800b06e:	461c      	movlt	r4, r3
 800b070:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b074:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b078:	68ab      	ldr	r3, [r5, #8]
 800b07a:	6869      	ldr	r1, [r5, #4]
 800b07c:	eb0a 0709 	add.w	r7, sl, r9
 800b080:	42bb      	cmp	r3, r7
 800b082:	b085      	sub	sp, #20
 800b084:	bfb8      	it	lt
 800b086:	3101      	addlt	r1, #1
 800b088:	f7ff fe8a 	bl	800ada0 <_Balloc>
 800b08c:	b930      	cbnz	r0, 800b09c <__multiply+0x44>
 800b08e:	4602      	mov	r2, r0
 800b090:	4b42      	ldr	r3, [pc, #264]	; (800b19c <__multiply+0x144>)
 800b092:	4843      	ldr	r0, [pc, #268]	; (800b1a0 <__multiply+0x148>)
 800b094:	f240 115d 	movw	r1, #349	; 0x15d
 800b098:	f000 fd8a 	bl	800bbb0 <__assert_func>
 800b09c:	f100 0614 	add.w	r6, r0, #20
 800b0a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b0a4:	4633      	mov	r3, r6
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	4543      	cmp	r3, r8
 800b0aa:	d31e      	bcc.n	800b0ea <__multiply+0x92>
 800b0ac:	f105 0c14 	add.w	ip, r5, #20
 800b0b0:	f104 0314 	add.w	r3, r4, #20
 800b0b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b0b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b0bc:	9202      	str	r2, [sp, #8]
 800b0be:	ebac 0205 	sub.w	r2, ip, r5
 800b0c2:	3a15      	subs	r2, #21
 800b0c4:	f022 0203 	bic.w	r2, r2, #3
 800b0c8:	3204      	adds	r2, #4
 800b0ca:	f105 0115 	add.w	r1, r5, #21
 800b0ce:	458c      	cmp	ip, r1
 800b0d0:	bf38      	it	cc
 800b0d2:	2204      	movcc	r2, #4
 800b0d4:	9201      	str	r2, [sp, #4]
 800b0d6:	9a02      	ldr	r2, [sp, #8]
 800b0d8:	9303      	str	r3, [sp, #12]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d808      	bhi.n	800b0f0 <__multiply+0x98>
 800b0de:	2f00      	cmp	r7, #0
 800b0e0:	dc55      	bgt.n	800b18e <__multiply+0x136>
 800b0e2:	6107      	str	r7, [r0, #16]
 800b0e4:	b005      	add	sp, #20
 800b0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ea:	f843 2b04 	str.w	r2, [r3], #4
 800b0ee:	e7db      	b.n	800b0a8 <__multiply+0x50>
 800b0f0:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0f4:	f1ba 0f00 	cmp.w	sl, #0
 800b0f8:	d020      	beq.n	800b13c <__multiply+0xe4>
 800b0fa:	f105 0e14 	add.w	lr, r5, #20
 800b0fe:	46b1      	mov	r9, r6
 800b100:	2200      	movs	r2, #0
 800b102:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b106:	f8d9 b000 	ldr.w	fp, [r9]
 800b10a:	b2a1      	uxth	r1, r4
 800b10c:	fa1f fb8b 	uxth.w	fp, fp
 800b110:	fb0a b101 	mla	r1, sl, r1, fp
 800b114:	4411      	add	r1, r2
 800b116:	f8d9 2000 	ldr.w	r2, [r9]
 800b11a:	0c24      	lsrs	r4, r4, #16
 800b11c:	0c12      	lsrs	r2, r2, #16
 800b11e:	fb0a 2404 	mla	r4, sl, r4, r2
 800b122:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b126:	b289      	uxth	r1, r1
 800b128:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b12c:	45f4      	cmp	ip, lr
 800b12e:	f849 1b04 	str.w	r1, [r9], #4
 800b132:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b136:	d8e4      	bhi.n	800b102 <__multiply+0xaa>
 800b138:	9901      	ldr	r1, [sp, #4]
 800b13a:	5072      	str	r2, [r6, r1]
 800b13c:	9a03      	ldr	r2, [sp, #12]
 800b13e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b142:	3304      	adds	r3, #4
 800b144:	f1b9 0f00 	cmp.w	r9, #0
 800b148:	d01f      	beq.n	800b18a <__multiply+0x132>
 800b14a:	6834      	ldr	r4, [r6, #0]
 800b14c:	f105 0114 	add.w	r1, r5, #20
 800b150:	46b6      	mov	lr, r6
 800b152:	f04f 0a00 	mov.w	sl, #0
 800b156:	880a      	ldrh	r2, [r1, #0]
 800b158:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b15c:	fb09 b202 	mla	r2, r9, r2, fp
 800b160:	4492      	add	sl, r2
 800b162:	b2a4      	uxth	r4, r4
 800b164:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b168:	f84e 4b04 	str.w	r4, [lr], #4
 800b16c:	f851 4b04 	ldr.w	r4, [r1], #4
 800b170:	f8be 2000 	ldrh.w	r2, [lr]
 800b174:	0c24      	lsrs	r4, r4, #16
 800b176:	fb09 2404 	mla	r4, r9, r4, r2
 800b17a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b17e:	458c      	cmp	ip, r1
 800b180:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b184:	d8e7      	bhi.n	800b156 <__multiply+0xfe>
 800b186:	9a01      	ldr	r2, [sp, #4]
 800b188:	50b4      	str	r4, [r6, r2]
 800b18a:	3604      	adds	r6, #4
 800b18c:	e7a3      	b.n	800b0d6 <__multiply+0x7e>
 800b18e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1a5      	bne.n	800b0e2 <__multiply+0x8a>
 800b196:	3f01      	subs	r7, #1
 800b198:	e7a1      	b.n	800b0de <__multiply+0x86>
 800b19a:	bf00      	nop
 800b19c:	0800f90c 	.word	0x0800f90c
 800b1a0:	0800f99c 	.word	0x0800f99c

0800b1a4 <__pow5mult>:
 800b1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1a8:	4615      	mov	r5, r2
 800b1aa:	f012 0203 	ands.w	r2, r2, #3
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	460f      	mov	r7, r1
 800b1b2:	d007      	beq.n	800b1c4 <__pow5mult+0x20>
 800b1b4:	4c25      	ldr	r4, [pc, #148]	; (800b24c <__pow5mult+0xa8>)
 800b1b6:	3a01      	subs	r2, #1
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1be:	f7ff fe51 	bl	800ae64 <__multadd>
 800b1c2:	4607      	mov	r7, r0
 800b1c4:	10ad      	asrs	r5, r5, #2
 800b1c6:	d03d      	beq.n	800b244 <__pow5mult+0xa0>
 800b1c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1ca:	b97c      	cbnz	r4, 800b1ec <__pow5mult+0x48>
 800b1cc:	2010      	movs	r0, #16
 800b1ce:	f7ff fdbf 	bl	800ad50 <malloc>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	6270      	str	r0, [r6, #36]	; 0x24
 800b1d6:	b928      	cbnz	r0, 800b1e4 <__pow5mult+0x40>
 800b1d8:	4b1d      	ldr	r3, [pc, #116]	; (800b250 <__pow5mult+0xac>)
 800b1da:	481e      	ldr	r0, [pc, #120]	; (800b254 <__pow5mult+0xb0>)
 800b1dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1e0:	f000 fce6 	bl	800bbb0 <__assert_func>
 800b1e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1e8:	6004      	str	r4, [r0, #0]
 800b1ea:	60c4      	str	r4, [r0, #12]
 800b1ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1f4:	b94c      	cbnz	r4, 800b20a <__pow5mult+0x66>
 800b1f6:	f240 2171 	movw	r1, #625	; 0x271
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f7ff ff16 	bl	800b02c <__i2b>
 800b200:	2300      	movs	r3, #0
 800b202:	f8c8 0008 	str.w	r0, [r8, #8]
 800b206:	4604      	mov	r4, r0
 800b208:	6003      	str	r3, [r0, #0]
 800b20a:	f04f 0900 	mov.w	r9, #0
 800b20e:	07eb      	lsls	r3, r5, #31
 800b210:	d50a      	bpl.n	800b228 <__pow5mult+0x84>
 800b212:	4639      	mov	r1, r7
 800b214:	4622      	mov	r2, r4
 800b216:	4630      	mov	r0, r6
 800b218:	f7ff ff1e 	bl	800b058 <__multiply>
 800b21c:	4639      	mov	r1, r7
 800b21e:	4680      	mov	r8, r0
 800b220:	4630      	mov	r0, r6
 800b222:	f7ff fdfd 	bl	800ae20 <_Bfree>
 800b226:	4647      	mov	r7, r8
 800b228:	106d      	asrs	r5, r5, #1
 800b22a:	d00b      	beq.n	800b244 <__pow5mult+0xa0>
 800b22c:	6820      	ldr	r0, [r4, #0]
 800b22e:	b938      	cbnz	r0, 800b240 <__pow5mult+0x9c>
 800b230:	4622      	mov	r2, r4
 800b232:	4621      	mov	r1, r4
 800b234:	4630      	mov	r0, r6
 800b236:	f7ff ff0f 	bl	800b058 <__multiply>
 800b23a:	6020      	str	r0, [r4, #0]
 800b23c:	f8c0 9000 	str.w	r9, [r0]
 800b240:	4604      	mov	r4, r0
 800b242:	e7e4      	b.n	800b20e <__pow5mult+0x6a>
 800b244:	4638      	mov	r0, r7
 800b246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24a:	bf00      	nop
 800b24c:	0800faf0 	.word	0x0800faf0
 800b250:	0800f896 	.word	0x0800f896
 800b254:	0800f99c 	.word	0x0800f99c

0800b258 <__lshift>:
 800b258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b25c:	460c      	mov	r4, r1
 800b25e:	6849      	ldr	r1, [r1, #4]
 800b260:	6923      	ldr	r3, [r4, #16]
 800b262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b266:	68a3      	ldr	r3, [r4, #8]
 800b268:	4607      	mov	r7, r0
 800b26a:	4691      	mov	r9, r2
 800b26c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b270:	f108 0601 	add.w	r6, r8, #1
 800b274:	42b3      	cmp	r3, r6
 800b276:	db0b      	blt.n	800b290 <__lshift+0x38>
 800b278:	4638      	mov	r0, r7
 800b27a:	f7ff fd91 	bl	800ada0 <_Balloc>
 800b27e:	4605      	mov	r5, r0
 800b280:	b948      	cbnz	r0, 800b296 <__lshift+0x3e>
 800b282:	4602      	mov	r2, r0
 800b284:	4b28      	ldr	r3, [pc, #160]	; (800b328 <__lshift+0xd0>)
 800b286:	4829      	ldr	r0, [pc, #164]	; (800b32c <__lshift+0xd4>)
 800b288:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b28c:	f000 fc90 	bl	800bbb0 <__assert_func>
 800b290:	3101      	adds	r1, #1
 800b292:	005b      	lsls	r3, r3, #1
 800b294:	e7ee      	b.n	800b274 <__lshift+0x1c>
 800b296:	2300      	movs	r3, #0
 800b298:	f100 0114 	add.w	r1, r0, #20
 800b29c:	f100 0210 	add.w	r2, r0, #16
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	4553      	cmp	r3, sl
 800b2a4:	db33      	blt.n	800b30e <__lshift+0xb6>
 800b2a6:	6920      	ldr	r0, [r4, #16]
 800b2a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2ac:	f104 0314 	add.w	r3, r4, #20
 800b2b0:	f019 091f 	ands.w	r9, r9, #31
 800b2b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2bc:	d02b      	beq.n	800b316 <__lshift+0xbe>
 800b2be:	f1c9 0e20 	rsb	lr, r9, #32
 800b2c2:	468a      	mov	sl, r1
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	6818      	ldr	r0, [r3, #0]
 800b2c8:	fa00 f009 	lsl.w	r0, r0, r9
 800b2cc:	4302      	orrs	r2, r0
 800b2ce:	f84a 2b04 	str.w	r2, [sl], #4
 800b2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2d6:	459c      	cmp	ip, r3
 800b2d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2dc:	d8f3      	bhi.n	800b2c6 <__lshift+0x6e>
 800b2de:	ebac 0304 	sub.w	r3, ip, r4
 800b2e2:	3b15      	subs	r3, #21
 800b2e4:	f023 0303 	bic.w	r3, r3, #3
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	f104 0015 	add.w	r0, r4, #21
 800b2ee:	4584      	cmp	ip, r0
 800b2f0:	bf38      	it	cc
 800b2f2:	2304      	movcc	r3, #4
 800b2f4:	50ca      	str	r2, [r1, r3]
 800b2f6:	b10a      	cbz	r2, 800b2fc <__lshift+0xa4>
 800b2f8:	f108 0602 	add.w	r6, r8, #2
 800b2fc:	3e01      	subs	r6, #1
 800b2fe:	4638      	mov	r0, r7
 800b300:	612e      	str	r6, [r5, #16]
 800b302:	4621      	mov	r1, r4
 800b304:	f7ff fd8c 	bl	800ae20 <_Bfree>
 800b308:	4628      	mov	r0, r5
 800b30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b312:	3301      	adds	r3, #1
 800b314:	e7c5      	b.n	800b2a2 <__lshift+0x4a>
 800b316:	3904      	subs	r1, #4
 800b318:	f853 2b04 	ldr.w	r2, [r3], #4
 800b31c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b320:	459c      	cmp	ip, r3
 800b322:	d8f9      	bhi.n	800b318 <__lshift+0xc0>
 800b324:	e7ea      	b.n	800b2fc <__lshift+0xa4>
 800b326:	bf00      	nop
 800b328:	0800f90c 	.word	0x0800f90c
 800b32c:	0800f99c 	.word	0x0800f99c

0800b330 <__mcmp>:
 800b330:	b530      	push	{r4, r5, lr}
 800b332:	6902      	ldr	r2, [r0, #16]
 800b334:	690c      	ldr	r4, [r1, #16]
 800b336:	1b12      	subs	r2, r2, r4
 800b338:	d10e      	bne.n	800b358 <__mcmp+0x28>
 800b33a:	f100 0314 	add.w	r3, r0, #20
 800b33e:	3114      	adds	r1, #20
 800b340:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b344:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b348:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b34c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b350:	42a5      	cmp	r5, r4
 800b352:	d003      	beq.n	800b35c <__mcmp+0x2c>
 800b354:	d305      	bcc.n	800b362 <__mcmp+0x32>
 800b356:	2201      	movs	r2, #1
 800b358:	4610      	mov	r0, r2
 800b35a:	bd30      	pop	{r4, r5, pc}
 800b35c:	4283      	cmp	r3, r0
 800b35e:	d3f3      	bcc.n	800b348 <__mcmp+0x18>
 800b360:	e7fa      	b.n	800b358 <__mcmp+0x28>
 800b362:	f04f 32ff 	mov.w	r2, #4294967295
 800b366:	e7f7      	b.n	800b358 <__mcmp+0x28>

0800b368 <__mdiff>:
 800b368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	460c      	mov	r4, r1
 800b36e:	4606      	mov	r6, r0
 800b370:	4611      	mov	r1, r2
 800b372:	4620      	mov	r0, r4
 800b374:	4617      	mov	r7, r2
 800b376:	f7ff ffdb 	bl	800b330 <__mcmp>
 800b37a:	1e05      	subs	r5, r0, #0
 800b37c:	d110      	bne.n	800b3a0 <__mdiff+0x38>
 800b37e:	4629      	mov	r1, r5
 800b380:	4630      	mov	r0, r6
 800b382:	f7ff fd0d 	bl	800ada0 <_Balloc>
 800b386:	b930      	cbnz	r0, 800b396 <__mdiff+0x2e>
 800b388:	4b39      	ldr	r3, [pc, #228]	; (800b470 <__mdiff+0x108>)
 800b38a:	4602      	mov	r2, r0
 800b38c:	f240 2132 	movw	r1, #562	; 0x232
 800b390:	4838      	ldr	r0, [pc, #224]	; (800b474 <__mdiff+0x10c>)
 800b392:	f000 fc0d 	bl	800bbb0 <__assert_func>
 800b396:	2301      	movs	r3, #1
 800b398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b39c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a0:	bfa4      	itt	ge
 800b3a2:	463b      	movge	r3, r7
 800b3a4:	4627      	movge	r7, r4
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	6879      	ldr	r1, [r7, #4]
 800b3aa:	bfa6      	itte	ge
 800b3ac:	461c      	movge	r4, r3
 800b3ae:	2500      	movge	r5, #0
 800b3b0:	2501      	movlt	r5, #1
 800b3b2:	f7ff fcf5 	bl	800ada0 <_Balloc>
 800b3b6:	b920      	cbnz	r0, 800b3c2 <__mdiff+0x5a>
 800b3b8:	4b2d      	ldr	r3, [pc, #180]	; (800b470 <__mdiff+0x108>)
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3c0:	e7e6      	b.n	800b390 <__mdiff+0x28>
 800b3c2:	693e      	ldr	r6, [r7, #16]
 800b3c4:	60c5      	str	r5, [r0, #12]
 800b3c6:	6925      	ldr	r5, [r4, #16]
 800b3c8:	f107 0114 	add.w	r1, r7, #20
 800b3cc:	f104 0914 	add.w	r9, r4, #20
 800b3d0:	f100 0e14 	add.w	lr, r0, #20
 800b3d4:	f107 0210 	add.w	r2, r7, #16
 800b3d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b3dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b3e0:	46f2      	mov	sl, lr
 800b3e2:	2700      	movs	r7, #0
 800b3e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3ec:	fa1f f883 	uxth.w	r8, r3
 800b3f0:	fa17 f78b 	uxtah	r7, r7, fp
 800b3f4:	0c1b      	lsrs	r3, r3, #16
 800b3f6:	eba7 0808 	sub.w	r8, r7, r8
 800b3fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b402:	fa1f f888 	uxth.w	r8, r8
 800b406:	141f      	asrs	r7, r3, #16
 800b408:	454d      	cmp	r5, r9
 800b40a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b40e:	f84a 3b04 	str.w	r3, [sl], #4
 800b412:	d8e7      	bhi.n	800b3e4 <__mdiff+0x7c>
 800b414:	1b2b      	subs	r3, r5, r4
 800b416:	3b15      	subs	r3, #21
 800b418:	f023 0303 	bic.w	r3, r3, #3
 800b41c:	3304      	adds	r3, #4
 800b41e:	3415      	adds	r4, #21
 800b420:	42a5      	cmp	r5, r4
 800b422:	bf38      	it	cc
 800b424:	2304      	movcc	r3, #4
 800b426:	4419      	add	r1, r3
 800b428:	4473      	add	r3, lr
 800b42a:	469e      	mov	lr, r3
 800b42c:	460d      	mov	r5, r1
 800b42e:	4565      	cmp	r5, ip
 800b430:	d30e      	bcc.n	800b450 <__mdiff+0xe8>
 800b432:	f10c 0203 	add.w	r2, ip, #3
 800b436:	1a52      	subs	r2, r2, r1
 800b438:	f022 0203 	bic.w	r2, r2, #3
 800b43c:	3903      	subs	r1, #3
 800b43e:	458c      	cmp	ip, r1
 800b440:	bf38      	it	cc
 800b442:	2200      	movcc	r2, #0
 800b444:	441a      	add	r2, r3
 800b446:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b44a:	b17b      	cbz	r3, 800b46c <__mdiff+0x104>
 800b44c:	6106      	str	r6, [r0, #16]
 800b44e:	e7a5      	b.n	800b39c <__mdiff+0x34>
 800b450:	f855 8b04 	ldr.w	r8, [r5], #4
 800b454:	fa17 f488 	uxtah	r4, r7, r8
 800b458:	1422      	asrs	r2, r4, #16
 800b45a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b45e:	b2a4      	uxth	r4, r4
 800b460:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b464:	f84e 4b04 	str.w	r4, [lr], #4
 800b468:	1417      	asrs	r7, r2, #16
 800b46a:	e7e0      	b.n	800b42e <__mdiff+0xc6>
 800b46c:	3e01      	subs	r6, #1
 800b46e:	e7ea      	b.n	800b446 <__mdiff+0xde>
 800b470:	0800f90c 	.word	0x0800f90c
 800b474:	0800f99c 	.word	0x0800f99c

0800b478 <__ulp>:
 800b478:	b082      	sub	sp, #8
 800b47a:	ed8d 0b00 	vstr	d0, [sp]
 800b47e:	9b01      	ldr	r3, [sp, #4]
 800b480:	4912      	ldr	r1, [pc, #72]	; (800b4cc <__ulp+0x54>)
 800b482:	4019      	ands	r1, r3
 800b484:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b488:	2900      	cmp	r1, #0
 800b48a:	dd05      	ble.n	800b498 <__ulp+0x20>
 800b48c:	2200      	movs	r2, #0
 800b48e:	460b      	mov	r3, r1
 800b490:	ec43 2b10 	vmov	d0, r2, r3
 800b494:	b002      	add	sp, #8
 800b496:	4770      	bx	lr
 800b498:	4249      	negs	r1, r1
 800b49a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b49e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b4a2:	f04f 0200 	mov.w	r2, #0
 800b4a6:	f04f 0300 	mov.w	r3, #0
 800b4aa:	da04      	bge.n	800b4b6 <__ulp+0x3e>
 800b4ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b4b0:	fa41 f300 	asr.w	r3, r1, r0
 800b4b4:	e7ec      	b.n	800b490 <__ulp+0x18>
 800b4b6:	f1a0 0114 	sub.w	r1, r0, #20
 800b4ba:	291e      	cmp	r1, #30
 800b4bc:	bfda      	itte	le
 800b4be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b4c2:	fa20 f101 	lsrle.w	r1, r0, r1
 800b4c6:	2101      	movgt	r1, #1
 800b4c8:	460a      	mov	r2, r1
 800b4ca:	e7e1      	b.n	800b490 <__ulp+0x18>
 800b4cc:	7ff00000 	.word	0x7ff00000

0800b4d0 <__b2d>:
 800b4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d2:	6905      	ldr	r5, [r0, #16]
 800b4d4:	f100 0714 	add.w	r7, r0, #20
 800b4d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b4dc:	1f2e      	subs	r6, r5, #4
 800b4de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f7ff fd52 	bl	800af8c <__hi0bits>
 800b4e8:	f1c0 0320 	rsb	r3, r0, #32
 800b4ec:	280a      	cmp	r0, #10
 800b4ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b56c <__b2d+0x9c>
 800b4f2:	600b      	str	r3, [r1, #0]
 800b4f4:	dc14      	bgt.n	800b520 <__b2d+0x50>
 800b4f6:	f1c0 0e0b 	rsb	lr, r0, #11
 800b4fa:	fa24 f10e 	lsr.w	r1, r4, lr
 800b4fe:	42b7      	cmp	r7, r6
 800b500:	ea41 030c 	orr.w	r3, r1, ip
 800b504:	bf34      	ite	cc
 800b506:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b50a:	2100      	movcs	r1, #0
 800b50c:	3015      	adds	r0, #21
 800b50e:	fa04 f000 	lsl.w	r0, r4, r0
 800b512:	fa21 f10e 	lsr.w	r1, r1, lr
 800b516:	ea40 0201 	orr.w	r2, r0, r1
 800b51a:	ec43 2b10 	vmov	d0, r2, r3
 800b51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b520:	42b7      	cmp	r7, r6
 800b522:	bf3a      	itte	cc
 800b524:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b528:	f1a5 0608 	subcc.w	r6, r5, #8
 800b52c:	2100      	movcs	r1, #0
 800b52e:	380b      	subs	r0, #11
 800b530:	d017      	beq.n	800b562 <__b2d+0x92>
 800b532:	f1c0 0c20 	rsb	ip, r0, #32
 800b536:	fa04 f500 	lsl.w	r5, r4, r0
 800b53a:	42be      	cmp	r6, r7
 800b53c:	fa21 f40c 	lsr.w	r4, r1, ip
 800b540:	ea45 0504 	orr.w	r5, r5, r4
 800b544:	bf8c      	ite	hi
 800b546:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b54a:	2400      	movls	r4, #0
 800b54c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b550:	fa01 f000 	lsl.w	r0, r1, r0
 800b554:	fa24 f40c 	lsr.w	r4, r4, ip
 800b558:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b55c:	ea40 0204 	orr.w	r2, r0, r4
 800b560:	e7db      	b.n	800b51a <__b2d+0x4a>
 800b562:	ea44 030c 	orr.w	r3, r4, ip
 800b566:	460a      	mov	r2, r1
 800b568:	e7d7      	b.n	800b51a <__b2d+0x4a>
 800b56a:	bf00      	nop
 800b56c:	3ff00000 	.word	0x3ff00000

0800b570 <__d2b>:
 800b570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b574:	4689      	mov	r9, r1
 800b576:	2101      	movs	r1, #1
 800b578:	ec57 6b10 	vmov	r6, r7, d0
 800b57c:	4690      	mov	r8, r2
 800b57e:	f7ff fc0f 	bl	800ada0 <_Balloc>
 800b582:	4604      	mov	r4, r0
 800b584:	b930      	cbnz	r0, 800b594 <__d2b+0x24>
 800b586:	4602      	mov	r2, r0
 800b588:	4b25      	ldr	r3, [pc, #148]	; (800b620 <__d2b+0xb0>)
 800b58a:	4826      	ldr	r0, [pc, #152]	; (800b624 <__d2b+0xb4>)
 800b58c:	f240 310a 	movw	r1, #778	; 0x30a
 800b590:	f000 fb0e 	bl	800bbb0 <__assert_func>
 800b594:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b59c:	bb35      	cbnz	r5, 800b5ec <__d2b+0x7c>
 800b59e:	2e00      	cmp	r6, #0
 800b5a0:	9301      	str	r3, [sp, #4]
 800b5a2:	d028      	beq.n	800b5f6 <__d2b+0x86>
 800b5a4:	4668      	mov	r0, sp
 800b5a6:	9600      	str	r6, [sp, #0]
 800b5a8:	f7ff fd10 	bl	800afcc <__lo0bits>
 800b5ac:	9900      	ldr	r1, [sp, #0]
 800b5ae:	b300      	cbz	r0, 800b5f2 <__d2b+0x82>
 800b5b0:	9a01      	ldr	r2, [sp, #4]
 800b5b2:	f1c0 0320 	rsb	r3, r0, #32
 800b5b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ba:	430b      	orrs	r3, r1
 800b5bc:	40c2      	lsrs	r2, r0
 800b5be:	6163      	str	r3, [r4, #20]
 800b5c0:	9201      	str	r2, [sp, #4]
 800b5c2:	9b01      	ldr	r3, [sp, #4]
 800b5c4:	61a3      	str	r3, [r4, #24]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	bf14      	ite	ne
 800b5ca:	2202      	movne	r2, #2
 800b5cc:	2201      	moveq	r2, #1
 800b5ce:	6122      	str	r2, [r4, #16]
 800b5d0:	b1d5      	cbz	r5, 800b608 <__d2b+0x98>
 800b5d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5d6:	4405      	add	r5, r0
 800b5d8:	f8c9 5000 	str.w	r5, [r9]
 800b5dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5e0:	f8c8 0000 	str.w	r0, [r8]
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	b003      	add	sp, #12
 800b5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5f0:	e7d5      	b.n	800b59e <__d2b+0x2e>
 800b5f2:	6161      	str	r1, [r4, #20]
 800b5f4:	e7e5      	b.n	800b5c2 <__d2b+0x52>
 800b5f6:	a801      	add	r0, sp, #4
 800b5f8:	f7ff fce8 	bl	800afcc <__lo0bits>
 800b5fc:	9b01      	ldr	r3, [sp, #4]
 800b5fe:	6163      	str	r3, [r4, #20]
 800b600:	2201      	movs	r2, #1
 800b602:	6122      	str	r2, [r4, #16]
 800b604:	3020      	adds	r0, #32
 800b606:	e7e3      	b.n	800b5d0 <__d2b+0x60>
 800b608:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b60c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b610:	f8c9 0000 	str.w	r0, [r9]
 800b614:	6918      	ldr	r0, [r3, #16]
 800b616:	f7ff fcb9 	bl	800af8c <__hi0bits>
 800b61a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b61e:	e7df      	b.n	800b5e0 <__d2b+0x70>
 800b620:	0800f90c 	.word	0x0800f90c
 800b624:	0800f99c 	.word	0x0800f99c

0800b628 <__ratio>:
 800b628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	4688      	mov	r8, r1
 800b62e:	4669      	mov	r1, sp
 800b630:	4681      	mov	r9, r0
 800b632:	f7ff ff4d 	bl	800b4d0 <__b2d>
 800b636:	a901      	add	r1, sp, #4
 800b638:	4640      	mov	r0, r8
 800b63a:	ec55 4b10 	vmov	r4, r5, d0
 800b63e:	f7ff ff47 	bl	800b4d0 <__b2d>
 800b642:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b646:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b64a:	eba3 0c02 	sub.w	ip, r3, r2
 800b64e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b652:	1a9b      	subs	r3, r3, r2
 800b654:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b658:	ec51 0b10 	vmov	r0, r1, d0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	bfd6      	itet	le
 800b660:	460a      	movle	r2, r1
 800b662:	462a      	movgt	r2, r5
 800b664:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b668:	468b      	mov	fp, r1
 800b66a:	462f      	mov	r7, r5
 800b66c:	bfd4      	ite	le
 800b66e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b672:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b676:	4620      	mov	r0, r4
 800b678:	ee10 2a10 	vmov	r2, s0
 800b67c:	465b      	mov	r3, fp
 800b67e:	4639      	mov	r1, r7
 800b680:	f7f5 f8e4 	bl	800084c <__aeabi_ddiv>
 800b684:	ec41 0b10 	vmov	d0, r0, r1
 800b688:	b003      	add	sp, #12
 800b68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b68e <__copybits>:
 800b68e:	3901      	subs	r1, #1
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	1149      	asrs	r1, r1, #5
 800b694:	6914      	ldr	r4, [r2, #16]
 800b696:	3101      	adds	r1, #1
 800b698:	f102 0314 	add.w	r3, r2, #20
 800b69c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b6a4:	1f05      	subs	r5, r0, #4
 800b6a6:	42a3      	cmp	r3, r4
 800b6a8:	d30c      	bcc.n	800b6c4 <__copybits+0x36>
 800b6aa:	1aa3      	subs	r3, r4, r2
 800b6ac:	3b11      	subs	r3, #17
 800b6ae:	f023 0303 	bic.w	r3, r3, #3
 800b6b2:	3211      	adds	r2, #17
 800b6b4:	42a2      	cmp	r2, r4
 800b6b6:	bf88      	it	hi
 800b6b8:	2300      	movhi	r3, #0
 800b6ba:	4418      	add	r0, r3
 800b6bc:	2300      	movs	r3, #0
 800b6be:	4288      	cmp	r0, r1
 800b6c0:	d305      	bcc.n	800b6ce <__copybits+0x40>
 800b6c2:	bd70      	pop	{r4, r5, r6, pc}
 800b6c4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6c8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6cc:	e7eb      	b.n	800b6a6 <__copybits+0x18>
 800b6ce:	f840 3b04 	str.w	r3, [r0], #4
 800b6d2:	e7f4      	b.n	800b6be <__copybits+0x30>

0800b6d4 <__any_on>:
 800b6d4:	f100 0214 	add.w	r2, r0, #20
 800b6d8:	6900      	ldr	r0, [r0, #16]
 800b6da:	114b      	asrs	r3, r1, #5
 800b6dc:	4298      	cmp	r0, r3
 800b6de:	b510      	push	{r4, lr}
 800b6e0:	db11      	blt.n	800b706 <__any_on+0x32>
 800b6e2:	dd0a      	ble.n	800b6fa <__any_on+0x26>
 800b6e4:	f011 011f 	ands.w	r1, r1, #31
 800b6e8:	d007      	beq.n	800b6fa <__any_on+0x26>
 800b6ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6ee:	fa24 f001 	lsr.w	r0, r4, r1
 800b6f2:	fa00 f101 	lsl.w	r1, r0, r1
 800b6f6:	428c      	cmp	r4, r1
 800b6f8:	d10b      	bne.n	800b712 <__any_on+0x3e>
 800b6fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d803      	bhi.n	800b70a <__any_on+0x36>
 800b702:	2000      	movs	r0, #0
 800b704:	bd10      	pop	{r4, pc}
 800b706:	4603      	mov	r3, r0
 800b708:	e7f7      	b.n	800b6fa <__any_on+0x26>
 800b70a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b70e:	2900      	cmp	r1, #0
 800b710:	d0f5      	beq.n	800b6fe <__any_on+0x2a>
 800b712:	2001      	movs	r0, #1
 800b714:	e7f6      	b.n	800b704 <__any_on+0x30>

0800b716 <_calloc_r>:
 800b716:	b513      	push	{r0, r1, r4, lr}
 800b718:	434a      	muls	r2, r1
 800b71a:	4611      	mov	r1, r2
 800b71c:	9201      	str	r2, [sp, #4]
 800b71e:	f000 f859 	bl	800b7d4 <_malloc_r>
 800b722:	4604      	mov	r4, r0
 800b724:	b118      	cbz	r0, 800b72e <_calloc_r+0x18>
 800b726:	9a01      	ldr	r2, [sp, #4]
 800b728:	2100      	movs	r1, #0
 800b72a:	f7fc fbc9 	bl	8007ec0 <memset>
 800b72e:	4620      	mov	r0, r4
 800b730:	b002      	add	sp, #8
 800b732:	bd10      	pop	{r4, pc}

0800b734 <_free_r>:
 800b734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b736:	2900      	cmp	r1, #0
 800b738:	d048      	beq.n	800b7cc <_free_r+0x98>
 800b73a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b73e:	9001      	str	r0, [sp, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	f1a1 0404 	sub.w	r4, r1, #4
 800b746:	bfb8      	it	lt
 800b748:	18e4      	addlt	r4, r4, r3
 800b74a:	f000 fa7b 	bl	800bc44 <__malloc_lock>
 800b74e:	4a20      	ldr	r2, [pc, #128]	; (800b7d0 <_free_r+0x9c>)
 800b750:	9801      	ldr	r0, [sp, #4]
 800b752:	6813      	ldr	r3, [r2, #0]
 800b754:	4615      	mov	r5, r2
 800b756:	b933      	cbnz	r3, 800b766 <_free_r+0x32>
 800b758:	6063      	str	r3, [r4, #4]
 800b75a:	6014      	str	r4, [r2, #0]
 800b75c:	b003      	add	sp, #12
 800b75e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b762:	f000 ba75 	b.w	800bc50 <__malloc_unlock>
 800b766:	42a3      	cmp	r3, r4
 800b768:	d90b      	bls.n	800b782 <_free_r+0x4e>
 800b76a:	6821      	ldr	r1, [r4, #0]
 800b76c:	1862      	adds	r2, r4, r1
 800b76e:	4293      	cmp	r3, r2
 800b770:	bf04      	itt	eq
 800b772:	681a      	ldreq	r2, [r3, #0]
 800b774:	685b      	ldreq	r3, [r3, #4]
 800b776:	6063      	str	r3, [r4, #4]
 800b778:	bf04      	itt	eq
 800b77a:	1852      	addeq	r2, r2, r1
 800b77c:	6022      	streq	r2, [r4, #0]
 800b77e:	602c      	str	r4, [r5, #0]
 800b780:	e7ec      	b.n	800b75c <_free_r+0x28>
 800b782:	461a      	mov	r2, r3
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	b10b      	cbz	r3, 800b78c <_free_r+0x58>
 800b788:	42a3      	cmp	r3, r4
 800b78a:	d9fa      	bls.n	800b782 <_free_r+0x4e>
 800b78c:	6811      	ldr	r1, [r2, #0]
 800b78e:	1855      	adds	r5, r2, r1
 800b790:	42a5      	cmp	r5, r4
 800b792:	d10b      	bne.n	800b7ac <_free_r+0x78>
 800b794:	6824      	ldr	r4, [r4, #0]
 800b796:	4421      	add	r1, r4
 800b798:	1854      	adds	r4, r2, r1
 800b79a:	42a3      	cmp	r3, r4
 800b79c:	6011      	str	r1, [r2, #0]
 800b79e:	d1dd      	bne.n	800b75c <_free_r+0x28>
 800b7a0:	681c      	ldr	r4, [r3, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	6053      	str	r3, [r2, #4]
 800b7a6:	4421      	add	r1, r4
 800b7a8:	6011      	str	r1, [r2, #0]
 800b7aa:	e7d7      	b.n	800b75c <_free_r+0x28>
 800b7ac:	d902      	bls.n	800b7b4 <_free_r+0x80>
 800b7ae:	230c      	movs	r3, #12
 800b7b0:	6003      	str	r3, [r0, #0]
 800b7b2:	e7d3      	b.n	800b75c <_free_r+0x28>
 800b7b4:	6825      	ldr	r5, [r4, #0]
 800b7b6:	1961      	adds	r1, r4, r5
 800b7b8:	428b      	cmp	r3, r1
 800b7ba:	bf04      	itt	eq
 800b7bc:	6819      	ldreq	r1, [r3, #0]
 800b7be:	685b      	ldreq	r3, [r3, #4]
 800b7c0:	6063      	str	r3, [r4, #4]
 800b7c2:	bf04      	itt	eq
 800b7c4:	1949      	addeq	r1, r1, r5
 800b7c6:	6021      	streq	r1, [r4, #0]
 800b7c8:	6054      	str	r4, [r2, #4]
 800b7ca:	e7c7      	b.n	800b75c <_free_r+0x28>
 800b7cc:	b003      	add	sp, #12
 800b7ce:	bd30      	pop	{r4, r5, pc}
 800b7d0:	20000228 	.word	0x20000228

0800b7d4 <_malloc_r>:
 800b7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d6:	1ccd      	adds	r5, r1, #3
 800b7d8:	f025 0503 	bic.w	r5, r5, #3
 800b7dc:	3508      	adds	r5, #8
 800b7de:	2d0c      	cmp	r5, #12
 800b7e0:	bf38      	it	cc
 800b7e2:	250c      	movcc	r5, #12
 800b7e4:	2d00      	cmp	r5, #0
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	db01      	blt.n	800b7ee <_malloc_r+0x1a>
 800b7ea:	42a9      	cmp	r1, r5
 800b7ec:	d903      	bls.n	800b7f6 <_malloc_r+0x22>
 800b7ee:	230c      	movs	r3, #12
 800b7f0:	6033      	str	r3, [r6, #0]
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7f6:	f000 fa25 	bl	800bc44 <__malloc_lock>
 800b7fa:	4921      	ldr	r1, [pc, #132]	; (800b880 <_malloc_r+0xac>)
 800b7fc:	680a      	ldr	r2, [r1, #0]
 800b7fe:	4614      	mov	r4, r2
 800b800:	b99c      	cbnz	r4, 800b82a <_malloc_r+0x56>
 800b802:	4f20      	ldr	r7, [pc, #128]	; (800b884 <_malloc_r+0xb0>)
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	b923      	cbnz	r3, 800b812 <_malloc_r+0x3e>
 800b808:	4621      	mov	r1, r4
 800b80a:	4630      	mov	r0, r6
 800b80c:	f000 f9a0 	bl	800bb50 <_sbrk_r>
 800b810:	6038      	str	r0, [r7, #0]
 800b812:	4629      	mov	r1, r5
 800b814:	4630      	mov	r0, r6
 800b816:	f000 f99b 	bl	800bb50 <_sbrk_r>
 800b81a:	1c43      	adds	r3, r0, #1
 800b81c:	d123      	bne.n	800b866 <_malloc_r+0x92>
 800b81e:	230c      	movs	r3, #12
 800b820:	6033      	str	r3, [r6, #0]
 800b822:	4630      	mov	r0, r6
 800b824:	f000 fa14 	bl	800bc50 <__malloc_unlock>
 800b828:	e7e3      	b.n	800b7f2 <_malloc_r+0x1e>
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	1b5b      	subs	r3, r3, r5
 800b82e:	d417      	bmi.n	800b860 <_malloc_r+0x8c>
 800b830:	2b0b      	cmp	r3, #11
 800b832:	d903      	bls.n	800b83c <_malloc_r+0x68>
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	441c      	add	r4, r3
 800b838:	6025      	str	r5, [r4, #0]
 800b83a:	e004      	b.n	800b846 <_malloc_r+0x72>
 800b83c:	6863      	ldr	r3, [r4, #4]
 800b83e:	42a2      	cmp	r2, r4
 800b840:	bf0c      	ite	eq
 800b842:	600b      	streq	r3, [r1, #0]
 800b844:	6053      	strne	r3, [r2, #4]
 800b846:	4630      	mov	r0, r6
 800b848:	f000 fa02 	bl	800bc50 <__malloc_unlock>
 800b84c:	f104 000b 	add.w	r0, r4, #11
 800b850:	1d23      	adds	r3, r4, #4
 800b852:	f020 0007 	bic.w	r0, r0, #7
 800b856:	1ac2      	subs	r2, r0, r3
 800b858:	d0cc      	beq.n	800b7f4 <_malloc_r+0x20>
 800b85a:	1a1b      	subs	r3, r3, r0
 800b85c:	50a3      	str	r3, [r4, r2]
 800b85e:	e7c9      	b.n	800b7f4 <_malloc_r+0x20>
 800b860:	4622      	mov	r2, r4
 800b862:	6864      	ldr	r4, [r4, #4]
 800b864:	e7cc      	b.n	800b800 <_malloc_r+0x2c>
 800b866:	1cc4      	adds	r4, r0, #3
 800b868:	f024 0403 	bic.w	r4, r4, #3
 800b86c:	42a0      	cmp	r0, r4
 800b86e:	d0e3      	beq.n	800b838 <_malloc_r+0x64>
 800b870:	1a21      	subs	r1, r4, r0
 800b872:	4630      	mov	r0, r6
 800b874:	f000 f96c 	bl	800bb50 <_sbrk_r>
 800b878:	3001      	adds	r0, #1
 800b87a:	d1dd      	bne.n	800b838 <_malloc_r+0x64>
 800b87c:	e7cf      	b.n	800b81e <_malloc_r+0x4a>
 800b87e:	bf00      	nop
 800b880:	20000228 	.word	0x20000228
 800b884:	2000022c 	.word	0x2000022c

0800b888 <__ssputs_r>:
 800b888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b88c:	688e      	ldr	r6, [r1, #8]
 800b88e:	429e      	cmp	r6, r3
 800b890:	4682      	mov	sl, r0
 800b892:	460c      	mov	r4, r1
 800b894:	4690      	mov	r8, r2
 800b896:	461f      	mov	r7, r3
 800b898:	d838      	bhi.n	800b90c <__ssputs_r+0x84>
 800b89a:	898a      	ldrh	r2, [r1, #12]
 800b89c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8a0:	d032      	beq.n	800b908 <__ssputs_r+0x80>
 800b8a2:	6825      	ldr	r5, [r4, #0]
 800b8a4:	6909      	ldr	r1, [r1, #16]
 800b8a6:	eba5 0901 	sub.w	r9, r5, r1
 800b8aa:	6965      	ldr	r5, [r4, #20]
 800b8ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	444b      	add	r3, r9
 800b8b8:	106d      	asrs	r5, r5, #1
 800b8ba:	429d      	cmp	r5, r3
 800b8bc:	bf38      	it	cc
 800b8be:	461d      	movcc	r5, r3
 800b8c0:	0553      	lsls	r3, r2, #21
 800b8c2:	d531      	bpl.n	800b928 <__ssputs_r+0xa0>
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	f7ff ff85 	bl	800b7d4 <_malloc_r>
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	b950      	cbnz	r0, 800b8e4 <__ssputs_r+0x5c>
 800b8ce:	230c      	movs	r3, #12
 800b8d0:	f8ca 3000 	str.w	r3, [sl]
 800b8d4:	89a3      	ldrh	r3, [r4, #12]
 800b8d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8da:	81a3      	strh	r3, [r4, #12]
 800b8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e4:	6921      	ldr	r1, [r4, #16]
 800b8e6:	464a      	mov	r2, r9
 800b8e8:	f7ff fa4c 	bl	800ad84 <memcpy>
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f6:	81a3      	strh	r3, [r4, #12]
 800b8f8:	6126      	str	r6, [r4, #16]
 800b8fa:	6165      	str	r5, [r4, #20]
 800b8fc:	444e      	add	r6, r9
 800b8fe:	eba5 0509 	sub.w	r5, r5, r9
 800b902:	6026      	str	r6, [r4, #0]
 800b904:	60a5      	str	r5, [r4, #8]
 800b906:	463e      	mov	r6, r7
 800b908:	42be      	cmp	r6, r7
 800b90a:	d900      	bls.n	800b90e <__ssputs_r+0x86>
 800b90c:	463e      	mov	r6, r7
 800b90e:	4632      	mov	r2, r6
 800b910:	6820      	ldr	r0, [r4, #0]
 800b912:	4641      	mov	r1, r8
 800b914:	f000 f97c 	bl	800bc10 <memmove>
 800b918:	68a3      	ldr	r3, [r4, #8]
 800b91a:	6822      	ldr	r2, [r4, #0]
 800b91c:	1b9b      	subs	r3, r3, r6
 800b91e:	4432      	add	r2, r6
 800b920:	60a3      	str	r3, [r4, #8]
 800b922:	6022      	str	r2, [r4, #0]
 800b924:	2000      	movs	r0, #0
 800b926:	e7db      	b.n	800b8e0 <__ssputs_r+0x58>
 800b928:	462a      	mov	r2, r5
 800b92a:	f000 f997 	bl	800bc5c <_realloc_r>
 800b92e:	4606      	mov	r6, r0
 800b930:	2800      	cmp	r0, #0
 800b932:	d1e1      	bne.n	800b8f8 <__ssputs_r+0x70>
 800b934:	6921      	ldr	r1, [r4, #16]
 800b936:	4650      	mov	r0, sl
 800b938:	f7ff fefc 	bl	800b734 <_free_r>
 800b93c:	e7c7      	b.n	800b8ce <__ssputs_r+0x46>
	...

0800b940 <_svfiprintf_r>:
 800b940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b944:	4698      	mov	r8, r3
 800b946:	898b      	ldrh	r3, [r1, #12]
 800b948:	061b      	lsls	r3, r3, #24
 800b94a:	b09d      	sub	sp, #116	; 0x74
 800b94c:	4607      	mov	r7, r0
 800b94e:	460d      	mov	r5, r1
 800b950:	4614      	mov	r4, r2
 800b952:	d50e      	bpl.n	800b972 <_svfiprintf_r+0x32>
 800b954:	690b      	ldr	r3, [r1, #16]
 800b956:	b963      	cbnz	r3, 800b972 <_svfiprintf_r+0x32>
 800b958:	2140      	movs	r1, #64	; 0x40
 800b95a:	f7ff ff3b 	bl	800b7d4 <_malloc_r>
 800b95e:	6028      	str	r0, [r5, #0]
 800b960:	6128      	str	r0, [r5, #16]
 800b962:	b920      	cbnz	r0, 800b96e <_svfiprintf_r+0x2e>
 800b964:	230c      	movs	r3, #12
 800b966:	603b      	str	r3, [r7, #0]
 800b968:	f04f 30ff 	mov.w	r0, #4294967295
 800b96c:	e0d1      	b.n	800bb12 <_svfiprintf_r+0x1d2>
 800b96e:	2340      	movs	r3, #64	; 0x40
 800b970:	616b      	str	r3, [r5, #20]
 800b972:	2300      	movs	r3, #0
 800b974:	9309      	str	r3, [sp, #36]	; 0x24
 800b976:	2320      	movs	r3, #32
 800b978:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b97c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b980:	2330      	movs	r3, #48	; 0x30
 800b982:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb2c <_svfiprintf_r+0x1ec>
 800b986:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b98a:	f04f 0901 	mov.w	r9, #1
 800b98e:	4623      	mov	r3, r4
 800b990:	469a      	mov	sl, r3
 800b992:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b996:	b10a      	cbz	r2, 800b99c <_svfiprintf_r+0x5c>
 800b998:	2a25      	cmp	r2, #37	; 0x25
 800b99a:	d1f9      	bne.n	800b990 <_svfiprintf_r+0x50>
 800b99c:	ebba 0b04 	subs.w	fp, sl, r4
 800b9a0:	d00b      	beq.n	800b9ba <_svfiprintf_r+0x7a>
 800b9a2:	465b      	mov	r3, fp
 800b9a4:	4622      	mov	r2, r4
 800b9a6:	4629      	mov	r1, r5
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	f7ff ff6d 	bl	800b888 <__ssputs_r>
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	f000 80aa 	beq.w	800bb08 <_svfiprintf_r+0x1c8>
 800b9b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9b6:	445a      	add	r2, fp
 800b9b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f000 80a2 	beq.w	800bb08 <_svfiprintf_r+0x1c8>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9ce:	f10a 0a01 	add.w	sl, sl, #1
 800b9d2:	9304      	str	r3, [sp, #16]
 800b9d4:	9307      	str	r3, [sp, #28]
 800b9d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9da:	931a      	str	r3, [sp, #104]	; 0x68
 800b9dc:	4654      	mov	r4, sl
 800b9de:	2205      	movs	r2, #5
 800b9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9e4:	4851      	ldr	r0, [pc, #324]	; (800bb2c <_svfiprintf_r+0x1ec>)
 800b9e6:	f7f4 fbfb 	bl	80001e0 <memchr>
 800b9ea:	9a04      	ldr	r2, [sp, #16]
 800b9ec:	b9d8      	cbnz	r0, 800ba26 <_svfiprintf_r+0xe6>
 800b9ee:	06d0      	lsls	r0, r2, #27
 800b9f0:	bf44      	itt	mi
 800b9f2:	2320      	movmi	r3, #32
 800b9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9f8:	0711      	lsls	r1, r2, #28
 800b9fa:	bf44      	itt	mi
 800b9fc:	232b      	movmi	r3, #43	; 0x2b
 800b9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba02:	f89a 3000 	ldrb.w	r3, [sl]
 800ba06:	2b2a      	cmp	r3, #42	; 0x2a
 800ba08:	d015      	beq.n	800ba36 <_svfiprintf_r+0xf6>
 800ba0a:	9a07      	ldr	r2, [sp, #28]
 800ba0c:	4654      	mov	r4, sl
 800ba0e:	2000      	movs	r0, #0
 800ba10:	f04f 0c0a 	mov.w	ip, #10
 800ba14:	4621      	mov	r1, r4
 800ba16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba1a:	3b30      	subs	r3, #48	; 0x30
 800ba1c:	2b09      	cmp	r3, #9
 800ba1e:	d94e      	bls.n	800babe <_svfiprintf_r+0x17e>
 800ba20:	b1b0      	cbz	r0, 800ba50 <_svfiprintf_r+0x110>
 800ba22:	9207      	str	r2, [sp, #28]
 800ba24:	e014      	b.n	800ba50 <_svfiprintf_r+0x110>
 800ba26:	eba0 0308 	sub.w	r3, r0, r8
 800ba2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	9304      	str	r3, [sp, #16]
 800ba32:	46a2      	mov	sl, r4
 800ba34:	e7d2      	b.n	800b9dc <_svfiprintf_r+0x9c>
 800ba36:	9b03      	ldr	r3, [sp, #12]
 800ba38:	1d19      	adds	r1, r3, #4
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	9103      	str	r1, [sp, #12]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	bfbb      	ittet	lt
 800ba42:	425b      	neglt	r3, r3
 800ba44:	f042 0202 	orrlt.w	r2, r2, #2
 800ba48:	9307      	strge	r3, [sp, #28]
 800ba4a:	9307      	strlt	r3, [sp, #28]
 800ba4c:	bfb8      	it	lt
 800ba4e:	9204      	strlt	r2, [sp, #16]
 800ba50:	7823      	ldrb	r3, [r4, #0]
 800ba52:	2b2e      	cmp	r3, #46	; 0x2e
 800ba54:	d10c      	bne.n	800ba70 <_svfiprintf_r+0x130>
 800ba56:	7863      	ldrb	r3, [r4, #1]
 800ba58:	2b2a      	cmp	r3, #42	; 0x2a
 800ba5a:	d135      	bne.n	800bac8 <_svfiprintf_r+0x188>
 800ba5c:	9b03      	ldr	r3, [sp, #12]
 800ba5e:	1d1a      	adds	r2, r3, #4
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	9203      	str	r2, [sp, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	bfb8      	it	lt
 800ba68:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba6c:	3402      	adds	r4, #2
 800ba6e:	9305      	str	r3, [sp, #20]
 800ba70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb3c <_svfiprintf_r+0x1fc>
 800ba74:	7821      	ldrb	r1, [r4, #0]
 800ba76:	2203      	movs	r2, #3
 800ba78:	4650      	mov	r0, sl
 800ba7a:	f7f4 fbb1 	bl	80001e0 <memchr>
 800ba7e:	b140      	cbz	r0, 800ba92 <_svfiprintf_r+0x152>
 800ba80:	2340      	movs	r3, #64	; 0x40
 800ba82:	eba0 000a 	sub.w	r0, r0, sl
 800ba86:	fa03 f000 	lsl.w	r0, r3, r0
 800ba8a:	9b04      	ldr	r3, [sp, #16]
 800ba8c:	4303      	orrs	r3, r0
 800ba8e:	3401      	adds	r4, #1
 800ba90:	9304      	str	r3, [sp, #16]
 800ba92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba96:	4826      	ldr	r0, [pc, #152]	; (800bb30 <_svfiprintf_r+0x1f0>)
 800ba98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba9c:	2206      	movs	r2, #6
 800ba9e:	f7f4 fb9f 	bl	80001e0 <memchr>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	d038      	beq.n	800bb18 <_svfiprintf_r+0x1d8>
 800baa6:	4b23      	ldr	r3, [pc, #140]	; (800bb34 <_svfiprintf_r+0x1f4>)
 800baa8:	bb1b      	cbnz	r3, 800baf2 <_svfiprintf_r+0x1b2>
 800baaa:	9b03      	ldr	r3, [sp, #12]
 800baac:	3307      	adds	r3, #7
 800baae:	f023 0307 	bic.w	r3, r3, #7
 800bab2:	3308      	adds	r3, #8
 800bab4:	9303      	str	r3, [sp, #12]
 800bab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bab8:	4433      	add	r3, r6
 800baba:	9309      	str	r3, [sp, #36]	; 0x24
 800babc:	e767      	b.n	800b98e <_svfiprintf_r+0x4e>
 800babe:	fb0c 3202 	mla	r2, ip, r2, r3
 800bac2:	460c      	mov	r4, r1
 800bac4:	2001      	movs	r0, #1
 800bac6:	e7a5      	b.n	800ba14 <_svfiprintf_r+0xd4>
 800bac8:	2300      	movs	r3, #0
 800baca:	3401      	adds	r4, #1
 800bacc:	9305      	str	r3, [sp, #20]
 800bace:	4619      	mov	r1, r3
 800bad0:	f04f 0c0a 	mov.w	ip, #10
 800bad4:	4620      	mov	r0, r4
 800bad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bada:	3a30      	subs	r2, #48	; 0x30
 800badc:	2a09      	cmp	r2, #9
 800bade:	d903      	bls.n	800bae8 <_svfiprintf_r+0x1a8>
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d0c5      	beq.n	800ba70 <_svfiprintf_r+0x130>
 800bae4:	9105      	str	r1, [sp, #20]
 800bae6:	e7c3      	b.n	800ba70 <_svfiprintf_r+0x130>
 800bae8:	fb0c 2101 	mla	r1, ip, r1, r2
 800baec:	4604      	mov	r4, r0
 800baee:	2301      	movs	r3, #1
 800baf0:	e7f0      	b.n	800bad4 <_svfiprintf_r+0x194>
 800baf2:	ab03      	add	r3, sp, #12
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	462a      	mov	r2, r5
 800baf8:	4b0f      	ldr	r3, [pc, #60]	; (800bb38 <_svfiprintf_r+0x1f8>)
 800bafa:	a904      	add	r1, sp, #16
 800bafc:	4638      	mov	r0, r7
 800bafe:	f7fc fa87 	bl	8008010 <_printf_float>
 800bb02:	1c42      	adds	r2, r0, #1
 800bb04:	4606      	mov	r6, r0
 800bb06:	d1d6      	bne.n	800bab6 <_svfiprintf_r+0x176>
 800bb08:	89ab      	ldrh	r3, [r5, #12]
 800bb0a:	065b      	lsls	r3, r3, #25
 800bb0c:	f53f af2c 	bmi.w	800b968 <_svfiprintf_r+0x28>
 800bb10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb12:	b01d      	add	sp, #116	; 0x74
 800bb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb18:	ab03      	add	r3, sp, #12
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	462a      	mov	r2, r5
 800bb1e:	4b06      	ldr	r3, [pc, #24]	; (800bb38 <_svfiprintf_r+0x1f8>)
 800bb20:	a904      	add	r1, sp, #16
 800bb22:	4638      	mov	r0, r7
 800bb24:	f7fc fd18 	bl	8008558 <_printf_i>
 800bb28:	e7eb      	b.n	800bb02 <_svfiprintf_r+0x1c2>
 800bb2a:	bf00      	nop
 800bb2c:	0800fafc 	.word	0x0800fafc
 800bb30:	0800fb06 	.word	0x0800fb06
 800bb34:	08008011 	.word	0x08008011
 800bb38:	0800b889 	.word	0x0800b889
 800bb3c:	0800fb02 	.word	0x0800fb02

0800bb40 <nan>:
 800bb40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bb48 <nan+0x8>
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	00000000 	.word	0x00000000
 800bb4c:	7ff80000 	.word	0x7ff80000

0800bb50 <_sbrk_r>:
 800bb50:	b538      	push	{r3, r4, r5, lr}
 800bb52:	4d06      	ldr	r5, [pc, #24]	; (800bb6c <_sbrk_r+0x1c>)
 800bb54:	2300      	movs	r3, #0
 800bb56:	4604      	mov	r4, r0
 800bb58:	4608      	mov	r0, r1
 800bb5a:	602b      	str	r3, [r5, #0]
 800bb5c:	f7f6 feb0 	bl	80028c0 <_sbrk>
 800bb60:	1c43      	adds	r3, r0, #1
 800bb62:	d102      	bne.n	800bb6a <_sbrk_r+0x1a>
 800bb64:	682b      	ldr	r3, [r5, #0]
 800bb66:	b103      	cbz	r3, 800bb6a <_sbrk_r+0x1a>
 800bb68:	6023      	str	r3, [r4, #0]
 800bb6a:	bd38      	pop	{r3, r4, r5, pc}
 800bb6c:	200005a0 	.word	0x200005a0

0800bb70 <strncmp>:
 800bb70:	b510      	push	{r4, lr}
 800bb72:	b16a      	cbz	r2, 800bb90 <strncmp+0x20>
 800bb74:	3901      	subs	r1, #1
 800bb76:	1884      	adds	r4, r0, r2
 800bb78:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bb7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d103      	bne.n	800bb8c <strncmp+0x1c>
 800bb84:	42a0      	cmp	r0, r4
 800bb86:	d001      	beq.n	800bb8c <strncmp+0x1c>
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1f5      	bne.n	800bb78 <strncmp+0x8>
 800bb8c:	1a98      	subs	r0, r3, r2
 800bb8e:	bd10      	pop	{r4, pc}
 800bb90:	4610      	mov	r0, r2
 800bb92:	e7fc      	b.n	800bb8e <strncmp+0x1e>

0800bb94 <__ascii_wctomb>:
 800bb94:	b149      	cbz	r1, 800bbaa <__ascii_wctomb+0x16>
 800bb96:	2aff      	cmp	r2, #255	; 0xff
 800bb98:	bf85      	ittet	hi
 800bb9a:	238a      	movhi	r3, #138	; 0x8a
 800bb9c:	6003      	strhi	r3, [r0, #0]
 800bb9e:	700a      	strbls	r2, [r1, #0]
 800bba0:	f04f 30ff 	movhi.w	r0, #4294967295
 800bba4:	bf98      	it	ls
 800bba6:	2001      	movls	r0, #1
 800bba8:	4770      	bx	lr
 800bbaa:	4608      	mov	r0, r1
 800bbac:	4770      	bx	lr
	...

0800bbb0 <__assert_func>:
 800bbb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbb2:	4614      	mov	r4, r2
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	4b09      	ldr	r3, [pc, #36]	; (800bbdc <__assert_func+0x2c>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4605      	mov	r5, r0
 800bbbc:	68d8      	ldr	r0, [r3, #12]
 800bbbe:	b14c      	cbz	r4, 800bbd4 <__assert_func+0x24>
 800bbc0:	4b07      	ldr	r3, [pc, #28]	; (800bbe0 <__assert_func+0x30>)
 800bbc2:	9100      	str	r1, [sp, #0]
 800bbc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbc8:	4906      	ldr	r1, [pc, #24]	; (800bbe4 <__assert_func+0x34>)
 800bbca:	462b      	mov	r3, r5
 800bbcc:	f000 f80e 	bl	800bbec <fiprintf>
 800bbd0:	f000 fa84 	bl	800c0dc <abort>
 800bbd4:	4b04      	ldr	r3, [pc, #16]	; (800bbe8 <__assert_func+0x38>)
 800bbd6:	461c      	mov	r4, r3
 800bbd8:	e7f3      	b.n	800bbc2 <__assert_func+0x12>
 800bbda:	bf00      	nop
 800bbdc:	20000014 	.word	0x20000014
 800bbe0:	0800fb0d 	.word	0x0800fb0d
 800bbe4:	0800fb1a 	.word	0x0800fb1a
 800bbe8:	0800fb48 	.word	0x0800fb48

0800bbec <fiprintf>:
 800bbec:	b40e      	push	{r1, r2, r3}
 800bbee:	b503      	push	{r0, r1, lr}
 800bbf0:	4601      	mov	r1, r0
 800bbf2:	ab03      	add	r3, sp, #12
 800bbf4:	4805      	ldr	r0, [pc, #20]	; (800bc0c <fiprintf+0x20>)
 800bbf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbfa:	6800      	ldr	r0, [r0, #0]
 800bbfc:	9301      	str	r3, [sp, #4]
 800bbfe:	f000 f87d 	bl	800bcfc <_vfiprintf_r>
 800bc02:	b002      	add	sp, #8
 800bc04:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc08:	b003      	add	sp, #12
 800bc0a:	4770      	bx	lr
 800bc0c:	20000014 	.word	0x20000014

0800bc10 <memmove>:
 800bc10:	4288      	cmp	r0, r1
 800bc12:	b510      	push	{r4, lr}
 800bc14:	eb01 0402 	add.w	r4, r1, r2
 800bc18:	d902      	bls.n	800bc20 <memmove+0x10>
 800bc1a:	4284      	cmp	r4, r0
 800bc1c:	4623      	mov	r3, r4
 800bc1e:	d807      	bhi.n	800bc30 <memmove+0x20>
 800bc20:	1e43      	subs	r3, r0, #1
 800bc22:	42a1      	cmp	r1, r4
 800bc24:	d008      	beq.n	800bc38 <memmove+0x28>
 800bc26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc2e:	e7f8      	b.n	800bc22 <memmove+0x12>
 800bc30:	4402      	add	r2, r0
 800bc32:	4601      	mov	r1, r0
 800bc34:	428a      	cmp	r2, r1
 800bc36:	d100      	bne.n	800bc3a <memmove+0x2a>
 800bc38:	bd10      	pop	{r4, pc}
 800bc3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc42:	e7f7      	b.n	800bc34 <memmove+0x24>

0800bc44 <__malloc_lock>:
 800bc44:	4801      	ldr	r0, [pc, #4]	; (800bc4c <__malloc_lock+0x8>)
 800bc46:	f000 bc09 	b.w	800c45c <__retarget_lock_acquire_recursive>
 800bc4a:	bf00      	nop
 800bc4c:	200005a8 	.word	0x200005a8

0800bc50 <__malloc_unlock>:
 800bc50:	4801      	ldr	r0, [pc, #4]	; (800bc58 <__malloc_unlock+0x8>)
 800bc52:	f000 bc04 	b.w	800c45e <__retarget_lock_release_recursive>
 800bc56:	bf00      	nop
 800bc58:	200005a8 	.word	0x200005a8

0800bc5c <_realloc_r>:
 800bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5e:	4607      	mov	r7, r0
 800bc60:	4614      	mov	r4, r2
 800bc62:	460e      	mov	r6, r1
 800bc64:	b921      	cbnz	r1, 800bc70 <_realloc_r+0x14>
 800bc66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	f7ff bdb2 	b.w	800b7d4 <_malloc_r>
 800bc70:	b922      	cbnz	r2, 800bc7c <_realloc_r+0x20>
 800bc72:	f7ff fd5f 	bl	800b734 <_free_r>
 800bc76:	4625      	mov	r5, r4
 800bc78:	4628      	mov	r0, r5
 800bc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc7c:	f000 fc54 	bl	800c528 <_malloc_usable_size_r>
 800bc80:	42a0      	cmp	r0, r4
 800bc82:	d20f      	bcs.n	800bca4 <_realloc_r+0x48>
 800bc84:	4621      	mov	r1, r4
 800bc86:	4638      	mov	r0, r7
 800bc88:	f7ff fda4 	bl	800b7d4 <_malloc_r>
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d0f2      	beq.n	800bc78 <_realloc_r+0x1c>
 800bc92:	4631      	mov	r1, r6
 800bc94:	4622      	mov	r2, r4
 800bc96:	f7ff f875 	bl	800ad84 <memcpy>
 800bc9a:	4631      	mov	r1, r6
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	f7ff fd49 	bl	800b734 <_free_r>
 800bca2:	e7e9      	b.n	800bc78 <_realloc_r+0x1c>
 800bca4:	4635      	mov	r5, r6
 800bca6:	e7e7      	b.n	800bc78 <_realloc_r+0x1c>

0800bca8 <__sfputc_r>:
 800bca8:	6893      	ldr	r3, [r2, #8]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	b410      	push	{r4}
 800bcb0:	6093      	str	r3, [r2, #8]
 800bcb2:	da08      	bge.n	800bcc6 <__sfputc_r+0x1e>
 800bcb4:	6994      	ldr	r4, [r2, #24]
 800bcb6:	42a3      	cmp	r3, r4
 800bcb8:	db01      	blt.n	800bcbe <__sfputc_r+0x16>
 800bcba:	290a      	cmp	r1, #10
 800bcbc:	d103      	bne.n	800bcc6 <__sfputc_r+0x1e>
 800bcbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcc2:	f000 b94b 	b.w	800bf5c <__swbuf_r>
 800bcc6:	6813      	ldr	r3, [r2, #0]
 800bcc8:	1c58      	adds	r0, r3, #1
 800bcca:	6010      	str	r0, [r2, #0]
 800bccc:	7019      	strb	r1, [r3, #0]
 800bcce:	4608      	mov	r0, r1
 800bcd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <__sfputs_r>:
 800bcd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd8:	4606      	mov	r6, r0
 800bcda:	460f      	mov	r7, r1
 800bcdc:	4614      	mov	r4, r2
 800bcde:	18d5      	adds	r5, r2, r3
 800bce0:	42ac      	cmp	r4, r5
 800bce2:	d101      	bne.n	800bce8 <__sfputs_r+0x12>
 800bce4:	2000      	movs	r0, #0
 800bce6:	e007      	b.n	800bcf8 <__sfputs_r+0x22>
 800bce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcec:	463a      	mov	r2, r7
 800bcee:	4630      	mov	r0, r6
 800bcf0:	f7ff ffda 	bl	800bca8 <__sfputc_r>
 800bcf4:	1c43      	adds	r3, r0, #1
 800bcf6:	d1f3      	bne.n	800bce0 <__sfputs_r+0xa>
 800bcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcfc <_vfiprintf_r>:
 800bcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd00:	460d      	mov	r5, r1
 800bd02:	b09d      	sub	sp, #116	; 0x74
 800bd04:	4614      	mov	r4, r2
 800bd06:	4698      	mov	r8, r3
 800bd08:	4606      	mov	r6, r0
 800bd0a:	b118      	cbz	r0, 800bd14 <_vfiprintf_r+0x18>
 800bd0c:	6983      	ldr	r3, [r0, #24]
 800bd0e:	b90b      	cbnz	r3, 800bd14 <_vfiprintf_r+0x18>
 800bd10:	f000 fb06 	bl	800c320 <__sinit>
 800bd14:	4b89      	ldr	r3, [pc, #548]	; (800bf3c <_vfiprintf_r+0x240>)
 800bd16:	429d      	cmp	r5, r3
 800bd18:	d11b      	bne.n	800bd52 <_vfiprintf_r+0x56>
 800bd1a:	6875      	ldr	r5, [r6, #4]
 800bd1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd1e:	07d9      	lsls	r1, r3, #31
 800bd20:	d405      	bmi.n	800bd2e <_vfiprintf_r+0x32>
 800bd22:	89ab      	ldrh	r3, [r5, #12]
 800bd24:	059a      	lsls	r2, r3, #22
 800bd26:	d402      	bmi.n	800bd2e <_vfiprintf_r+0x32>
 800bd28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd2a:	f000 fb97 	bl	800c45c <__retarget_lock_acquire_recursive>
 800bd2e:	89ab      	ldrh	r3, [r5, #12]
 800bd30:	071b      	lsls	r3, r3, #28
 800bd32:	d501      	bpl.n	800bd38 <_vfiprintf_r+0x3c>
 800bd34:	692b      	ldr	r3, [r5, #16]
 800bd36:	b9eb      	cbnz	r3, 800bd74 <_vfiprintf_r+0x78>
 800bd38:	4629      	mov	r1, r5
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f000 f960 	bl	800c000 <__swsetup_r>
 800bd40:	b1c0      	cbz	r0, 800bd74 <_vfiprintf_r+0x78>
 800bd42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd44:	07dc      	lsls	r4, r3, #31
 800bd46:	d50e      	bpl.n	800bd66 <_vfiprintf_r+0x6a>
 800bd48:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4c:	b01d      	add	sp, #116	; 0x74
 800bd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd52:	4b7b      	ldr	r3, [pc, #492]	; (800bf40 <_vfiprintf_r+0x244>)
 800bd54:	429d      	cmp	r5, r3
 800bd56:	d101      	bne.n	800bd5c <_vfiprintf_r+0x60>
 800bd58:	68b5      	ldr	r5, [r6, #8]
 800bd5a:	e7df      	b.n	800bd1c <_vfiprintf_r+0x20>
 800bd5c:	4b79      	ldr	r3, [pc, #484]	; (800bf44 <_vfiprintf_r+0x248>)
 800bd5e:	429d      	cmp	r5, r3
 800bd60:	bf08      	it	eq
 800bd62:	68f5      	ldreq	r5, [r6, #12]
 800bd64:	e7da      	b.n	800bd1c <_vfiprintf_r+0x20>
 800bd66:	89ab      	ldrh	r3, [r5, #12]
 800bd68:	0598      	lsls	r0, r3, #22
 800bd6a:	d4ed      	bmi.n	800bd48 <_vfiprintf_r+0x4c>
 800bd6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd6e:	f000 fb76 	bl	800c45e <__retarget_lock_release_recursive>
 800bd72:	e7e9      	b.n	800bd48 <_vfiprintf_r+0x4c>
 800bd74:	2300      	movs	r3, #0
 800bd76:	9309      	str	r3, [sp, #36]	; 0x24
 800bd78:	2320      	movs	r3, #32
 800bd7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd82:	2330      	movs	r3, #48	; 0x30
 800bd84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf48 <_vfiprintf_r+0x24c>
 800bd88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd8c:	f04f 0901 	mov.w	r9, #1
 800bd90:	4623      	mov	r3, r4
 800bd92:	469a      	mov	sl, r3
 800bd94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd98:	b10a      	cbz	r2, 800bd9e <_vfiprintf_r+0xa2>
 800bd9a:	2a25      	cmp	r2, #37	; 0x25
 800bd9c:	d1f9      	bne.n	800bd92 <_vfiprintf_r+0x96>
 800bd9e:	ebba 0b04 	subs.w	fp, sl, r4
 800bda2:	d00b      	beq.n	800bdbc <_vfiprintf_r+0xc0>
 800bda4:	465b      	mov	r3, fp
 800bda6:	4622      	mov	r2, r4
 800bda8:	4629      	mov	r1, r5
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f7ff ff93 	bl	800bcd6 <__sfputs_r>
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	f000 80aa 	beq.w	800bf0a <_vfiprintf_r+0x20e>
 800bdb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdb8:	445a      	add	r2, fp
 800bdba:	9209      	str	r2, [sp, #36]	; 0x24
 800bdbc:	f89a 3000 	ldrb.w	r3, [sl]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f000 80a2 	beq.w	800bf0a <_vfiprintf_r+0x20e>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdd0:	f10a 0a01 	add.w	sl, sl, #1
 800bdd4:	9304      	str	r3, [sp, #16]
 800bdd6:	9307      	str	r3, [sp, #28]
 800bdd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bddc:	931a      	str	r3, [sp, #104]	; 0x68
 800bdde:	4654      	mov	r4, sl
 800bde0:	2205      	movs	r2, #5
 800bde2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bde6:	4858      	ldr	r0, [pc, #352]	; (800bf48 <_vfiprintf_r+0x24c>)
 800bde8:	f7f4 f9fa 	bl	80001e0 <memchr>
 800bdec:	9a04      	ldr	r2, [sp, #16]
 800bdee:	b9d8      	cbnz	r0, 800be28 <_vfiprintf_r+0x12c>
 800bdf0:	06d1      	lsls	r1, r2, #27
 800bdf2:	bf44      	itt	mi
 800bdf4:	2320      	movmi	r3, #32
 800bdf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdfa:	0713      	lsls	r3, r2, #28
 800bdfc:	bf44      	itt	mi
 800bdfe:	232b      	movmi	r3, #43	; 0x2b
 800be00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be04:	f89a 3000 	ldrb.w	r3, [sl]
 800be08:	2b2a      	cmp	r3, #42	; 0x2a
 800be0a:	d015      	beq.n	800be38 <_vfiprintf_r+0x13c>
 800be0c:	9a07      	ldr	r2, [sp, #28]
 800be0e:	4654      	mov	r4, sl
 800be10:	2000      	movs	r0, #0
 800be12:	f04f 0c0a 	mov.w	ip, #10
 800be16:	4621      	mov	r1, r4
 800be18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be1c:	3b30      	subs	r3, #48	; 0x30
 800be1e:	2b09      	cmp	r3, #9
 800be20:	d94e      	bls.n	800bec0 <_vfiprintf_r+0x1c4>
 800be22:	b1b0      	cbz	r0, 800be52 <_vfiprintf_r+0x156>
 800be24:	9207      	str	r2, [sp, #28]
 800be26:	e014      	b.n	800be52 <_vfiprintf_r+0x156>
 800be28:	eba0 0308 	sub.w	r3, r0, r8
 800be2c:	fa09 f303 	lsl.w	r3, r9, r3
 800be30:	4313      	orrs	r3, r2
 800be32:	9304      	str	r3, [sp, #16]
 800be34:	46a2      	mov	sl, r4
 800be36:	e7d2      	b.n	800bdde <_vfiprintf_r+0xe2>
 800be38:	9b03      	ldr	r3, [sp, #12]
 800be3a:	1d19      	adds	r1, r3, #4
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	9103      	str	r1, [sp, #12]
 800be40:	2b00      	cmp	r3, #0
 800be42:	bfbb      	ittet	lt
 800be44:	425b      	neglt	r3, r3
 800be46:	f042 0202 	orrlt.w	r2, r2, #2
 800be4a:	9307      	strge	r3, [sp, #28]
 800be4c:	9307      	strlt	r3, [sp, #28]
 800be4e:	bfb8      	it	lt
 800be50:	9204      	strlt	r2, [sp, #16]
 800be52:	7823      	ldrb	r3, [r4, #0]
 800be54:	2b2e      	cmp	r3, #46	; 0x2e
 800be56:	d10c      	bne.n	800be72 <_vfiprintf_r+0x176>
 800be58:	7863      	ldrb	r3, [r4, #1]
 800be5a:	2b2a      	cmp	r3, #42	; 0x2a
 800be5c:	d135      	bne.n	800beca <_vfiprintf_r+0x1ce>
 800be5e:	9b03      	ldr	r3, [sp, #12]
 800be60:	1d1a      	adds	r2, r3, #4
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	9203      	str	r2, [sp, #12]
 800be66:	2b00      	cmp	r3, #0
 800be68:	bfb8      	it	lt
 800be6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800be6e:	3402      	adds	r4, #2
 800be70:	9305      	str	r3, [sp, #20]
 800be72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf58 <_vfiprintf_r+0x25c>
 800be76:	7821      	ldrb	r1, [r4, #0]
 800be78:	2203      	movs	r2, #3
 800be7a:	4650      	mov	r0, sl
 800be7c:	f7f4 f9b0 	bl	80001e0 <memchr>
 800be80:	b140      	cbz	r0, 800be94 <_vfiprintf_r+0x198>
 800be82:	2340      	movs	r3, #64	; 0x40
 800be84:	eba0 000a 	sub.w	r0, r0, sl
 800be88:	fa03 f000 	lsl.w	r0, r3, r0
 800be8c:	9b04      	ldr	r3, [sp, #16]
 800be8e:	4303      	orrs	r3, r0
 800be90:	3401      	adds	r4, #1
 800be92:	9304      	str	r3, [sp, #16]
 800be94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be98:	482c      	ldr	r0, [pc, #176]	; (800bf4c <_vfiprintf_r+0x250>)
 800be9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be9e:	2206      	movs	r2, #6
 800bea0:	f7f4 f99e 	bl	80001e0 <memchr>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	d03f      	beq.n	800bf28 <_vfiprintf_r+0x22c>
 800bea8:	4b29      	ldr	r3, [pc, #164]	; (800bf50 <_vfiprintf_r+0x254>)
 800beaa:	bb1b      	cbnz	r3, 800bef4 <_vfiprintf_r+0x1f8>
 800beac:	9b03      	ldr	r3, [sp, #12]
 800beae:	3307      	adds	r3, #7
 800beb0:	f023 0307 	bic.w	r3, r3, #7
 800beb4:	3308      	adds	r3, #8
 800beb6:	9303      	str	r3, [sp, #12]
 800beb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beba:	443b      	add	r3, r7
 800bebc:	9309      	str	r3, [sp, #36]	; 0x24
 800bebe:	e767      	b.n	800bd90 <_vfiprintf_r+0x94>
 800bec0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bec4:	460c      	mov	r4, r1
 800bec6:	2001      	movs	r0, #1
 800bec8:	e7a5      	b.n	800be16 <_vfiprintf_r+0x11a>
 800beca:	2300      	movs	r3, #0
 800becc:	3401      	adds	r4, #1
 800bece:	9305      	str	r3, [sp, #20]
 800bed0:	4619      	mov	r1, r3
 800bed2:	f04f 0c0a 	mov.w	ip, #10
 800bed6:	4620      	mov	r0, r4
 800bed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bedc:	3a30      	subs	r2, #48	; 0x30
 800bede:	2a09      	cmp	r2, #9
 800bee0:	d903      	bls.n	800beea <_vfiprintf_r+0x1ee>
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d0c5      	beq.n	800be72 <_vfiprintf_r+0x176>
 800bee6:	9105      	str	r1, [sp, #20]
 800bee8:	e7c3      	b.n	800be72 <_vfiprintf_r+0x176>
 800beea:	fb0c 2101 	mla	r1, ip, r1, r2
 800beee:	4604      	mov	r4, r0
 800bef0:	2301      	movs	r3, #1
 800bef2:	e7f0      	b.n	800bed6 <_vfiprintf_r+0x1da>
 800bef4:	ab03      	add	r3, sp, #12
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	462a      	mov	r2, r5
 800befa:	4b16      	ldr	r3, [pc, #88]	; (800bf54 <_vfiprintf_r+0x258>)
 800befc:	a904      	add	r1, sp, #16
 800befe:	4630      	mov	r0, r6
 800bf00:	f7fc f886 	bl	8008010 <_printf_float>
 800bf04:	4607      	mov	r7, r0
 800bf06:	1c78      	adds	r0, r7, #1
 800bf08:	d1d6      	bne.n	800beb8 <_vfiprintf_r+0x1bc>
 800bf0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf0c:	07d9      	lsls	r1, r3, #31
 800bf0e:	d405      	bmi.n	800bf1c <_vfiprintf_r+0x220>
 800bf10:	89ab      	ldrh	r3, [r5, #12]
 800bf12:	059a      	lsls	r2, r3, #22
 800bf14:	d402      	bmi.n	800bf1c <_vfiprintf_r+0x220>
 800bf16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf18:	f000 faa1 	bl	800c45e <__retarget_lock_release_recursive>
 800bf1c:	89ab      	ldrh	r3, [r5, #12]
 800bf1e:	065b      	lsls	r3, r3, #25
 800bf20:	f53f af12 	bmi.w	800bd48 <_vfiprintf_r+0x4c>
 800bf24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf26:	e711      	b.n	800bd4c <_vfiprintf_r+0x50>
 800bf28:	ab03      	add	r3, sp, #12
 800bf2a:	9300      	str	r3, [sp, #0]
 800bf2c:	462a      	mov	r2, r5
 800bf2e:	4b09      	ldr	r3, [pc, #36]	; (800bf54 <_vfiprintf_r+0x258>)
 800bf30:	a904      	add	r1, sp, #16
 800bf32:	4630      	mov	r0, r6
 800bf34:	f7fc fb10 	bl	8008558 <_printf_i>
 800bf38:	e7e4      	b.n	800bf04 <_vfiprintf_r+0x208>
 800bf3a:	bf00      	nop
 800bf3c:	0800fb6c 	.word	0x0800fb6c
 800bf40:	0800fb8c 	.word	0x0800fb8c
 800bf44:	0800fb4c 	.word	0x0800fb4c
 800bf48:	0800fafc 	.word	0x0800fafc
 800bf4c:	0800fb06 	.word	0x0800fb06
 800bf50:	08008011 	.word	0x08008011
 800bf54:	0800bcd7 	.word	0x0800bcd7
 800bf58:	0800fb02 	.word	0x0800fb02

0800bf5c <__swbuf_r>:
 800bf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5e:	460e      	mov	r6, r1
 800bf60:	4614      	mov	r4, r2
 800bf62:	4605      	mov	r5, r0
 800bf64:	b118      	cbz	r0, 800bf6e <__swbuf_r+0x12>
 800bf66:	6983      	ldr	r3, [r0, #24]
 800bf68:	b90b      	cbnz	r3, 800bf6e <__swbuf_r+0x12>
 800bf6a:	f000 f9d9 	bl	800c320 <__sinit>
 800bf6e:	4b21      	ldr	r3, [pc, #132]	; (800bff4 <__swbuf_r+0x98>)
 800bf70:	429c      	cmp	r4, r3
 800bf72:	d12b      	bne.n	800bfcc <__swbuf_r+0x70>
 800bf74:	686c      	ldr	r4, [r5, #4]
 800bf76:	69a3      	ldr	r3, [r4, #24]
 800bf78:	60a3      	str	r3, [r4, #8]
 800bf7a:	89a3      	ldrh	r3, [r4, #12]
 800bf7c:	071a      	lsls	r2, r3, #28
 800bf7e:	d52f      	bpl.n	800bfe0 <__swbuf_r+0x84>
 800bf80:	6923      	ldr	r3, [r4, #16]
 800bf82:	b36b      	cbz	r3, 800bfe0 <__swbuf_r+0x84>
 800bf84:	6923      	ldr	r3, [r4, #16]
 800bf86:	6820      	ldr	r0, [r4, #0]
 800bf88:	1ac0      	subs	r0, r0, r3
 800bf8a:	6963      	ldr	r3, [r4, #20]
 800bf8c:	b2f6      	uxtb	r6, r6
 800bf8e:	4283      	cmp	r3, r0
 800bf90:	4637      	mov	r7, r6
 800bf92:	dc04      	bgt.n	800bf9e <__swbuf_r+0x42>
 800bf94:	4621      	mov	r1, r4
 800bf96:	4628      	mov	r0, r5
 800bf98:	f000 f92e 	bl	800c1f8 <_fflush_r>
 800bf9c:	bb30      	cbnz	r0, 800bfec <__swbuf_r+0x90>
 800bf9e:	68a3      	ldr	r3, [r4, #8]
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	60a3      	str	r3, [r4, #8]
 800bfa4:	6823      	ldr	r3, [r4, #0]
 800bfa6:	1c5a      	adds	r2, r3, #1
 800bfa8:	6022      	str	r2, [r4, #0]
 800bfaa:	701e      	strb	r6, [r3, #0]
 800bfac:	6963      	ldr	r3, [r4, #20]
 800bfae:	3001      	adds	r0, #1
 800bfb0:	4283      	cmp	r3, r0
 800bfb2:	d004      	beq.n	800bfbe <__swbuf_r+0x62>
 800bfb4:	89a3      	ldrh	r3, [r4, #12]
 800bfb6:	07db      	lsls	r3, r3, #31
 800bfb8:	d506      	bpl.n	800bfc8 <__swbuf_r+0x6c>
 800bfba:	2e0a      	cmp	r6, #10
 800bfbc:	d104      	bne.n	800bfc8 <__swbuf_r+0x6c>
 800bfbe:	4621      	mov	r1, r4
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	f000 f919 	bl	800c1f8 <_fflush_r>
 800bfc6:	b988      	cbnz	r0, 800bfec <__swbuf_r+0x90>
 800bfc8:	4638      	mov	r0, r7
 800bfca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfcc:	4b0a      	ldr	r3, [pc, #40]	; (800bff8 <__swbuf_r+0x9c>)
 800bfce:	429c      	cmp	r4, r3
 800bfd0:	d101      	bne.n	800bfd6 <__swbuf_r+0x7a>
 800bfd2:	68ac      	ldr	r4, [r5, #8]
 800bfd4:	e7cf      	b.n	800bf76 <__swbuf_r+0x1a>
 800bfd6:	4b09      	ldr	r3, [pc, #36]	; (800bffc <__swbuf_r+0xa0>)
 800bfd8:	429c      	cmp	r4, r3
 800bfda:	bf08      	it	eq
 800bfdc:	68ec      	ldreq	r4, [r5, #12]
 800bfde:	e7ca      	b.n	800bf76 <__swbuf_r+0x1a>
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	f000 f80c 	bl	800c000 <__swsetup_r>
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	d0cb      	beq.n	800bf84 <__swbuf_r+0x28>
 800bfec:	f04f 37ff 	mov.w	r7, #4294967295
 800bff0:	e7ea      	b.n	800bfc8 <__swbuf_r+0x6c>
 800bff2:	bf00      	nop
 800bff4:	0800fb6c 	.word	0x0800fb6c
 800bff8:	0800fb8c 	.word	0x0800fb8c
 800bffc:	0800fb4c 	.word	0x0800fb4c

0800c000 <__swsetup_r>:
 800c000:	4b32      	ldr	r3, [pc, #200]	; (800c0cc <__swsetup_r+0xcc>)
 800c002:	b570      	push	{r4, r5, r6, lr}
 800c004:	681d      	ldr	r5, [r3, #0]
 800c006:	4606      	mov	r6, r0
 800c008:	460c      	mov	r4, r1
 800c00a:	b125      	cbz	r5, 800c016 <__swsetup_r+0x16>
 800c00c:	69ab      	ldr	r3, [r5, #24]
 800c00e:	b913      	cbnz	r3, 800c016 <__swsetup_r+0x16>
 800c010:	4628      	mov	r0, r5
 800c012:	f000 f985 	bl	800c320 <__sinit>
 800c016:	4b2e      	ldr	r3, [pc, #184]	; (800c0d0 <__swsetup_r+0xd0>)
 800c018:	429c      	cmp	r4, r3
 800c01a:	d10f      	bne.n	800c03c <__swsetup_r+0x3c>
 800c01c:	686c      	ldr	r4, [r5, #4]
 800c01e:	89a3      	ldrh	r3, [r4, #12]
 800c020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c024:	0719      	lsls	r1, r3, #28
 800c026:	d42c      	bmi.n	800c082 <__swsetup_r+0x82>
 800c028:	06dd      	lsls	r5, r3, #27
 800c02a:	d411      	bmi.n	800c050 <__swsetup_r+0x50>
 800c02c:	2309      	movs	r3, #9
 800c02e:	6033      	str	r3, [r6, #0]
 800c030:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c034:	81a3      	strh	r3, [r4, #12]
 800c036:	f04f 30ff 	mov.w	r0, #4294967295
 800c03a:	e03e      	b.n	800c0ba <__swsetup_r+0xba>
 800c03c:	4b25      	ldr	r3, [pc, #148]	; (800c0d4 <__swsetup_r+0xd4>)
 800c03e:	429c      	cmp	r4, r3
 800c040:	d101      	bne.n	800c046 <__swsetup_r+0x46>
 800c042:	68ac      	ldr	r4, [r5, #8]
 800c044:	e7eb      	b.n	800c01e <__swsetup_r+0x1e>
 800c046:	4b24      	ldr	r3, [pc, #144]	; (800c0d8 <__swsetup_r+0xd8>)
 800c048:	429c      	cmp	r4, r3
 800c04a:	bf08      	it	eq
 800c04c:	68ec      	ldreq	r4, [r5, #12]
 800c04e:	e7e6      	b.n	800c01e <__swsetup_r+0x1e>
 800c050:	0758      	lsls	r0, r3, #29
 800c052:	d512      	bpl.n	800c07a <__swsetup_r+0x7a>
 800c054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c056:	b141      	cbz	r1, 800c06a <__swsetup_r+0x6a>
 800c058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c05c:	4299      	cmp	r1, r3
 800c05e:	d002      	beq.n	800c066 <__swsetup_r+0x66>
 800c060:	4630      	mov	r0, r6
 800c062:	f7ff fb67 	bl	800b734 <_free_r>
 800c066:	2300      	movs	r3, #0
 800c068:	6363      	str	r3, [r4, #52]	; 0x34
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c070:	81a3      	strh	r3, [r4, #12]
 800c072:	2300      	movs	r3, #0
 800c074:	6063      	str	r3, [r4, #4]
 800c076:	6923      	ldr	r3, [r4, #16]
 800c078:	6023      	str	r3, [r4, #0]
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	f043 0308 	orr.w	r3, r3, #8
 800c080:	81a3      	strh	r3, [r4, #12]
 800c082:	6923      	ldr	r3, [r4, #16]
 800c084:	b94b      	cbnz	r3, 800c09a <__swsetup_r+0x9a>
 800c086:	89a3      	ldrh	r3, [r4, #12]
 800c088:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c08c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c090:	d003      	beq.n	800c09a <__swsetup_r+0x9a>
 800c092:	4621      	mov	r1, r4
 800c094:	4630      	mov	r0, r6
 800c096:	f000 fa07 	bl	800c4a8 <__smakebuf_r>
 800c09a:	89a0      	ldrh	r0, [r4, #12]
 800c09c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0a0:	f010 0301 	ands.w	r3, r0, #1
 800c0a4:	d00a      	beq.n	800c0bc <__swsetup_r+0xbc>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	60a3      	str	r3, [r4, #8]
 800c0aa:	6963      	ldr	r3, [r4, #20]
 800c0ac:	425b      	negs	r3, r3
 800c0ae:	61a3      	str	r3, [r4, #24]
 800c0b0:	6923      	ldr	r3, [r4, #16]
 800c0b2:	b943      	cbnz	r3, 800c0c6 <__swsetup_r+0xc6>
 800c0b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0b8:	d1ba      	bne.n	800c030 <__swsetup_r+0x30>
 800c0ba:	bd70      	pop	{r4, r5, r6, pc}
 800c0bc:	0781      	lsls	r1, r0, #30
 800c0be:	bf58      	it	pl
 800c0c0:	6963      	ldrpl	r3, [r4, #20]
 800c0c2:	60a3      	str	r3, [r4, #8]
 800c0c4:	e7f4      	b.n	800c0b0 <__swsetup_r+0xb0>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	e7f7      	b.n	800c0ba <__swsetup_r+0xba>
 800c0ca:	bf00      	nop
 800c0cc:	20000014 	.word	0x20000014
 800c0d0:	0800fb6c 	.word	0x0800fb6c
 800c0d4:	0800fb8c 	.word	0x0800fb8c
 800c0d8:	0800fb4c 	.word	0x0800fb4c

0800c0dc <abort>:
 800c0dc:	b508      	push	{r3, lr}
 800c0de:	2006      	movs	r0, #6
 800c0e0:	f000 fa52 	bl	800c588 <raise>
 800c0e4:	2001      	movs	r0, #1
 800c0e6:	f7f6 fb73 	bl	80027d0 <_exit>
	...

0800c0ec <__sflush_r>:
 800c0ec:	898a      	ldrh	r2, [r1, #12]
 800c0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	0710      	lsls	r0, r2, #28
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	d458      	bmi.n	800c1ac <__sflush_r+0xc0>
 800c0fa:	684b      	ldr	r3, [r1, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	dc05      	bgt.n	800c10c <__sflush_r+0x20>
 800c100:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c102:	2b00      	cmp	r3, #0
 800c104:	dc02      	bgt.n	800c10c <__sflush_r+0x20>
 800c106:	2000      	movs	r0, #0
 800c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c10c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c10e:	2e00      	cmp	r6, #0
 800c110:	d0f9      	beq.n	800c106 <__sflush_r+0x1a>
 800c112:	2300      	movs	r3, #0
 800c114:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c118:	682f      	ldr	r7, [r5, #0]
 800c11a:	602b      	str	r3, [r5, #0]
 800c11c:	d032      	beq.n	800c184 <__sflush_r+0x98>
 800c11e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c120:	89a3      	ldrh	r3, [r4, #12]
 800c122:	075a      	lsls	r2, r3, #29
 800c124:	d505      	bpl.n	800c132 <__sflush_r+0x46>
 800c126:	6863      	ldr	r3, [r4, #4]
 800c128:	1ac0      	subs	r0, r0, r3
 800c12a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c12c:	b10b      	cbz	r3, 800c132 <__sflush_r+0x46>
 800c12e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c130:	1ac0      	subs	r0, r0, r3
 800c132:	2300      	movs	r3, #0
 800c134:	4602      	mov	r2, r0
 800c136:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c138:	6a21      	ldr	r1, [r4, #32]
 800c13a:	4628      	mov	r0, r5
 800c13c:	47b0      	blx	r6
 800c13e:	1c43      	adds	r3, r0, #1
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	d106      	bne.n	800c152 <__sflush_r+0x66>
 800c144:	6829      	ldr	r1, [r5, #0]
 800c146:	291d      	cmp	r1, #29
 800c148:	d82c      	bhi.n	800c1a4 <__sflush_r+0xb8>
 800c14a:	4a2a      	ldr	r2, [pc, #168]	; (800c1f4 <__sflush_r+0x108>)
 800c14c:	40ca      	lsrs	r2, r1
 800c14e:	07d6      	lsls	r6, r2, #31
 800c150:	d528      	bpl.n	800c1a4 <__sflush_r+0xb8>
 800c152:	2200      	movs	r2, #0
 800c154:	6062      	str	r2, [r4, #4]
 800c156:	04d9      	lsls	r1, r3, #19
 800c158:	6922      	ldr	r2, [r4, #16]
 800c15a:	6022      	str	r2, [r4, #0]
 800c15c:	d504      	bpl.n	800c168 <__sflush_r+0x7c>
 800c15e:	1c42      	adds	r2, r0, #1
 800c160:	d101      	bne.n	800c166 <__sflush_r+0x7a>
 800c162:	682b      	ldr	r3, [r5, #0]
 800c164:	b903      	cbnz	r3, 800c168 <__sflush_r+0x7c>
 800c166:	6560      	str	r0, [r4, #84]	; 0x54
 800c168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c16a:	602f      	str	r7, [r5, #0]
 800c16c:	2900      	cmp	r1, #0
 800c16e:	d0ca      	beq.n	800c106 <__sflush_r+0x1a>
 800c170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c174:	4299      	cmp	r1, r3
 800c176:	d002      	beq.n	800c17e <__sflush_r+0x92>
 800c178:	4628      	mov	r0, r5
 800c17a:	f7ff fadb 	bl	800b734 <_free_r>
 800c17e:	2000      	movs	r0, #0
 800c180:	6360      	str	r0, [r4, #52]	; 0x34
 800c182:	e7c1      	b.n	800c108 <__sflush_r+0x1c>
 800c184:	6a21      	ldr	r1, [r4, #32]
 800c186:	2301      	movs	r3, #1
 800c188:	4628      	mov	r0, r5
 800c18a:	47b0      	blx	r6
 800c18c:	1c41      	adds	r1, r0, #1
 800c18e:	d1c7      	bne.n	800c120 <__sflush_r+0x34>
 800c190:	682b      	ldr	r3, [r5, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d0c4      	beq.n	800c120 <__sflush_r+0x34>
 800c196:	2b1d      	cmp	r3, #29
 800c198:	d001      	beq.n	800c19e <__sflush_r+0xb2>
 800c19a:	2b16      	cmp	r3, #22
 800c19c:	d101      	bne.n	800c1a2 <__sflush_r+0xb6>
 800c19e:	602f      	str	r7, [r5, #0]
 800c1a0:	e7b1      	b.n	800c106 <__sflush_r+0x1a>
 800c1a2:	89a3      	ldrh	r3, [r4, #12]
 800c1a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1a8:	81a3      	strh	r3, [r4, #12]
 800c1aa:	e7ad      	b.n	800c108 <__sflush_r+0x1c>
 800c1ac:	690f      	ldr	r7, [r1, #16]
 800c1ae:	2f00      	cmp	r7, #0
 800c1b0:	d0a9      	beq.n	800c106 <__sflush_r+0x1a>
 800c1b2:	0793      	lsls	r3, r2, #30
 800c1b4:	680e      	ldr	r6, [r1, #0]
 800c1b6:	bf08      	it	eq
 800c1b8:	694b      	ldreq	r3, [r1, #20]
 800c1ba:	600f      	str	r7, [r1, #0]
 800c1bc:	bf18      	it	ne
 800c1be:	2300      	movne	r3, #0
 800c1c0:	eba6 0807 	sub.w	r8, r6, r7
 800c1c4:	608b      	str	r3, [r1, #8]
 800c1c6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ca:	dd9c      	ble.n	800c106 <__sflush_r+0x1a>
 800c1cc:	6a21      	ldr	r1, [r4, #32]
 800c1ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1d0:	4643      	mov	r3, r8
 800c1d2:	463a      	mov	r2, r7
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	47b0      	blx	r6
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	dc06      	bgt.n	800c1ea <__sflush_r+0xfe>
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1e2:	81a3      	strh	r3, [r4, #12]
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	e78e      	b.n	800c108 <__sflush_r+0x1c>
 800c1ea:	4407      	add	r7, r0
 800c1ec:	eba8 0800 	sub.w	r8, r8, r0
 800c1f0:	e7e9      	b.n	800c1c6 <__sflush_r+0xda>
 800c1f2:	bf00      	nop
 800c1f4:	20400001 	.word	0x20400001

0800c1f8 <_fflush_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	690b      	ldr	r3, [r1, #16]
 800c1fc:	4605      	mov	r5, r0
 800c1fe:	460c      	mov	r4, r1
 800c200:	b913      	cbnz	r3, 800c208 <_fflush_r+0x10>
 800c202:	2500      	movs	r5, #0
 800c204:	4628      	mov	r0, r5
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	b118      	cbz	r0, 800c212 <_fflush_r+0x1a>
 800c20a:	6983      	ldr	r3, [r0, #24]
 800c20c:	b90b      	cbnz	r3, 800c212 <_fflush_r+0x1a>
 800c20e:	f000 f887 	bl	800c320 <__sinit>
 800c212:	4b14      	ldr	r3, [pc, #80]	; (800c264 <_fflush_r+0x6c>)
 800c214:	429c      	cmp	r4, r3
 800c216:	d11b      	bne.n	800c250 <_fflush_r+0x58>
 800c218:	686c      	ldr	r4, [r5, #4]
 800c21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d0ef      	beq.n	800c202 <_fflush_r+0xa>
 800c222:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c224:	07d0      	lsls	r0, r2, #31
 800c226:	d404      	bmi.n	800c232 <_fflush_r+0x3a>
 800c228:	0599      	lsls	r1, r3, #22
 800c22a:	d402      	bmi.n	800c232 <_fflush_r+0x3a>
 800c22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c22e:	f000 f915 	bl	800c45c <__retarget_lock_acquire_recursive>
 800c232:	4628      	mov	r0, r5
 800c234:	4621      	mov	r1, r4
 800c236:	f7ff ff59 	bl	800c0ec <__sflush_r>
 800c23a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c23c:	07da      	lsls	r2, r3, #31
 800c23e:	4605      	mov	r5, r0
 800c240:	d4e0      	bmi.n	800c204 <_fflush_r+0xc>
 800c242:	89a3      	ldrh	r3, [r4, #12]
 800c244:	059b      	lsls	r3, r3, #22
 800c246:	d4dd      	bmi.n	800c204 <_fflush_r+0xc>
 800c248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c24a:	f000 f908 	bl	800c45e <__retarget_lock_release_recursive>
 800c24e:	e7d9      	b.n	800c204 <_fflush_r+0xc>
 800c250:	4b05      	ldr	r3, [pc, #20]	; (800c268 <_fflush_r+0x70>)
 800c252:	429c      	cmp	r4, r3
 800c254:	d101      	bne.n	800c25a <_fflush_r+0x62>
 800c256:	68ac      	ldr	r4, [r5, #8]
 800c258:	e7df      	b.n	800c21a <_fflush_r+0x22>
 800c25a:	4b04      	ldr	r3, [pc, #16]	; (800c26c <_fflush_r+0x74>)
 800c25c:	429c      	cmp	r4, r3
 800c25e:	bf08      	it	eq
 800c260:	68ec      	ldreq	r4, [r5, #12]
 800c262:	e7da      	b.n	800c21a <_fflush_r+0x22>
 800c264:	0800fb6c 	.word	0x0800fb6c
 800c268:	0800fb8c 	.word	0x0800fb8c
 800c26c:	0800fb4c 	.word	0x0800fb4c

0800c270 <std>:
 800c270:	2300      	movs	r3, #0
 800c272:	b510      	push	{r4, lr}
 800c274:	4604      	mov	r4, r0
 800c276:	e9c0 3300 	strd	r3, r3, [r0]
 800c27a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c27e:	6083      	str	r3, [r0, #8]
 800c280:	8181      	strh	r1, [r0, #12]
 800c282:	6643      	str	r3, [r0, #100]	; 0x64
 800c284:	81c2      	strh	r2, [r0, #14]
 800c286:	6183      	str	r3, [r0, #24]
 800c288:	4619      	mov	r1, r3
 800c28a:	2208      	movs	r2, #8
 800c28c:	305c      	adds	r0, #92	; 0x5c
 800c28e:	f7fb fe17 	bl	8007ec0 <memset>
 800c292:	4b05      	ldr	r3, [pc, #20]	; (800c2a8 <std+0x38>)
 800c294:	6263      	str	r3, [r4, #36]	; 0x24
 800c296:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <std+0x3c>)
 800c298:	62a3      	str	r3, [r4, #40]	; 0x28
 800c29a:	4b05      	ldr	r3, [pc, #20]	; (800c2b0 <std+0x40>)
 800c29c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c29e:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <std+0x44>)
 800c2a0:	6224      	str	r4, [r4, #32]
 800c2a2:	6323      	str	r3, [r4, #48]	; 0x30
 800c2a4:	bd10      	pop	{r4, pc}
 800c2a6:	bf00      	nop
 800c2a8:	0800c5c1 	.word	0x0800c5c1
 800c2ac:	0800c5e3 	.word	0x0800c5e3
 800c2b0:	0800c61b 	.word	0x0800c61b
 800c2b4:	0800c63f 	.word	0x0800c63f

0800c2b8 <_cleanup_r>:
 800c2b8:	4901      	ldr	r1, [pc, #4]	; (800c2c0 <_cleanup_r+0x8>)
 800c2ba:	f000 b8af 	b.w	800c41c <_fwalk_reent>
 800c2be:	bf00      	nop
 800c2c0:	0800c1f9 	.word	0x0800c1f9

0800c2c4 <__sfmoreglue>:
 800c2c4:	b570      	push	{r4, r5, r6, lr}
 800c2c6:	1e4a      	subs	r2, r1, #1
 800c2c8:	2568      	movs	r5, #104	; 0x68
 800c2ca:	4355      	muls	r5, r2
 800c2cc:	460e      	mov	r6, r1
 800c2ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2d2:	f7ff fa7f 	bl	800b7d4 <_malloc_r>
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	b140      	cbz	r0, 800c2ec <__sfmoreglue+0x28>
 800c2da:	2100      	movs	r1, #0
 800c2dc:	e9c0 1600 	strd	r1, r6, [r0]
 800c2e0:	300c      	adds	r0, #12
 800c2e2:	60a0      	str	r0, [r4, #8]
 800c2e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2e8:	f7fb fdea 	bl	8007ec0 <memset>
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	bd70      	pop	{r4, r5, r6, pc}

0800c2f0 <__sfp_lock_acquire>:
 800c2f0:	4801      	ldr	r0, [pc, #4]	; (800c2f8 <__sfp_lock_acquire+0x8>)
 800c2f2:	f000 b8b3 	b.w	800c45c <__retarget_lock_acquire_recursive>
 800c2f6:	bf00      	nop
 800c2f8:	200005ac 	.word	0x200005ac

0800c2fc <__sfp_lock_release>:
 800c2fc:	4801      	ldr	r0, [pc, #4]	; (800c304 <__sfp_lock_release+0x8>)
 800c2fe:	f000 b8ae 	b.w	800c45e <__retarget_lock_release_recursive>
 800c302:	bf00      	nop
 800c304:	200005ac 	.word	0x200005ac

0800c308 <__sinit_lock_acquire>:
 800c308:	4801      	ldr	r0, [pc, #4]	; (800c310 <__sinit_lock_acquire+0x8>)
 800c30a:	f000 b8a7 	b.w	800c45c <__retarget_lock_acquire_recursive>
 800c30e:	bf00      	nop
 800c310:	200005a7 	.word	0x200005a7

0800c314 <__sinit_lock_release>:
 800c314:	4801      	ldr	r0, [pc, #4]	; (800c31c <__sinit_lock_release+0x8>)
 800c316:	f000 b8a2 	b.w	800c45e <__retarget_lock_release_recursive>
 800c31a:	bf00      	nop
 800c31c:	200005a7 	.word	0x200005a7

0800c320 <__sinit>:
 800c320:	b510      	push	{r4, lr}
 800c322:	4604      	mov	r4, r0
 800c324:	f7ff fff0 	bl	800c308 <__sinit_lock_acquire>
 800c328:	69a3      	ldr	r3, [r4, #24]
 800c32a:	b11b      	cbz	r3, 800c334 <__sinit+0x14>
 800c32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c330:	f7ff bff0 	b.w	800c314 <__sinit_lock_release>
 800c334:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c338:	6523      	str	r3, [r4, #80]	; 0x50
 800c33a:	4b13      	ldr	r3, [pc, #76]	; (800c388 <__sinit+0x68>)
 800c33c:	4a13      	ldr	r2, [pc, #76]	; (800c38c <__sinit+0x6c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	62a2      	str	r2, [r4, #40]	; 0x28
 800c342:	42a3      	cmp	r3, r4
 800c344:	bf04      	itt	eq
 800c346:	2301      	moveq	r3, #1
 800c348:	61a3      	streq	r3, [r4, #24]
 800c34a:	4620      	mov	r0, r4
 800c34c:	f000 f820 	bl	800c390 <__sfp>
 800c350:	6060      	str	r0, [r4, #4]
 800c352:	4620      	mov	r0, r4
 800c354:	f000 f81c 	bl	800c390 <__sfp>
 800c358:	60a0      	str	r0, [r4, #8]
 800c35a:	4620      	mov	r0, r4
 800c35c:	f000 f818 	bl	800c390 <__sfp>
 800c360:	2200      	movs	r2, #0
 800c362:	60e0      	str	r0, [r4, #12]
 800c364:	2104      	movs	r1, #4
 800c366:	6860      	ldr	r0, [r4, #4]
 800c368:	f7ff ff82 	bl	800c270 <std>
 800c36c:	68a0      	ldr	r0, [r4, #8]
 800c36e:	2201      	movs	r2, #1
 800c370:	2109      	movs	r1, #9
 800c372:	f7ff ff7d 	bl	800c270 <std>
 800c376:	68e0      	ldr	r0, [r4, #12]
 800c378:	2202      	movs	r2, #2
 800c37a:	2112      	movs	r1, #18
 800c37c:	f7ff ff78 	bl	800c270 <std>
 800c380:	2301      	movs	r3, #1
 800c382:	61a3      	str	r3, [r4, #24]
 800c384:	e7d2      	b.n	800c32c <__sinit+0xc>
 800c386:	bf00      	nop
 800c388:	0800f6f4 	.word	0x0800f6f4
 800c38c:	0800c2b9 	.word	0x0800c2b9

0800c390 <__sfp>:
 800c390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c392:	4607      	mov	r7, r0
 800c394:	f7ff ffac 	bl	800c2f0 <__sfp_lock_acquire>
 800c398:	4b1e      	ldr	r3, [pc, #120]	; (800c414 <__sfp+0x84>)
 800c39a:	681e      	ldr	r6, [r3, #0]
 800c39c:	69b3      	ldr	r3, [r6, #24]
 800c39e:	b913      	cbnz	r3, 800c3a6 <__sfp+0x16>
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f7ff ffbd 	bl	800c320 <__sinit>
 800c3a6:	3648      	adds	r6, #72	; 0x48
 800c3a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	d503      	bpl.n	800c3b8 <__sfp+0x28>
 800c3b0:	6833      	ldr	r3, [r6, #0]
 800c3b2:	b30b      	cbz	r3, 800c3f8 <__sfp+0x68>
 800c3b4:	6836      	ldr	r6, [r6, #0]
 800c3b6:	e7f7      	b.n	800c3a8 <__sfp+0x18>
 800c3b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3bc:	b9d5      	cbnz	r5, 800c3f4 <__sfp+0x64>
 800c3be:	4b16      	ldr	r3, [pc, #88]	; (800c418 <__sfp+0x88>)
 800c3c0:	60e3      	str	r3, [r4, #12]
 800c3c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3c6:	6665      	str	r5, [r4, #100]	; 0x64
 800c3c8:	f000 f847 	bl	800c45a <__retarget_lock_init_recursive>
 800c3cc:	f7ff ff96 	bl	800c2fc <__sfp_lock_release>
 800c3d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3d8:	6025      	str	r5, [r4, #0]
 800c3da:	61a5      	str	r5, [r4, #24]
 800c3dc:	2208      	movs	r2, #8
 800c3de:	4629      	mov	r1, r5
 800c3e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3e4:	f7fb fd6c 	bl	8007ec0 <memset>
 800c3e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3f4:	3468      	adds	r4, #104	; 0x68
 800c3f6:	e7d9      	b.n	800c3ac <__sfp+0x1c>
 800c3f8:	2104      	movs	r1, #4
 800c3fa:	4638      	mov	r0, r7
 800c3fc:	f7ff ff62 	bl	800c2c4 <__sfmoreglue>
 800c400:	4604      	mov	r4, r0
 800c402:	6030      	str	r0, [r6, #0]
 800c404:	2800      	cmp	r0, #0
 800c406:	d1d5      	bne.n	800c3b4 <__sfp+0x24>
 800c408:	f7ff ff78 	bl	800c2fc <__sfp_lock_release>
 800c40c:	230c      	movs	r3, #12
 800c40e:	603b      	str	r3, [r7, #0]
 800c410:	e7ee      	b.n	800c3f0 <__sfp+0x60>
 800c412:	bf00      	nop
 800c414:	0800f6f4 	.word	0x0800f6f4
 800c418:	ffff0001 	.word	0xffff0001

0800c41c <_fwalk_reent>:
 800c41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c420:	4606      	mov	r6, r0
 800c422:	4688      	mov	r8, r1
 800c424:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c428:	2700      	movs	r7, #0
 800c42a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c42e:	f1b9 0901 	subs.w	r9, r9, #1
 800c432:	d505      	bpl.n	800c440 <_fwalk_reent+0x24>
 800c434:	6824      	ldr	r4, [r4, #0]
 800c436:	2c00      	cmp	r4, #0
 800c438:	d1f7      	bne.n	800c42a <_fwalk_reent+0xe>
 800c43a:	4638      	mov	r0, r7
 800c43c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c440:	89ab      	ldrh	r3, [r5, #12]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d907      	bls.n	800c456 <_fwalk_reent+0x3a>
 800c446:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c44a:	3301      	adds	r3, #1
 800c44c:	d003      	beq.n	800c456 <_fwalk_reent+0x3a>
 800c44e:	4629      	mov	r1, r5
 800c450:	4630      	mov	r0, r6
 800c452:	47c0      	blx	r8
 800c454:	4307      	orrs	r7, r0
 800c456:	3568      	adds	r5, #104	; 0x68
 800c458:	e7e9      	b.n	800c42e <_fwalk_reent+0x12>

0800c45a <__retarget_lock_init_recursive>:
 800c45a:	4770      	bx	lr

0800c45c <__retarget_lock_acquire_recursive>:
 800c45c:	4770      	bx	lr

0800c45e <__retarget_lock_release_recursive>:
 800c45e:	4770      	bx	lr

0800c460 <__swhatbuf_r>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	460e      	mov	r6, r1
 800c464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c468:	2900      	cmp	r1, #0
 800c46a:	b096      	sub	sp, #88	; 0x58
 800c46c:	4614      	mov	r4, r2
 800c46e:	461d      	mov	r5, r3
 800c470:	da07      	bge.n	800c482 <__swhatbuf_r+0x22>
 800c472:	2300      	movs	r3, #0
 800c474:	602b      	str	r3, [r5, #0]
 800c476:	89b3      	ldrh	r3, [r6, #12]
 800c478:	061a      	lsls	r2, r3, #24
 800c47a:	d410      	bmi.n	800c49e <__swhatbuf_r+0x3e>
 800c47c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c480:	e00e      	b.n	800c4a0 <__swhatbuf_r+0x40>
 800c482:	466a      	mov	r2, sp
 800c484:	f000 f902 	bl	800c68c <_fstat_r>
 800c488:	2800      	cmp	r0, #0
 800c48a:	dbf2      	blt.n	800c472 <__swhatbuf_r+0x12>
 800c48c:	9a01      	ldr	r2, [sp, #4]
 800c48e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c492:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c496:	425a      	negs	r2, r3
 800c498:	415a      	adcs	r2, r3
 800c49a:	602a      	str	r2, [r5, #0]
 800c49c:	e7ee      	b.n	800c47c <__swhatbuf_r+0x1c>
 800c49e:	2340      	movs	r3, #64	; 0x40
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	6023      	str	r3, [r4, #0]
 800c4a4:	b016      	add	sp, #88	; 0x58
 800c4a6:	bd70      	pop	{r4, r5, r6, pc}

0800c4a8 <__smakebuf_r>:
 800c4a8:	898b      	ldrh	r3, [r1, #12]
 800c4aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4ac:	079d      	lsls	r5, r3, #30
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	460c      	mov	r4, r1
 800c4b2:	d507      	bpl.n	800c4c4 <__smakebuf_r+0x1c>
 800c4b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4b8:	6023      	str	r3, [r4, #0]
 800c4ba:	6123      	str	r3, [r4, #16]
 800c4bc:	2301      	movs	r3, #1
 800c4be:	6163      	str	r3, [r4, #20]
 800c4c0:	b002      	add	sp, #8
 800c4c2:	bd70      	pop	{r4, r5, r6, pc}
 800c4c4:	ab01      	add	r3, sp, #4
 800c4c6:	466a      	mov	r2, sp
 800c4c8:	f7ff ffca 	bl	800c460 <__swhatbuf_r>
 800c4cc:	9900      	ldr	r1, [sp, #0]
 800c4ce:	4605      	mov	r5, r0
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	f7ff f97f 	bl	800b7d4 <_malloc_r>
 800c4d6:	b948      	cbnz	r0, 800c4ec <__smakebuf_r+0x44>
 800c4d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4dc:	059a      	lsls	r2, r3, #22
 800c4de:	d4ef      	bmi.n	800c4c0 <__smakebuf_r+0x18>
 800c4e0:	f023 0303 	bic.w	r3, r3, #3
 800c4e4:	f043 0302 	orr.w	r3, r3, #2
 800c4e8:	81a3      	strh	r3, [r4, #12]
 800c4ea:	e7e3      	b.n	800c4b4 <__smakebuf_r+0xc>
 800c4ec:	4b0d      	ldr	r3, [pc, #52]	; (800c524 <__smakebuf_r+0x7c>)
 800c4ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4f0:	89a3      	ldrh	r3, [r4, #12]
 800c4f2:	6020      	str	r0, [r4, #0]
 800c4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f8:	81a3      	strh	r3, [r4, #12]
 800c4fa:	9b00      	ldr	r3, [sp, #0]
 800c4fc:	6163      	str	r3, [r4, #20]
 800c4fe:	9b01      	ldr	r3, [sp, #4]
 800c500:	6120      	str	r0, [r4, #16]
 800c502:	b15b      	cbz	r3, 800c51c <__smakebuf_r+0x74>
 800c504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c508:	4630      	mov	r0, r6
 800c50a:	f000 f8d1 	bl	800c6b0 <_isatty_r>
 800c50e:	b128      	cbz	r0, 800c51c <__smakebuf_r+0x74>
 800c510:	89a3      	ldrh	r3, [r4, #12]
 800c512:	f023 0303 	bic.w	r3, r3, #3
 800c516:	f043 0301 	orr.w	r3, r3, #1
 800c51a:	81a3      	strh	r3, [r4, #12]
 800c51c:	89a0      	ldrh	r0, [r4, #12]
 800c51e:	4305      	orrs	r5, r0
 800c520:	81a5      	strh	r5, [r4, #12]
 800c522:	e7cd      	b.n	800c4c0 <__smakebuf_r+0x18>
 800c524:	0800c2b9 	.word	0x0800c2b9

0800c528 <_malloc_usable_size_r>:
 800c528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c52c:	1f18      	subs	r0, r3, #4
 800c52e:	2b00      	cmp	r3, #0
 800c530:	bfbc      	itt	lt
 800c532:	580b      	ldrlt	r3, [r1, r0]
 800c534:	18c0      	addlt	r0, r0, r3
 800c536:	4770      	bx	lr

0800c538 <_raise_r>:
 800c538:	291f      	cmp	r1, #31
 800c53a:	b538      	push	{r3, r4, r5, lr}
 800c53c:	4604      	mov	r4, r0
 800c53e:	460d      	mov	r5, r1
 800c540:	d904      	bls.n	800c54c <_raise_r+0x14>
 800c542:	2316      	movs	r3, #22
 800c544:	6003      	str	r3, [r0, #0]
 800c546:	f04f 30ff 	mov.w	r0, #4294967295
 800c54a:	bd38      	pop	{r3, r4, r5, pc}
 800c54c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c54e:	b112      	cbz	r2, 800c556 <_raise_r+0x1e>
 800c550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c554:	b94b      	cbnz	r3, 800c56a <_raise_r+0x32>
 800c556:	4620      	mov	r0, r4
 800c558:	f000 f830 	bl	800c5bc <_getpid_r>
 800c55c:	462a      	mov	r2, r5
 800c55e:	4601      	mov	r1, r0
 800c560:	4620      	mov	r0, r4
 800c562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c566:	f000 b817 	b.w	800c598 <_kill_r>
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d00a      	beq.n	800c584 <_raise_r+0x4c>
 800c56e:	1c59      	adds	r1, r3, #1
 800c570:	d103      	bne.n	800c57a <_raise_r+0x42>
 800c572:	2316      	movs	r3, #22
 800c574:	6003      	str	r3, [r0, #0]
 800c576:	2001      	movs	r0, #1
 800c578:	e7e7      	b.n	800c54a <_raise_r+0x12>
 800c57a:	2400      	movs	r4, #0
 800c57c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c580:	4628      	mov	r0, r5
 800c582:	4798      	blx	r3
 800c584:	2000      	movs	r0, #0
 800c586:	e7e0      	b.n	800c54a <_raise_r+0x12>

0800c588 <raise>:
 800c588:	4b02      	ldr	r3, [pc, #8]	; (800c594 <raise+0xc>)
 800c58a:	4601      	mov	r1, r0
 800c58c:	6818      	ldr	r0, [r3, #0]
 800c58e:	f7ff bfd3 	b.w	800c538 <_raise_r>
 800c592:	bf00      	nop
 800c594:	20000014 	.word	0x20000014

0800c598 <_kill_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4d07      	ldr	r5, [pc, #28]	; (800c5b8 <_kill_r+0x20>)
 800c59c:	2300      	movs	r3, #0
 800c59e:	4604      	mov	r4, r0
 800c5a0:	4608      	mov	r0, r1
 800c5a2:	4611      	mov	r1, r2
 800c5a4:	602b      	str	r3, [r5, #0]
 800c5a6:	f7f6 f903 	bl	80027b0 <_kill>
 800c5aa:	1c43      	adds	r3, r0, #1
 800c5ac:	d102      	bne.n	800c5b4 <_kill_r+0x1c>
 800c5ae:	682b      	ldr	r3, [r5, #0]
 800c5b0:	b103      	cbz	r3, 800c5b4 <_kill_r+0x1c>
 800c5b2:	6023      	str	r3, [r4, #0]
 800c5b4:	bd38      	pop	{r3, r4, r5, pc}
 800c5b6:	bf00      	nop
 800c5b8:	200005a0 	.word	0x200005a0

0800c5bc <_getpid_r>:
 800c5bc:	f7f6 b8f0 	b.w	80027a0 <_getpid>

0800c5c0 <__sread>:
 800c5c0:	b510      	push	{r4, lr}
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c8:	f000 f894 	bl	800c6f4 <_read_r>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	bfab      	itete	ge
 800c5d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5d2:	89a3      	ldrhlt	r3, [r4, #12]
 800c5d4:	181b      	addge	r3, r3, r0
 800c5d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5da:	bfac      	ite	ge
 800c5dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5de:	81a3      	strhlt	r3, [r4, #12]
 800c5e0:	bd10      	pop	{r4, pc}

0800c5e2 <__swrite>:
 800c5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e6:	461f      	mov	r7, r3
 800c5e8:	898b      	ldrh	r3, [r1, #12]
 800c5ea:	05db      	lsls	r3, r3, #23
 800c5ec:	4605      	mov	r5, r0
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	4616      	mov	r6, r2
 800c5f2:	d505      	bpl.n	800c600 <__swrite+0x1e>
 800c5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f8:	2302      	movs	r3, #2
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f000 f868 	bl	800c6d0 <_lseek_r>
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c60a:	81a3      	strh	r3, [r4, #12]
 800c60c:	4632      	mov	r2, r6
 800c60e:	463b      	mov	r3, r7
 800c610:	4628      	mov	r0, r5
 800c612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c616:	f000 b817 	b.w	800c648 <_write_r>

0800c61a <__sseek>:
 800c61a:	b510      	push	{r4, lr}
 800c61c:	460c      	mov	r4, r1
 800c61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c622:	f000 f855 	bl	800c6d0 <_lseek_r>
 800c626:	1c43      	adds	r3, r0, #1
 800c628:	89a3      	ldrh	r3, [r4, #12]
 800c62a:	bf15      	itete	ne
 800c62c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c62e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c636:	81a3      	strheq	r3, [r4, #12]
 800c638:	bf18      	it	ne
 800c63a:	81a3      	strhne	r3, [r4, #12]
 800c63c:	bd10      	pop	{r4, pc}

0800c63e <__sclose>:
 800c63e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c642:	f000 b813 	b.w	800c66c <_close_r>
	...

0800c648 <_write_r>:
 800c648:	b538      	push	{r3, r4, r5, lr}
 800c64a:	4d07      	ldr	r5, [pc, #28]	; (800c668 <_write_r+0x20>)
 800c64c:	4604      	mov	r4, r0
 800c64e:	4608      	mov	r0, r1
 800c650:	4611      	mov	r1, r2
 800c652:	2200      	movs	r2, #0
 800c654:	602a      	str	r2, [r5, #0]
 800c656:	461a      	mov	r2, r3
 800c658:	f7f6 f8e1 	bl	800281e <_write>
 800c65c:	1c43      	adds	r3, r0, #1
 800c65e:	d102      	bne.n	800c666 <_write_r+0x1e>
 800c660:	682b      	ldr	r3, [r5, #0]
 800c662:	b103      	cbz	r3, 800c666 <_write_r+0x1e>
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	bd38      	pop	{r3, r4, r5, pc}
 800c668:	200005a0 	.word	0x200005a0

0800c66c <_close_r>:
 800c66c:	b538      	push	{r3, r4, r5, lr}
 800c66e:	4d06      	ldr	r5, [pc, #24]	; (800c688 <_close_r+0x1c>)
 800c670:	2300      	movs	r3, #0
 800c672:	4604      	mov	r4, r0
 800c674:	4608      	mov	r0, r1
 800c676:	602b      	str	r3, [r5, #0]
 800c678:	f7f6 f8ed 	bl	8002856 <_close>
 800c67c:	1c43      	adds	r3, r0, #1
 800c67e:	d102      	bne.n	800c686 <_close_r+0x1a>
 800c680:	682b      	ldr	r3, [r5, #0]
 800c682:	b103      	cbz	r3, 800c686 <_close_r+0x1a>
 800c684:	6023      	str	r3, [r4, #0]
 800c686:	bd38      	pop	{r3, r4, r5, pc}
 800c688:	200005a0 	.word	0x200005a0

0800c68c <_fstat_r>:
 800c68c:	b538      	push	{r3, r4, r5, lr}
 800c68e:	4d07      	ldr	r5, [pc, #28]	; (800c6ac <_fstat_r+0x20>)
 800c690:	2300      	movs	r3, #0
 800c692:	4604      	mov	r4, r0
 800c694:	4608      	mov	r0, r1
 800c696:	4611      	mov	r1, r2
 800c698:	602b      	str	r3, [r5, #0]
 800c69a:	f7f6 f8e8 	bl	800286e <_fstat>
 800c69e:	1c43      	adds	r3, r0, #1
 800c6a0:	d102      	bne.n	800c6a8 <_fstat_r+0x1c>
 800c6a2:	682b      	ldr	r3, [r5, #0]
 800c6a4:	b103      	cbz	r3, 800c6a8 <_fstat_r+0x1c>
 800c6a6:	6023      	str	r3, [r4, #0]
 800c6a8:	bd38      	pop	{r3, r4, r5, pc}
 800c6aa:	bf00      	nop
 800c6ac:	200005a0 	.word	0x200005a0

0800c6b0 <_isatty_r>:
 800c6b0:	b538      	push	{r3, r4, r5, lr}
 800c6b2:	4d06      	ldr	r5, [pc, #24]	; (800c6cc <_isatty_r+0x1c>)
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	4608      	mov	r0, r1
 800c6ba:	602b      	str	r3, [r5, #0]
 800c6bc:	f7f6 f8e7 	bl	800288e <_isatty>
 800c6c0:	1c43      	adds	r3, r0, #1
 800c6c2:	d102      	bne.n	800c6ca <_isatty_r+0x1a>
 800c6c4:	682b      	ldr	r3, [r5, #0]
 800c6c6:	b103      	cbz	r3, 800c6ca <_isatty_r+0x1a>
 800c6c8:	6023      	str	r3, [r4, #0]
 800c6ca:	bd38      	pop	{r3, r4, r5, pc}
 800c6cc:	200005a0 	.word	0x200005a0

0800c6d0 <_lseek_r>:
 800c6d0:	b538      	push	{r3, r4, r5, lr}
 800c6d2:	4d07      	ldr	r5, [pc, #28]	; (800c6f0 <_lseek_r+0x20>)
 800c6d4:	4604      	mov	r4, r0
 800c6d6:	4608      	mov	r0, r1
 800c6d8:	4611      	mov	r1, r2
 800c6da:	2200      	movs	r2, #0
 800c6dc:	602a      	str	r2, [r5, #0]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	f7f6 f8e0 	bl	80028a4 <_lseek>
 800c6e4:	1c43      	adds	r3, r0, #1
 800c6e6:	d102      	bne.n	800c6ee <_lseek_r+0x1e>
 800c6e8:	682b      	ldr	r3, [r5, #0]
 800c6ea:	b103      	cbz	r3, 800c6ee <_lseek_r+0x1e>
 800c6ec:	6023      	str	r3, [r4, #0]
 800c6ee:	bd38      	pop	{r3, r4, r5, pc}
 800c6f0:	200005a0 	.word	0x200005a0

0800c6f4 <_read_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	4d07      	ldr	r5, [pc, #28]	; (800c714 <_read_r+0x20>)
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	4608      	mov	r0, r1
 800c6fc:	4611      	mov	r1, r2
 800c6fe:	2200      	movs	r2, #0
 800c700:	602a      	str	r2, [r5, #0]
 800c702:	461a      	mov	r2, r3
 800c704:	f7f6 f86e 	bl	80027e4 <_read>
 800c708:	1c43      	adds	r3, r0, #1
 800c70a:	d102      	bne.n	800c712 <_read_r+0x1e>
 800c70c:	682b      	ldr	r3, [r5, #0]
 800c70e:	b103      	cbz	r3, 800c712 <_read_r+0x1e>
 800c710:	6023      	str	r3, [r4, #0]
 800c712:	bd38      	pop	{r3, r4, r5, pc}
 800c714:	200005a0 	.word	0x200005a0

0800c718 <_init>:
 800c718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71a:	bf00      	nop
 800c71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c71e:	bc08      	pop	{r3}
 800c720:	469e      	mov	lr, r3
 800c722:	4770      	bx	lr

0800c724 <_fini>:
 800c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c726:	bf00      	nop
 800c728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c72a:	bc08      	pop	{r3}
 800c72c:	469e      	mov	lr, r3
 800c72e:	4770      	bx	lr
