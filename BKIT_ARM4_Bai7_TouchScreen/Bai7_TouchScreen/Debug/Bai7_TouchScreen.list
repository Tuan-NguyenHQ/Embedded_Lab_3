
Bai7_TouchScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a18  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003088  08007ba0  08007ba0  00017ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac28  0800ac28  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac28  0800ac28  0001ac28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac30  0800ac30  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac30  0800ac30  0001ac30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac34  0800ac34  0001ac34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800ac38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          000002ec  200000b4  200000b4  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a0  200003a0  000200b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a719  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b54  00000000  00000000  0003a7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  0003e358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001298  00000000  00000000  0003f7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c9e  00000000  00000000  00040a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b264  00000000  00000000  000666d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddf81  00000000  00000000  0008193a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015f8bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055b4  00000000  00000000  0015f910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b4 	.word	0x200000b4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b88 	.word	0x08007b88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b8 	.word	0x200000b8
 80001c4:	08007b88 	.word	0x08007b88

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295
 8000af4:	f000 b96e 	b.w	8000dd4 <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	4604      	mov	r4, r0
 8000b18:	468c      	mov	ip, r1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f040 8083 	bne.w	8000c26 <__udivmoddi4+0x116>
 8000b20:	428a      	cmp	r2, r1
 8000b22:	4617      	mov	r7, r2
 8000b24:	d947      	bls.n	8000bb6 <__udivmoddi4+0xa6>
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	b142      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2c:	f1c2 0020 	rsb	r0, r2, #32
 8000b30:	fa24 f000 	lsr.w	r0, r4, r0
 8000b34:	4091      	lsls	r1, r2
 8000b36:	4097      	lsls	r7, r2
 8000b38:	ea40 0c01 	orr.w	ip, r0, r1
 8000b3c:	4094      	lsls	r4, r2
 8000b3e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b42:	0c23      	lsrs	r3, r4, #16
 8000b44:	fbbc f6f8 	udiv	r6, ip, r8
 8000b48:	fa1f fe87 	uxth.w	lr, r7
 8000b4c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b54:	fb06 f10e 	mul.w	r1, r6, lr
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x60>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b62:	f080 8119 	bcs.w	8000d98 <__udivmoddi4+0x288>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 8116 	bls.w	8000d98 <__udivmoddi4+0x288>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x8c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	f080 8105 	bcs.w	8000d9c <__udivmoddi4+0x28c>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f240 8102 	bls.w	8000d9c <__udivmoddi4+0x28c>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba0:	eba4 040e 	sub.w	r4, r4, lr
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa0>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	b902      	cbnz	r2, 8000bba <__udivmoddi4+0xaa>
 8000bb8:	deff      	udf	#255	; 0xff
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d150      	bne.n	8000c64 <__udivmoddi4+0x154>
 8000bc2:	1bcb      	subs	r3, r1, r7
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f f887 	uxth.w	r8, r7
 8000bcc:	2601      	movs	r6, #1
 8000bce:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bd2:	0c21      	lsrs	r1, r4, #16
 8000bd4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bdc:	fb08 f30c 	mul.w	r3, r8, ip
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d907      	bls.n	8000bf4 <__udivmoddi4+0xe4>
 8000be4:	1879      	adds	r1, r7, r1
 8000be6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0xe2>
 8000bec:	428b      	cmp	r3, r1
 8000bee:	f200 80e9 	bhi.w	8000dc4 <__udivmoddi4+0x2b4>
 8000bf2:	4684      	mov	ip, r0
 8000bf4:	1ac9      	subs	r1, r1, r3
 8000bf6:	b2a3      	uxth	r3, r4
 8000bf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c00:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c04:	fb08 f800 	mul.w	r8, r8, r0
 8000c08:	45a0      	cmp	r8, r4
 8000c0a:	d907      	bls.n	8000c1c <__udivmoddi4+0x10c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x10a>
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	f200 80d9 	bhi.w	8000dcc <__udivmoddi4+0x2bc>
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	eba4 0408 	sub.w	r4, r4, r8
 8000c20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c24:	e7bf      	b.n	8000ba6 <__udivmoddi4+0x96>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0x12e>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	f000 80b1 	beq.w	8000d92 <__udivmoddi4+0x282>
 8000c30:	2600      	movs	r6, #0
 8000c32:	e9c5 0100 	strd	r0, r1, [r5]
 8000c36:	4630      	mov	r0, r6
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f683 	clz	r6, r3
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d14a      	bne.n	8000cdc <__udivmoddi4+0x1cc>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0x140>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80b8 	bhi.w	8000dc0 <__udivmoddi4+0x2b0>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0103 	sbc.w	r1, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	468c      	mov	ip, r1
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0a8      	beq.n	8000bb0 <__udivmoddi4+0xa0>
 8000c5e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c62:	e7a5      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000c64:	f1c2 0320 	rsb	r3, r2, #32
 8000c68:	fa20 f603 	lsr.w	r6, r0, r3
 8000c6c:	4097      	lsls	r7, r2
 8000c6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c72:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c76:	40d9      	lsrs	r1, r3
 8000c78:	4330      	orrs	r0, r6
 8000c7a:	0c03      	lsrs	r3, r0, #16
 8000c7c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8c:	fb06 f108 	mul.w	r1, r6, r8
 8000c90:	4299      	cmp	r1, r3
 8000c92:	fa04 f402 	lsl.w	r4, r4, r2
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x19c>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c9e:	f080 808d 	bcs.w	8000dbc <__udivmoddi4+0x2ac>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 808a 	bls.w	8000dbc <__udivmoddi4+0x2ac>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b281      	uxth	r1, r0
 8000cb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb00 f308 	mul.w	r3, r0, r8
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x1c4>
 8000cc4:	1879      	adds	r1, r7, r1
 8000cc6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cca:	d273      	bcs.n	8000db4 <__udivmoddi4+0x2a4>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d971      	bls.n	8000db4 <__udivmoddi4+0x2a4>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4439      	add	r1, r7
 8000cd4:	1acb      	subs	r3, r1, r3
 8000cd6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cda:	e778      	b.n	8000bce <__udivmoddi4+0xbe>
 8000cdc:	f1c6 0c20 	rsb	ip, r6, #32
 8000ce0:	fa03 f406 	lsl.w	r4, r3, r6
 8000ce4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ce8:	431c      	orrs	r4, r3
 8000cea:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cee:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cf6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cfa:	431f      	orrs	r7, r3
 8000cfc:	0c3b      	lsrs	r3, r7, #16
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fa1f f884 	uxth.w	r8, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d0e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d12:	458a      	cmp	sl, r1
 8000d14:	fa02 f206 	lsl.w	r2, r2, r6
 8000d18:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x220>
 8000d1e:	1861      	adds	r1, r4, r1
 8000d20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d24:	d248      	bcs.n	8000db8 <__udivmoddi4+0x2a8>
 8000d26:	458a      	cmp	sl, r1
 8000d28:	d946      	bls.n	8000db8 <__udivmoddi4+0x2a8>
 8000d2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2e:	4421      	add	r1, r4
 8000d30:	eba1 010a 	sub.w	r1, r1, sl
 8000d34:	b2bf      	uxth	r7, r7
 8000d36:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d42:	fb00 f808 	mul.w	r8, r0, r8
 8000d46:	45b8      	cmp	r8, r7
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x24a>
 8000d4a:	19e7      	adds	r7, r4, r7
 8000d4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d50:	d22e      	bcs.n	8000db0 <__udivmoddi4+0x2a0>
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d92c      	bls.n	8000db0 <__udivmoddi4+0x2a0>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4427      	add	r7, r4
 8000d5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5e:	eba7 0708 	sub.w	r7, r7, r8
 8000d62:	fba0 8902 	umull	r8, r9, r0, r2
 8000d66:	454f      	cmp	r7, r9
 8000d68:	46c6      	mov	lr, r8
 8000d6a:	4649      	mov	r1, r9
 8000d6c:	d31a      	bcc.n	8000da4 <__udivmoddi4+0x294>
 8000d6e:	d017      	beq.n	8000da0 <__udivmoddi4+0x290>
 8000d70:	b15d      	cbz	r5, 8000d8a <__udivmoddi4+0x27a>
 8000d72:	ebb3 020e 	subs.w	r2, r3, lr
 8000d76:	eb67 0701 	sbc.w	r7, r7, r1
 8000d7a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d7e:	40f2      	lsrs	r2, r6
 8000d80:	ea4c 0202 	orr.w	r2, ip, r2
 8000d84:	40f7      	lsrs	r7, r6
 8000d86:	e9c5 2700 	strd	r2, r7, [r5]
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	462e      	mov	r6, r5
 8000d94:	4628      	mov	r0, r5
 8000d96:	e70b      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	e6e9      	b.n	8000b70 <__udivmoddi4+0x60>
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	e6fd      	b.n	8000b9c <__udivmoddi4+0x8c>
 8000da0:	4543      	cmp	r3, r8
 8000da2:	d2e5      	bcs.n	8000d70 <__udivmoddi4+0x260>
 8000da4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000da8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dac:	3801      	subs	r0, #1
 8000dae:	e7df      	b.n	8000d70 <__udivmoddi4+0x260>
 8000db0:	4608      	mov	r0, r1
 8000db2:	e7d2      	b.n	8000d5a <__udivmoddi4+0x24a>
 8000db4:	4660      	mov	r0, ip
 8000db6:	e78d      	b.n	8000cd4 <__udivmoddi4+0x1c4>
 8000db8:	4681      	mov	r9, r0
 8000dba:	e7b9      	b.n	8000d30 <__udivmoddi4+0x220>
 8000dbc:	4666      	mov	r6, ip
 8000dbe:	e775      	b.n	8000cac <__udivmoddi4+0x19c>
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	e74a      	b.n	8000c5a <__udivmoddi4+0x14a>
 8000dc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dc8:	4439      	add	r1, r7
 8000dca:	e713      	b.n	8000bf4 <__udivmoddi4+0xe4>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	e724      	b.n	8000c1c <__udivmoddi4+0x10c>
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dea:	4b3d      	ldr	r3, [pc, #244]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000dec:	4a3d      	ldr	r2, [pc, #244]	; (8000ee4 <MX_ADC1_Init+0x10c>)
 8000dee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000df0:	4b3b      	ldr	r3, [pc, #236]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df6:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dfc:	4b38      	ldr	r3, [pc, #224]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e02:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e08:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e10:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e16:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000e18:	4a33      	ldr	r2, [pc, #204]	; (8000ee8 <MX_ADC1_Init+0x110>)
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000e22:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000e24:	2205      	movs	r2, #5
 8000e26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e28:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e36:	482a      	ldr	r0, [pc, #168]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000e38:	f002 fdcc 	bl	80039d4 <HAL_ADC_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e42:	f001 fb3f 	bl	80024c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e46:	2308      	movs	r3, #8
 8000e48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	4619      	mov	r1, r3
 8000e56:	4822      	ldr	r0, [pc, #136]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000e58:	f002 fe00 	bl	8003a5c <HAL_ADC_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e62:	f001 fb2f 	bl	80024c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e66:	2309      	movs	r3, #9
 8000e68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6e:	463b      	mov	r3, r7
 8000e70:	4619      	mov	r1, r3
 8000e72:	481b      	ldr	r0, [pc, #108]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000e74:	f002 fdf2 	bl	8003a5c <HAL_ADC_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e7e:	f001 fb21 	bl	80024c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e82:	230a      	movs	r3, #10
 8000e84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e86:	2303      	movs	r3, #3
 8000e88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4814      	ldr	r0, [pc, #80]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000e90:	f002 fde4 	bl	8003a5c <HAL_ADC_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e9a:	f001 fb13 	bl	80024c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e9e:	230b      	movs	r3, #11
 8000ea0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000eac:	f002 fdd6 	bl	8003a5c <HAL_ADC_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000eb6:	f001 fb05 	bl	80024c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000eba:	230c      	movs	r3, #12
 8000ebc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_ADC1_Init+0x108>)
 8000ec8:	f002 fdc8 	bl	8003a5c <HAL_ADC_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000ed2:	f001 faf7 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200000e4 	.word	0x200000e4
 8000ee4:	40012000 	.word	0x40012000
 8000ee8:	0f000001 	.word	0x0f000001

08000eec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a3c      	ldr	r2, [pc, #240]	; (8000ffc <HAL_ADC_MspInit+0x110>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d171      	bne.n	8000ff2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b3b      	ldr	r3, [pc, #236]	; (8001000 <HAL_ADC_MspInit+0x114>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a3a      	ldr	r2, [pc, #232]	; (8001000 <HAL_ADC_MspInit+0x114>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b38      	ldr	r3, [pc, #224]	; (8001000 <HAL_ADC_MspInit+0x114>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b34      	ldr	r3, [pc, #208]	; (8001000 <HAL_ADC_MspInit+0x114>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a33      	ldr	r2, [pc, #204]	; (8001000 <HAL_ADC_MspInit+0x114>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b31      	ldr	r3, [pc, #196]	; (8001000 <HAL_ADC_MspInit+0x114>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_ADC_MspInit+0x114>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a2c      	ldr	r2, [pc, #176]	; (8001000 <HAL_ADC_MspInit+0x114>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <HAL_ADC_MspInit+0x114>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f62:	2307      	movs	r3, #7
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f66:	2303      	movs	r3, #3
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4823      	ldr	r0, [pc, #140]	; (8001004 <HAL_ADC_MspInit+0x118>)
 8000f76:	f003 fb8b 	bl	8004690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	481e      	ldr	r0, [pc, #120]	; (8001008 <HAL_ADC_MspInit+0x11c>)
 8000f8e:	f003 fb7f 	bl	8004690 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <HAL_ADC_MspInit+0x120>)
 8000f94:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <HAL_ADC_MspInit+0x124>)
 8000f96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <HAL_ADC_MspInit+0x120>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_ADC_MspInit+0x120>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <HAL_ADC_MspInit+0x120>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_ADC_MspInit+0x120>)
 8000fac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_ADC_MspInit+0x120>)
 8000fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_ADC_MspInit+0x120>)
 8000fbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_ADC_MspInit+0x120>)
 8000fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_ADC_MspInit+0x120>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_ADC_MspInit+0x120>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <HAL_ADC_MspInit+0x120>)
 8000fd8:	f003 f870 	bl	80040bc <HAL_DMA_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fe2:	f001 fa6f 	bl	80024c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_ADC_MspInit+0x120>)
 8000fea:	639a      	str	r2, [r3, #56]	; 0x38
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <HAL_ADC_MspInit+0x120>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40012000 	.word	0x40012000
 8001000:	40023800 	.word	0x40023800
 8001004:	40020800 	.word	0x40020800
 8001008:	40020400 	.word	0x40020400
 800100c:	2000012c 	.word	0x2000012c
 8001010:	40026410 	.word	0x40026410

08001014 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	at24c_Check();
 8001018:	f000 f83c 	bl	8001094 <at24c_Check>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 800102e:	88fa      	ldrh	r2, [r7, #6]
 8001030:	230a      	movs	r3, #10
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2301      	movs	r3, #1
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	f107 030f 	add.w	r3, r7, #15
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2310      	movs	r3, #16
 8001040:	21a0      	movs	r1, #160	; 0xa0
 8001042:	4804      	ldr	r0, [pc, #16]	; (8001054 <at24c_ReadOneByte+0x34>)
 8001044:	f003 ff4a 	bl	8004edc <HAL_I2C_Mem_Read>
	return temp;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200001dc 	.word	0x200001dc

08001058 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af04      	add	r7, sp, #16
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	80fb      	strh	r3, [r7, #6]
 8001064:	4613      	mov	r3, r2
 8001066:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8001068:	88fa      	ldrh	r2, [r7, #6]
 800106a:	230a      	movs	r3, #10
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2301      	movs	r3, #1
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	1d7b      	adds	r3, r7, #5
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2310      	movs	r3, #16
 8001078:	21a0      	movs	r1, #160	; 0xa0
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <at24c_WriteOneByte+0x38>)
 800107c:	f003 fe34 	bl	8004ce8 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001080:	2005      	movs	r0, #5
 8001082:	f002 fc83 	bl	800398c <HAL_Delay>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200001dc 	.word	0x200001dc

08001094 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800109a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800109e:	f7ff ffbf 	bl	8001020 <at24c_ReadOneByte>
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b55      	cmp	r3, #85	; 0x55
 80010aa:	d101      	bne.n	80010b0 <at24c_Check+0x1c>
 80010ac:	2300      	movs	r3, #0
 80010ae:	e010      	b.n	80010d2 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 80010b0:	2155      	movs	r1, #85	; 0x55
 80010b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010b6:	f7ff ffcf 	bl	8001058 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 80010ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010be:	f7ff ffaf 	bl	8001020 <at24c_ReadOneByte>
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b55      	cmp	r3, #85	; 0x55
 80010ca:	d101      	bne.n	80010d0 <at24c_Check+0x3c>
 80010cc:	2300      	movs	r3, #0
 80010ce:	e000      	b.n	80010d2 <at24c_Check+0x3e>
	}
	return 1;
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 80010da:	b590      	push	{r4, r7, lr}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	6039      	str	r1, [r7, #0]
 80010e4:	80fb      	strh	r3, [r7, #6]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80010ea:	e00d      	b.n	8001108 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	80fa      	strh	r2, [r7, #6]
 80010f2:	683c      	ldr	r4, [r7, #0]
 80010f4:	1c62      	adds	r2, r4, #1
 80010f6:	603a      	str	r2, [r7, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff91 	bl	8001020 <at24c_ReadOneByte>
 80010fe:	4603      	mov	r3, r0
 8001100:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8001102:	88bb      	ldrh	r3, [r7, #4]
 8001104:	3b01      	subs	r3, #1
 8001106:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001108:	88bb      	ldrh	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1ee      	bne.n	80010ec <at24c_Read+0x12>
	}
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bd90      	pop	{r4, r7, pc}

08001118 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	80fb      	strh	r3, [r7, #6]
 8001124:	4613      	mov	r3, r2
 8001126:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8001128:	e00c      	b.n	8001144 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff90 	bl	8001058 <at24c_WriteOneByte>
		WriteAddr++;
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	3301      	adds	r3, #1
 800113c:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 8001144:	88bb      	ldrh	r3, [r7, #4]
 8001146:	1e5a      	subs	r2, r3, #1
 8001148:	80ba      	strh	r2, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1ed      	bne.n	800112a <at24c_Write+0x12>
	}
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800115c:	2201      	movs	r2, #1
 800115e:	2108      	movs	r1, #8
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <button_init+0x14>)
 8001162:	f003 fc49 	bl	80049f8 <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40020c00 	.word	0x40020c00

08001170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_DMA_Init+0x3c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <MX_DMA_Init+0x3c>)
 8001180:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_DMA_Init+0x3c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2038      	movs	r0, #56	; 0x38
 8001198:	f002 ff59 	bl	800404e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800119c:	2038      	movs	r0, #56	; 0x38
 800119e:	f002 ff72 	bl	8004086 <HAL_NVIC_EnableIRQ>

}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08e      	sub	sp, #56	; 0x38
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <MX_FSMC_Init+0xec>)
 80011de:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011e2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80011e4:	4b2d      	ldr	r3, [pc, #180]	; (800129c <MX_FSMC_Init+0xec>)
 80011e6:	4a2e      	ldr	r2, [pc, #184]	; (80012a0 <MX_FSMC_Init+0xf0>)
 80011e8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80011ea:	4b2c      	ldr	r3, [pc, #176]	; (800129c <MX_FSMC_Init+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <MX_FSMC_Init+0xec>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80011f6:	4b29      	ldr	r3, [pc, #164]	; (800129c <MX_FSMC_Init+0xec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011fc:	4b27      	ldr	r3, [pc, #156]	; (800129c <MX_FSMC_Init+0xec>)
 80011fe:	2210      	movs	r2, #16
 8001200:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <MX_FSMC_Init+0xec>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <MX_FSMC_Init+0xec>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <MX_FSMC_Init+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <MX_FSMC_Init+0xec>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <MX_FSMC_Init+0xec>)
 800121c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001222:	4b1e      	ldr	r3, [pc, #120]	; (800129c <MX_FSMC_Init+0xec>)
 8001224:	2200      	movs	r2, #0
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_FSMC_Init+0xec>)
 800122a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800122e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_FSMC_Init+0xec>)
 8001232:	2200      	movs	r2, #0
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_FSMC_Init+0xec>)
 8001238:	2200      	movs	r2, #0
 800123a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_FSMC_Init+0xec>)
 800123e:	2200      	movs	r2, #0
 8001240:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001242:	230f      	movs	r3, #15
 8001244:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001246:	230f      	movs	r3, #15
 8001248:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800124a:	233c      	movs	r3, #60	; 0x3c
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001252:	2310      	movs	r3, #16
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001256:	2311      	movs	r3, #17
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800125a:	2300      	movs	r3, #0
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800125e:	2308      	movs	r3, #8
 8001260:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001262:	230f      	movs	r3, #15
 8001264:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001266:	2309      	movs	r3, #9
 8001268:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800126e:	2310      	movs	r3, #16
 8001270:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001272:	2311      	movs	r3, #17
 8001274:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800127a:	463a      	mov	r2, r7
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <MX_FSMC_Init+0xec>)
 8001284:	f005 fa9c 	bl	80067c0 <HAL_SRAM_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800128e:	f001 f919 	bl	80024c4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001292:	bf00      	nop
 8001294:	3738      	adds	r7, #56	; 0x38
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000018c 	.word	0x2000018c
 80012a0:	a0000104 	.word	0xa0000104

080012a4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_FSMC_MspInit+0x88>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d131      	bne.n	8001324 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_FSMC_MspInit+0x88>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_FSMC_MspInit+0x8c>)
 80012cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <HAL_FSMC_MspInit+0x8c>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6393      	str	r3, [r2, #56]	; 0x38
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_FSMC_MspInit+0x8c>)
 80012d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80012e2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80012e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012f4:	230c      	movs	r3, #12
 80012f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <HAL_FSMC_MspInit+0x90>)
 80012fe:	f003 f9c7 	bl	8004690 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001302:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001306:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001314:	230c      	movs	r3, #12
 8001316:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4806      	ldr	r0, [pc, #24]	; (8001338 <HAL_FSMC_MspInit+0x94>)
 800131e:	f003 f9b7 	bl	8004690 <HAL_GPIO_Init>
 8001322:	e000      	b.n	8001326 <HAL_FSMC_MspInit+0x82>
    return;
 8001324:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200000d0 	.word	0x200000d0
 8001330:	40023800 	.word	0x40023800
 8001334:	40021000 	.word	0x40021000
 8001338:	40020c00 	.word	0x40020c00

0800133c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001344:	f7ff ffae 	bl	80012a4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
 800136a:	4b7e      	ldr	r3, [pc, #504]	; (8001564 <MX_GPIO_Init+0x214>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a7d      	ldr	r2, [pc, #500]	; (8001564 <MX_GPIO_Init+0x214>)
 8001370:	f043 0310 	orr.w	r3, r3, #16
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b7b      	ldr	r3, [pc, #492]	; (8001564 <MX_GPIO_Init+0x214>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	623b      	str	r3, [r7, #32]
 8001380:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	4b77      	ldr	r3, [pc, #476]	; (8001564 <MX_GPIO_Init+0x214>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a76      	ldr	r2, [pc, #472]	; (8001564 <MX_GPIO_Init+0x214>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b74      	ldr	r3, [pc, #464]	; (8001564 <MX_GPIO_Init+0x214>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	4b70      	ldr	r3, [pc, #448]	; (8001564 <MX_GPIO_Init+0x214>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a6f      	ldr	r2, [pc, #444]	; (8001564 <MX_GPIO_Init+0x214>)
 80013a8:	f043 0320 	orr.w	r3, r3, #32
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b6d      	ldr	r3, [pc, #436]	; (8001564 <MX_GPIO_Init+0x214>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0320 	and.w	r3, r3, #32
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	4b69      	ldr	r3, [pc, #420]	; (8001564 <MX_GPIO_Init+0x214>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a68      	ldr	r2, [pc, #416]	; (8001564 <MX_GPIO_Init+0x214>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b66      	ldr	r3, [pc, #408]	; (8001564 <MX_GPIO_Init+0x214>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b62      	ldr	r3, [pc, #392]	; (8001564 <MX_GPIO_Init+0x214>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a61      	ldr	r2, [pc, #388]	; (8001564 <MX_GPIO_Init+0x214>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <MX_GPIO_Init+0x214>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <MX_GPIO_Init+0x214>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a5a      	ldr	r2, [pc, #360]	; (8001564 <MX_GPIO_Init+0x214>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b58      	ldr	r3, [pc, #352]	; (8001564 <MX_GPIO_Init+0x214>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b54      	ldr	r3, [pc, #336]	; (8001564 <MX_GPIO_Init+0x214>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a53      	ldr	r2, [pc, #332]	; (8001564 <MX_GPIO_Init+0x214>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b51      	ldr	r3, [pc, #324]	; (8001564 <MX_GPIO_Init+0x214>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <MX_GPIO_Init+0x214>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a4c      	ldr	r2, [pc, #304]	; (8001564 <MX_GPIO_Init+0x214>)
 8001434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <MX_GPIO_Init+0x214>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2170      	movs	r1, #112	; 0x70
 800144a:	4847      	ldr	r0, [pc, #284]	; (8001568 <MX_GPIO_Init+0x218>)
 800144c:	f003 fad4 	bl	80049f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8001456:	4845      	ldr	r0, [pc, #276]	; (800156c <MX_GPIO_Init+0x21c>)
 8001458:	f003 face 	bl	80049f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001462:	4843      	ldr	r0, [pc, #268]	; (8001570 <MX_GPIO_Init+0x220>)
 8001464:	f003 fac8 	bl	80049f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146e:	4841      	ldr	r0, [pc, #260]	; (8001574 <MX_GPIO_Init+0x224>)
 8001470:	f003 fac2 	bl	80049f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2108      	movs	r1, #8
 8001478:	483f      	ldr	r0, [pc, #252]	; (8001578 <MX_GPIO_Init+0x228>)
 800147a:	f003 fabd 	bl	80049f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800147e:	2370      	movs	r3, #112	; 0x70
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001492:	4619      	mov	r1, r3
 8001494:	4834      	ldr	r0, [pc, #208]	; (8001568 <MX_GPIO_Init+0x218>)
 8001496:	f003 f8fb 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 800149a:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	482e      	ldr	r0, [pc, #184]	; (800156c <MX_GPIO_Init+0x21c>)
 80014b4:	f003 f8ec 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80014b8:	23c0      	movs	r3, #192	; 0xc0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	482a      	ldr	r0, [pc, #168]	; (8001574 <MX_GPIO_Init+0x224>)
 80014cc:	f003 f8e0 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80014d0:	2330      	movs	r3, #48	; 0x30
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4822      	ldr	r0, [pc, #136]	; (800156c <MX_GPIO_Init+0x21c>)
 80014e4:	f003 f8d4 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 80014e8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	481b      	ldr	r0, [pc, #108]	; (8001570 <MX_GPIO_Init+0x220>)
 8001502:	f003 f8c5 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8001506:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001510:	2301      	movs	r3, #1
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <MX_GPIO_Init+0x21c>)
 800151c:	f003 f8b8 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	480e      	ldr	r0, [pc, #56]	; (8001574 <MX_GPIO_Init+0x224>)
 800153a:	f003 f8a9 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800153e:	2308      	movs	r3, #8
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001552:	4619      	mov	r1, r3
 8001554:	4808      	ldr	r0, [pc, #32]	; (8001578 <MX_GPIO_Init+0x228>)
 8001556:	f003 f89b 	bl	8004690 <HAL_GPIO_Init>

}
 800155a:	bf00      	nop
 800155c:	3738      	adds	r7, #56	; 0x38
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40021000 	.word	0x40021000
 800156c:	40020800 	.word	0x40020800
 8001570:	40021800 	.word	0x40021800
 8001574:	40020000 	.word	0x40020000
 8001578:	40020c00 	.word	0x40020c00

0800157c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_I2C1_Init+0x50>)
 8001582:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <MX_I2C1_Init+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_I2C1_Init+0x50>)
 8001588:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <MX_I2C1_Init+0x58>)
 800158a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_I2C1_Init+0x50>)
 800159a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800159e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <MX_I2C1_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_I2C1_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <MX_I2C1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_I2C1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <MX_I2C1_Init+0x50>)
 80015ba:	f003 fa51 	bl	8004a60 <HAL_I2C_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015c4:	f000 ff7e 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200001dc 	.word	0x200001dc
 80015d0:	40005400 	.word	0x40005400
 80015d4:	000186a0 	.word	0x000186a0

080015d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	; (800165c <HAL_I2C_MspInit+0x84>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12b      	bne.n	8001652 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_I2C_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a17      	ldr	r2, [pc, #92]	; (8001660 <HAL_I2C_MspInit+0x88>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_I2C_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001616:	23c0      	movs	r3, #192	; 0xc0
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161a:	2312      	movs	r3, #18
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001626:	2304      	movs	r3, #4
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <HAL_I2C_MspInit+0x8c>)
 8001632:	f003 f82d 	bl	8004690 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_I2C_MspInit+0x88>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <HAL_I2C_MspInit+0x88>)
 8001640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_I2C_MspInit+0x88>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40005400 	.word	0x40005400
 8001660:	40023800 	.word	0x40023800
 8001664:	40020400 	.word	0x40020400

08001668 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <LCD_WR_REG+0x1c>)
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	8013      	strh	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	600ffffe 	.word	0x600ffffe

08001688 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001692:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <LCD_WR_DATA+0x1c>)
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	8053      	strh	r3, [r2, #2]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	600ffffe 	.word	0x600ffffe

080016a8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <LCD_RD_DATA+0x20>)
 80016b0:	885b      	ldrh	r3, [r3, #2]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	b29b      	uxth	r3, r3
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	600ffffe 	.word	0x600ffffe

080016cc <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4604      	mov	r4, r0
 80016d4:	4608      	mov	r0, r1
 80016d6:	4611      	mov	r1, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	4623      	mov	r3, r4
 80016dc:	80fb      	strh	r3, [r7, #6]
 80016de:	4603      	mov	r3, r0
 80016e0:	80bb      	strh	r3, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	807b      	strh	r3, [r7, #2]
 80016e6:	4613      	mov	r3, r2
 80016e8:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80016ea:	202a      	movs	r0, #42	; 0x2a
 80016ec:	f7ff ffbc 	bl	8001668 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	0a1b      	lsrs	r3, r3, #8
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ffc6 	bl	8001688 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	b29b      	uxth	r3, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ffc0 	bl	8001688 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	b29b      	uxth	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ffba 	bl	8001688 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	b29b      	uxth	r3, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ffb4 	bl	8001688 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001720:	202b      	movs	r0, #43	; 0x2b
 8001722:	f7ff ffa1 	bl	8001668 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001726:	88bb      	ldrh	r3, [r7, #4]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b29b      	uxth	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ffab 	bl	8001688 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001732:	88bb      	ldrh	r3, [r7, #4]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	b29b      	uxth	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ffa5 	bl	8001688 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800173e:	883b      	ldrh	r3, [r7, #0]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	b29b      	uxth	r3, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff9f 	bl	8001688 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800174a:	883b      	ldrh	r3, [r7, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	b29b      	uxth	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff99 	bl	8001688 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001756:	202c      	movs	r0, #44	; 0x2c
 8001758:	f7ff ff86 	bl	8001668 <LCD_WR_REG>
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bd90      	pop	{r4, r7, pc}

08001764 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <lcd_Clear+0x60>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	3b01      	subs	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <lcd_Clear+0x60>)
 8001778:	885b      	ldrh	r3, [r3, #2]
 800177a:	3b01      	subs	r3, #1
 800177c:	b29b      	uxth	r3, r3
 800177e:	2100      	movs	r1, #0
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff ffa3 	bl	80016cc <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001786:	2300      	movs	r3, #0
 8001788:	81fb      	strh	r3, [r7, #14]
 800178a:	e011      	b.n	80017b0 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 800178c:	2300      	movs	r3, #0
 800178e:	81bb      	strh	r3, [r7, #12]
 8001790:	e006      	b.n	80017a0 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff77 	bl	8001688 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800179a:	89bb      	ldrh	r3, [r7, #12]
 800179c:	3301      	adds	r3, #1
 800179e:	81bb      	strh	r3, [r7, #12]
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <lcd_Clear+0x60>)
 80017a2:	885b      	ldrh	r3, [r3, #2]
 80017a4:	89ba      	ldrh	r2, [r7, #12]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d3f3      	bcc.n	8001792 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80017aa:	89fb      	ldrh	r3, [r7, #14]
 80017ac:	3301      	adds	r3, #1
 80017ae:	81fb      	strh	r3, [r7, #14]
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <lcd_Clear+0x60>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	89fa      	ldrh	r2, [r7, #14]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d3e8      	bcc.n	800178c <lcd_Clear+0x28>
		}
	}
}
 80017ba:	bf00      	nop
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000230 	.word	0x20000230

080017c8 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4604      	mov	r4, r0
 80017d0:	4608      	mov	r0, r1
 80017d2:	4611      	mov	r1, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	4623      	mov	r3, r4
 80017d8:	80fb      	strh	r3, [r7, #6]
 80017da:	4603      	mov	r3, r0
 80017dc:	80bb      	strh	r3, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	807b      	strh	r3, [r7, #2]
 80017e2:	4613      	mov	r3, r2
 80017e4:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	883b      	ldrh	r3, [r7, #0]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	88b9      	ldrh	r1, [r7, #4]
 80017f4:	88f8      	ldrh	r0, [r7, #6]
 80017f6:	f7ff ff69 	bl	80016cc <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 80017fa:	88bb      	ldrh	r3, [r7, #4]
 80017fc:	81fb      	strh	r3, [r7, #14]
 80017fe:	e010      	b.n	8001822 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	81bb      	strh	r3, [r7, #12]
 8001804:	e006      	b.n	8001814 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001806:	8c3b      	ldrh	r3, [r7, #32]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff3d 	bl	8001688 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800180e:	89bb      	ldrh	r3, [r7, #12]
 8001810:	3301      	adds	r3, #1
 8001812:	81bb      	strh	r3, [r7, #12]
 8001814:	89ba      	ldrh	r2, [r7, #12]
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	429a      	cmp	r2, r3
 800181a:	d3f4      	bcc.n	8001806 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 800181c:	89fb      	ldrh	r3, [r7, #14]
 800181e:	3301      	adds	r3, #1
 8001820:	81fb      	strh	r3, [r7, #14]
 8001822:	89fa      	ldrh	r2, [r7, #14]
 8001824:	883b      	ldrh	r3, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d3ea      	bcc.n	8001800 <lcd_Fill+0x38>
		}
	}
}
 800182a:	bf00      	nop
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bd90      	pop	{r4, r7, pc}

08001834 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	80fb      	strh	r3, [r7, #6]
 800183e:	460b      	mov	r3, r1
 8001840:	80bb      	strh	r3, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001846:	88bb      	ldrh	r3, [r7, #4]
 8001848:	88fa      	ldrh	r2, [r7, #6]
 800184a:	88b9      	ldrh	r1, [r7, #4]
 800184c:	88f8      	ldrh	r0, [r7, #6]
 800184e:	f7ff ff3d 	bl	80016cc <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff17 	bl	8001688 <LCD_WR_DATA>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001862:	b590      	push	{r4, r7, lr}
 8001864:	b08d      	sub	sp, #52	; 0x34
 8001866:	af00      	add	r7, sp, #0
 8001868:	4604      	mov	r4, r0
 800186a:	4608      	mov	r0, r1
 800186c:	4611      	mov	r1, r2
 800186e:	461a      	mov	r2, r3
 8001870:	4623      	mov	r3, r4
 8001872:	80fb      	strh	r3, [r7, #6]
 8001874:	4603      	mov	r3, r0
 8001876:	80bb      	strh	r3, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001888:	887a      	ldrh	r2, [r7, #2]
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001890:	883a      	ldrh	r2, [r7, #0]
 8001892:	88bb      	ldrh	r3, [r7, #4]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 800189c:	88bb      	ldrh	r3, [r7, #4]
 800189e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	dd02      	ble.n	80018ac <lcd_DrawLine+0x4a>
 80018a6:	2301      	movs	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e00b      	b.n	80018c4 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <lcd_DrawLine+0x56>
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e005      	b.n	80018c4 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	425b      	negs	r3, r3
 80018c2:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	dd02      	ble.n	80018d0 <lcd_DrawLine+0x6e>
 80018ca:	2301      	movs	r3, #1
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	e00b      	b.n	80018e8 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <lcd_DrawLine+0x7a>
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	e005      	b.n	80018e8 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	425b      	negs	r3, r3
 80018e6:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 80018e8:	6a3a      	ldr	r2, [r7, #32]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dd02      	ble.n	80018f6 <lcd_DrawLine+0x94>
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	e001      	b.n	80018fa <lcd_DrawLine+0x98>
	else distance=delta_y;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80018fe:	e02b      	b.n	8001958 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	b29b      	uxth	r3, r3
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	b291      	uxth	r1, r2
 8001908:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff91 	bl	8001834 <lcd_DrawPoint>
		xerr+=delta_x;
 8001912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	4413      	add	r3, r2
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	4413      	add	r3, r2
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	429a      	cmp	r2, r3
 8001928:	dd07      	ble.n	800193a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 800192a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 800193a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	429a      	cmp	r2, r3
 8001940:	dd07      	ble.n	8001952 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4413      	add	r3, r2
 8001950:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001952:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001954:	3301      	adds	r3, #1
 8001956:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001958:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	429a      	cmp	r2, r3
 800195e:	dacf      	bge.n	8001900 <lcd_DrawLine+0x9e>
		}
	}
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3734      	adds	r7, #52	; 0x34
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
	...

0800196c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	4604      	mov	r4, r0
 8001974:	4608      	mov	r0, r1
 8001976:	4611      	mov	r1, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4623      	mov	r3, r4
 800197c:	80fb      	strh	r3, [r7, #6]
 800197e:	4603      	mov	r3, r0
 8001980:	80bb      	strh	r3, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	70fb      	strb	r3, [r7, #3]
 8001986:	4613      	mov	r3, r2
 8001988:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 800198a:	2300      	movs	r3, #0
 800198c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001992:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	08db      	lsrs	r3, r3, #3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf14      	ite	ne
 80019ae:	2301      	movne	r3, #1
 80019b0:	2300      	moveq	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019bc:	b29b      	uxth	r3, r3
 80019be:	fb12 f303 	smulbb	r3, r2, r3
 80019c2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	3b20      	subs	r3, #32
 80019c8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4413      	add	r3, r2
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29c      	uxth	r4, r3
 80019d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019dc:	b29a      	uxth	r2, r3
 80019de:	88bb      	ldrh	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	88b9      	ldrh	r1, [r7, #4]
 80019ea:	88f8      	ldrh	r0, [r7, #6]
 80019ec:	4622      	mov	r2, r4
 80019ee:	f7ff fe6d 	bl	80016cc <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	827b      	strh	r3, [r7, #18]
 80019f6:	e07a      	b.n	8001aee <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80019f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019fc:	2b0c      	cmp	r3, #12
 80019fe:	d028      	beq.n	8001a52 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001a00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a04:	2b10      	cmp	r3, #16
 8001a06:	d108      	bne.n	8001a1a <lcd_ShowChar+0xae>
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	8a7b      	ldrh	r3, [r7, #18]
 8001a0c:	493c      	ldr	r1, [pc, #240]	; (8001b00 <lcd_ShowChar+0x194>)
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	440a      	add	r2, r1
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	75fb      	strb	r3, [r7, #23]
 8001a18:	e01b      	b.n	8001a52 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001a1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a1e:	2b18      	cmp	r3, #24
 8001a20:	d10b      	bne.n	8001a3a <lcd_ShowChar+0xce>
 8001a22:	78fa      	ldrb	r2, [r7, #3]
 8001a24:	8a79      	ldrh	r1, [r7, #18]
 8001a26:	4837      	ldr	r0, [pc, #220]	; (8001b04 <lcd_ShowChar+0x198>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	4403      	add	r3, r0
 8001a32:	440b      	add	r3, r1
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	75fb      	strb	r3, [r7, #23]
 8001a38:	e00b      	b.n	8001a52 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001a3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d15a      	bne.n	8001af8 <lcd_ShowChar+0x18c>
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	8a7b      	ldrh	r3, [r7, #18]
 8001a46:	4930      	ldr	r1, [pc, #192]	; (8001b08 <lcd_ShowChar+0x19c>)
 8001a48:	0192      	lsls	r2, r2, #6
 8001a4a:	440a      	add	r2, r1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	75bb      	strb	r3, [r7, #22]
 8001a56:	e044      	b.n	8001ae2 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001a58:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d120      	bne.n	8001aa2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001a60:	7dfa      	ldrb	r2, [r7, #23]
 8001a62:	7dbb      	ldrb	r3, [r7, #22]
 8001a64:	fa42 f303 	asr.w	r3, r2, r3
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d004      	beq.n	8001a7a <lcd_ShowChar+0x10e>
 8001a70:	883b      	ldrh	r3, [r7, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fe08 	bl	8001688 <LCD_WR_DATA>
 8001a78:	e003      	b.n	8001a82 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001a7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fe03 	bl	8001688 <LCD_WR_DATA>
				m++;
 8001a82:	7d7b      	ldrb	r3, [r7, #21]
 8001a84:	3301      	adds	r3, #1
 8001a86:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001a88:	7d7b      	ldrb	r3, [r7, #21]
 8001a8a:	7bfa      	ldrb	r2, [r7, #15]
 8001a8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a90:	fb02 f201 	mul.w	r2, r2, r1
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d11f      	bne.n	8001adc <lcd_ShowChar+0x170>
				{
					m=0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	757b      	strb	r3, [r7, #21]
					break;
 8001aa0:	e022      	b.n	8001ae8 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001aa2:	7dfa      	ldrb	r2, [r7, #23]
 8001aa4:	7dbb      	ldrb	r3, [r7, #22]
 8001aa6:	fa42 f303 	asr.w	r3, r2, r3
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <lcd_ShowChar+0x152>
 8001ab2:	883a      	ldrh	r2, [r7, #0]
 8001ab4:	88b9      	ldrh	r1, [r7, #4]
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff febb 	bl	8001834 <lcd_DrawPoint>
				x++;
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001ac4:	88fa      	ldrh	r2, [r7, #6]
 8001ac6:	8a3b      	ldrh	r3, [r7, #16]
 8001ac8:	1ad2      	subs	r2, r2, r3
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d105      	bne.n	8001adc <lcd_ShowChar+0x170>
				{
					x=x0;
 8001ad0:	8a3b      	ldrh	r3, [r7, #16]
 8001ad2:	80fb      	strh	r3, [r7, #6]
					y++;
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	80bb      	strh	r3, [r7, #4]
					break;
 8001ada:	e005      	b.n	8001ae8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001adc:	7dbb      	ldrb	r3, [r7, #22]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	75bb      	strb	r3, [r7, #22]
 8001ae2:	7dbb      	ldrb	r3, [r7, #22]
 8001ae4:	2b07      	cmp	r3, #7
 8001ae6:	d9b7      	bls.n	8001a58 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001ae8:	8a7b      	ldrh	r3, [r7, #18]
 8001aea:	3301      	adds	r3, #1
 8001aec:	827b      	strh	r3, [r7, #18]
 8001aee:	8a7a      	ldrh	r2, [r7, #18]
 8001af0:	89bb      	ldrh	r3, [r7, #12]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d380      	bcc.n	80019f8 <lcd_ShowChar+0x8c>
 8001af6:	e000      	b.n	8001afa <lcd_ShowChar+0x18e>
		else return;
 8001af8:	bf00      	nop
				}
			}
		}
	}
}
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd90      	pop	{r4, r7, pc}
 8001b00:	08007c88 	.word	0x08007c88
 8001b04:	08008278 	.word	0x08008278
 8001b08:	08009448 	.word	0x08009448

08001b0c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <lcd_SetDir+0x44>)
 8001b28:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b2c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <lcd_SetDir+0x44>)
 8001b30:	22f0      	movs	r2, #240	; 0xf0
 8001b32:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001b34:	e006      	b.n	8001b44 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <lcd_SetDir+0x44>)
 8001b38:	22f0      	movs	r2, #240	; 0xf0
 8001b3a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <lcd_SetDir+0x44>)
 8001b3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b42:	805a      	strh	r2, [r3, #2]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	20000230 	.word	0x20000230

08001b54 <lcd_init>:


void lcd_init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5e:	48aa      	ldr	r0, [pc, #680]	; (8001e08 <lcd_init+0x2b4>)
 8001b60:	f002 ff4a 	bl	80049f8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b68:	f001 ff10 	bl	800398c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b72:	48a5      	ldr	r0, [pc, #660]	; (8001e08 <lcd_init+0x2b4>)
 8001b74:	f002 ff40 	bl	80049f8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001b78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b7c:	f001 ff06 	bl	800398c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff ffc3 	bl	8001b0c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001b86:	20d3      	movs	r0, #211	; 0xd3
 8001b88:	f7ff fd6e 	bl	8001668 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001b8c:	f7ff fd8c 	bl	80016a8 <LCD_RD_DATA>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b9d      	ldr	r3, [pc, #628]	; (8001e0c <lcd_init+0x2b8>)
 8001b96:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001b98:	f7ff fd86 	bl	80016a8 <LCD_RD_DATA>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b9a      	ldr	r3, [pc, #616]	; (8001e0c <lcd_init+0x2b8>)
 8001ba2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001ba4:	f7ff fd80 	bl	80016a8 <LCD_RD_DATA>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b97      	ldr	r3, [pc, #604]	; (8001e0c <lcd_init+0x2b8>)
 8001bae:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001bb0:	4b96      	ldr	r3, [pc, #600]	; (8001e0c <lcd_init+0x2b8>)
 8001bb2:	889b      	ldrh	r3, [r3, #4]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	4b94      	ldr	r3, [pc, #592]	; (8001e0c <lcd_init+0x2b8>)
 8001bba:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001bbc:	f7ff fd74 	bl	80016a8 <LCD_RD_DATA>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b91      	ldr	r3, [pc, #580]	; (8001e0c <lcd_init+0x2b8>)
 8001bc6:	889b      	ldrh	r3, [r3, #4]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	4b8f      	ldr	r3, [pc, #572]	; (8001e0c <lcd_init+0x2b8>)
 8001bce:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001bd0:	20cf      	movs	r0, #207	; 0xcf
 8001bd2:	f7ff fd49 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fd56 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001bdc:	20c1      	movs	r0, #193	; 0xc1
 8001bde:	f7ff fd53 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001be2:	2030      	movs	r0, #48	; 0x30
 8001be4:	f7ff fd50 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001be8:	20ed      	movs	r0, #237	; 0xed
 8001bea:	f7ff fd3d 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001bee:	2064      	movs	r0, #100	; 0x64
 8001bf0:	f7ff fd4a 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f7ff fd47 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001bfa:	2012      	movs	r0, #18
 8001bfc:	f7ff fd44 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001c00:	2081      	movs	r0, #129	; 0x81
 8001c02:	f7ff fd41 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001c06:	20e8      	movs	r0, #232	; 0xe8
 8001c08:	f7ff fd2e 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001c0c:	2085      	movs	r0, #133	; 0x85
 8001c0e:	f7ff fd3b 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001c12:	2010      	movs	r0, #16
 8001c14:	f7ff fd38 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001c18:	207a      	movs	r0, #122	; 0x7a
 8001c1a:	f7ff fd35 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001c1e:	20cb      	movs	r0, #203	; 0xcb
 8001c20:	f7ff fd22 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001c24:	2039      	movs	r0, #57	; 0x39
 8001c26:	f7ff fd2f 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001c2a:	202c      	movs	r0, #44	; 0x2c
 8001c2c:	f7ff fd2c 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff fd29 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001c36:	2034      	movs	r0, #52	; 0x34
 8001c38:	f7ff fd26 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f7ff fd23 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001c42:	20f7      	movs	r0, #247	; 0xf7
 8001c44:	f7ff fd10 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001c48:	2020      	movs	r0, #32
 8001c4a:	f7ff fd1d 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001c4e:	20ea      	movs	r0, #234	; 0xea
 8001c50:	f7ff fd0a 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff fd17 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f7ff fd14 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001c60:	20c0      	movs	r0, #192	; 0xc0
 8001c62:	f7ff fd01 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001c66:	201b      	movs	r0, #27
 8001c68:	f7ff fd0e 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001c6c:	20c1      	movs	r0, #193	; 0xc1
 8001c6e:	f7ff fcfb 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff fd08 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001c78:	20c5      	movs	r0, #197	; 0xc5
 8001c7a:	f7ff fcf5 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001c7e:	2030      	movs	r0, #48	; 0x30
 8001c80:	f7ff fd02 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001c84:	2030      	movs	r0, #48	; 0x30
 8001c86:	f7ff fcff 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001c8a:	20c7      	movs	r0, #199	; 0xc7
 8001c8c:	f7ff fcec 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001c90:	20b7      	movs	r0, #183	; 0xb7
 8001c92:	f7ff fcf9 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001c96:	2036      	movs	r0, #54	; 0x36
 8001c98:	f7ff fce6 	bl	8001668 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001c9c:	2008      	movs	r0, #8
 8001c9e:	f7ff fcf3 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001ca2:	203a      	movs	r0, #58	; 0x3a
 8001ca4:	f7ff fce0 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001ca8:	2055      	movs	r0, #85	; 0x55
 8001caa:	f7ff fced 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001cae:	20b1      	movs	r0, #177	; 0xb1
 8001cb0:	f7ff fcda 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff fce7 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001cba:	201a      	movs	r0, #26
 8001cbc:	f7ff fce4 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001cc0:	20b6      	movs	r0, #182	; 0xb6
 8001cc2:	f7ff fcd1 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001cc6:	200a      	movs	r0, #10
 8001cc8:	f7ff fcde 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001ccc:	20a2      	movs	r0, #162	; 0xa2
 8001cce:	f7ff fcdb 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001cd2:	20f2      	movs	r0, #242	; 0xf2
 8001cd4:	f7ff fcc8 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff fcd5 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001cde:	2026      	movs	r0, #38	; 0x26
 8001ce0:	f7ff fcc2 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff fccf 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001cea:	20e0      	movs	r0, #224	; 0xe0
 8001cec:	f7ff fcbc 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001cf0:	200f      	movs	r0, #15
 8001cf2:	f7ff fcc9 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001cf6:	202a      	movs	r0, #42	; 0x2a
 8001cf8:	f7ff fcc6 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001cfc:	2028      	movs	r0, #40	; 0x28
 8001cfe:	f7ff fcc3 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001d02:	2008      	movs	r0, #8
 8001d04:	f7ff fcc0 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001d08:	200e      	movs	r0, #14
 8001d0a:	f7ff fcbd 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001d0e:	2008      	movs	r0, #8
 8001d10:	f7ff fcba 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001d14:	2054      	movs	r0, #84	; 0x54
 8001d16:	f7ff fcb7 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001d1a:	20a9      	movs	r0, #169	; 0xa9
 8001d1c:	f7ff fcb4 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001d20:	2043      	movs	r0, #67	; 0x43
 8001d22:	f7ff fcb1 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001d26:	200a      	movs	r0, #10
 8001d28:	f7ff fcae 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001d2c:	200f      	movs	r0, #15
 8001d2e:	f7ff fcab 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff fca8 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff fca5 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff fca2 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff fc9f 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001d4a:	20e1      	movs	r0, #225	; 0xe1
 8001d4c:	f7ff fc8c 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fc99 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001d56:	2015      	movs	r0, #21
 8001d58:	f7ff fc96 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001d5c:	2017      	movs	r0, #23
 8001d5e:	f7ff fc93 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001d62:	2007      	movs	r0, #7
 8001d64:	f7ff fc90 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001d68:	2011      	movs	r0, #17
 8001d6a:	f7ff fc8d 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001d6e:	2006      	movs	r0, #6
 8001d70:	f7ff fc8a 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001d74:	202b      	movs	r0, #43	; 0x2b
 8001d76:	f7ff fc87 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001d7a:	2056      	movs	r0, #86	; 0x56
 8001d7c:	f7ff fc84 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001d80:	203c      	movs	r0, #60	; 0x3c
 8001d82:	f7ff fc81 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001d86:	2005      	movs	r0, #5
 8001d88:	f7ff fc7e 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d8c:	2010      	movs	r0, #16
 8001d8e:	f7ff fc7b 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001d92:	200f      	movs	r0, #15
 8001d94:	f7ff fc78 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001d98:	203f      	movs	r0, #63	; 0x3f
 8001d9a:	f7ff fc75 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001d9e:	203f      	movs	r0, #63	; 0x3f
 8001da0:	f7ff fc72 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001da4:	200f      	movs	r0, #15
 8001da6:	f7ff fc6f 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001daa:	202b      	movs	r0, #43	; 0x2b
 8001dac:	f7ff fc5c 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff fc69 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fc66 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7ff fc63 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001dc2:	203f      	movs	r0, #63	; 0x3f
 8001dc4:	f7ff fc60 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001dc8:	202a      	movs	r0, #42	; 0x2a
 8001dca:	f7ff fc4d 	bl	8001668 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff fc5a 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff fc57 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff fc54 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001de0:	20ef      	movs	r0, #239	; 0xef
 8001de2:	f7ff fc51 	bl	8001688 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001de6:	2011      	movs	r0, #17
 8001de8:	f7ff fc3e 	bl	8001668 <LCD_WR_REG>
	HAL_Delay(120);
 8001dec:	2078      	movs	r0, #120	; 0x78
 8001dee:	f001 fdcd 	bl	800398c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001df2:	2029      	movs	r0, #41	; 0x29
 8001df4:	f7ff fc38 	bl	8001668 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dfe:	4804      	ldr	r0, [pc, #16]	; (8001e10 <lcd_init+0x2bc>)
 8001e00:	f002 fdfa 	bl	80049f8 <HAL_GPIO_WritePin>
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	20000230 	.word	0x20000230
 8001e10:	40020000 	.word	0x40020000

08001e14 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b298      	uxth	r0, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	8b3a      	ldrh	r2, [r7, #24]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7ff fcf9 	bl	8001834 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	b298      	uxth	r0, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	8b3a      	ldrh	r2, [r7, #24]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f7ff fce9 	bl	8001834 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	b298      	uxth	r0, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	8b3a      	ldrh	r2, [r7, #24]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7ff fcd9 	bl	8001834 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	b298      	uxth	r0, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	8b3a      	ldrh	r2, [r7, #24]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f7ff fcc9 	bl	8001834 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	b298      	uxth	r0, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	8b3a      	ldrh	r2, [r7, #24]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7ff fcb9 	bl	8001834 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	b298      	uxth	r0, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	8b3a      	ldrh	r2, [r7, #24]
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7ff fca9 	bl	8001834 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	b298      	uxth	r0, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	8b3a      	ldrh	r2, [r7, #24]
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7ff fc99 	bl	8001834 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	b298      	uxth	r0, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	8b3a      	ldrh	r2, [r7, #24]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7ff fc89 	bl	8001834 <lcd_DrawPoint>
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b08a      	sub	sp, #40	; 0x28
 8001f2e:	af02      	add	r7, sp, #8
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	4613      	mov	r3, r2
 8001f38:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	f1c3 0303 	rsb	r3, r3, #3
 8001f4a:	613b      	str	r3, [r7, #16]


	if (fill)
 8001f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d04f      	beq.n	8001ff2 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001f52:	e029      	b.n	8001fa8 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e00a      	b.n	8001f70 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff ff55 	bl	8001e14 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	ddf0      	ble.n	8001f5a <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	da06      	bge.n	8001f8c <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	009a      	lsls	r2, r3, #2
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	3306      	adds	r3, #6
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	e00a      	b.n	8001fa2 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	009a      	lsls	r2, r3, #2
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	330a      	adds	r3, #10
 8001f9a:	613b      	str	r3, [r7, #16]
				y--;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	ddd1      	ble.n	8001f54 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001fb0:	e023      	b.n	8001ffa <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7ff ff29 	bl	8001e14 <_draw_circle_8>
			if (d < 0) {
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	da06      	bge.n	8001fd6 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	009a      	lsls	r2, r3, #2
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4413      	add	r3, r2
 8001fd0:	3306      	adds	r3, #6
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	e00a      	b.n	8001fec <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	009a      	lsls	r2, r3, #2
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	330a      	adds	r3, #10
 8001fe4:	613b      	str	r3, [r7, #16]
				y--;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	61bb      	str	r3, [r7, #24]
			x++;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dddb      	ble.n	8001fb2 <lcd_DrawCircle+0x88>
}
 8001ffa:	bf00      	nop
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b08b      	sub	sp, #44	; 0x2c
 8002008:	af04      	add	r7, sp, #16
 800200a:	60ba      	str	r2, [r7, #8]
 800200c:	461a      	mov	r2, r3
 800200e:	4603      	mov	r3, r0
 8002010:	81fb      	strh	r3, [r7, #14]
 8002012:	460b      	mov	r3, r1
 8002014:	81bb      	strh	r3, [r7, #12]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800201a:	89fb      	ldrh	r3, [r7, #14]
 800201c:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002022:	e048      	b.n	80020b6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d145      	bne.n	80020b6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800202a:	89fa      	ldrh	r2, [r7, #14]
 800202c:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <lcd_ShowStr+0xc4>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	1acb      	subs	r3, r1, r3
 800203c:	429a      	cmp	r2, r3
 800203e:	dc3f      	bgt.n	80020c0 <lcd_ShowStr+0xbc>
 8002040:	89ba      	ldrh	r2, [r7, #12]
 8002042:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <lcd_ShowStr+0xc4>)
 8002044:	885b      	ldrh	r3, [r3, #2]
 8002046:	4619      	mov	r1, r3
 8002048:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800204c:	1acb      	subs	r3, r1, r3
 800204e:	429a      	cmp	r2, r3
 8002050:	dc36      	bgt.n	80020c0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b80      	cmp	r3, #128	; 0x80
 8002058:	d902      	bls.n	8002060 <lcd_ShowStr+0x5c>
 800205a:	2301      	movs	r3, #1
 800205c:	75fb      	strb	r3, [r7, #23]
 800205e:	e02a      	b.n	80020b6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b0d      	cmp	r3, #13
 8002066:	d10b      	bne.n	8002080 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002068:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800206c:	b29a      	uxth	r2, r3
 800206e:	89bb      	ldrh	r3, [r7, #12]
 8002070:	4413      	add	r3, r2
 8002072:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002074:	8abb      	ldrh	r3, [r7, #20]
 8002076:	81fb      	strh	r3, [r7, #14]
					str++;
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	3301      	adds	r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	e017      	b.n	80020b0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	88fc      	ldrh	r4, [r7, #6]
 8002086:	89b9      	ldrh	r1, [r7, #12]
 8002088:	89f8      	ldrh	r0, [r7, #14]
 800208a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800208e:	9302      	str	r3, [sp, #8]
 8002090:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	4623      	mov	r3, r4
 800209c:	f7ff fc66 	bl	800196c <lcd_ShowChar>
					x+=sizey/2;
 80020a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020a4:	085b      	lsrs	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	89fb      	ldrh	r3, [r7, #14]
 80020ac:	4413      	add	r3, r2
 80020ae:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1b2      	bne.n	8002024 <lcd_ShowStr+0x20>
 80020be:	e000      	b.n	80020c2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80020c0:	bf00      	nop
			}
		}
	}
}
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd90      	pop	{r4, r7, pc}
 80020c8:	20000230 	.word	0x20000230

080020cc <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80020d0:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <led7_Scan+0x104>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <led7_Scan+0x104>)
 80020da:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80020dc:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <led7_Scan+0x108>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a3d      	ldr	r2, [pc, #244]	; (80021d8 <led7_Scan+0x10c>)
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <led7_Scan+0x104>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <led7_Scan+0x104>)
 80020f6:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <led7_Scan+0x108>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d847      	bhi.n	8002190 <led7_Scan+0xc4>
 8002100:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <led7_Scan+0x3c>)
 8002102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002106:	bf00      	nop
 8002108:	08002119 	.word	0x08002119
 800210c:	08002137 	.word	0x08002137
 8002110:	08002155 	.word	0x08002155
 8002114:	08002173 	.word	0x08002173
	case 0:
		spi_buffer |= 0x00b0;
 8002118:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <led7_Scan+0x104>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002120:	b29a      	uxth	r2, r3
 8002122:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <led7_Scan+0x104>)
 8002124:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002126:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <led7_Scan+0x104>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800212e:	b29a      	uxth	r2, r3
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <led7_Scan+0x104>)
 8002132:	801a      	strh	r2, [r3, #0]
		break;
 8002134:	e02d      	b.n	8002192 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <led7_Scan+0x104>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800213e:	b29a      	uxth	r2, r3
 8002140:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <led7_Scan+0x104>)
 8002142:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002144:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <led7_Scan+0x104>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	f023 0320 	bic.w	r3, r3, #32
 800214c:	b29a      	uxth	r2, r3
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <led7_Scan+0x104>)
 8002150:	801a      	strh	r2, [r3, #0]
		break;
 8002152:	e01e      	b.n	8002192 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <led7_Scan+0x104>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800215c:	b29a      	uxth	r2, r3
 800215e:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <led7_Scan+0x104>)
 8002160:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <led7_Scan+0x104>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	f023 0310 	bic.w	r3, r3, #16
 800216a:	b29a      	uxth	r2, r3
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <led7_Scan+0x104>)
 800216e:	801a      	strh	r2, [r3, #0]
		break;
 8002170:	e00f      	b.n	8002192 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <led7_Scan+0x104>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800217a:	b29a      	uxth	r2, r3
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <led7_Scan+0x104>)
 800217e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <led7_Scan+0x104>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002188:	b29a      	uxth	r2, r3
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <led7_Scan+0x104>)
 800218c:	801a      	strh	r2, [r3, #0]
		break;
 800218e:	e000      	b.n	8002192 <led7_Scan+0xc6>
	default:
		break;
 8002190:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <led7_Scan+0x108>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	425a      	negs	r2, r3
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	f002 0203 	and.w	r2, r2, #3
 80021a2:	bf58      	it	pl
 80021a4:	4253      	negpl	r3, r2
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <led7_Scan+0x108>)
 80021a8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2140      	movs	r1, #64	; 0x40
 80021ae:	480b      	ldr	r0, [pc, #44]	; (80021dc <led7_Scan+0x110>)
 80021b0:	f002 fc22 	bl	80049f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80021b4:	2301      	movs	r3, #1
 80021b6:	2202      	movs	r2, #2
 80021b8:	4905      	ldr	r1, [pc, #20]	; (80021d0 <led7_Scan+0x104>)
 80021ba:	4809      	ldr	r0, [pc, #36]	; (80021e0 <led7_Scan+0x114>)
 80021bc:	f004 f8f9 	bl	80063b2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80021c0:	2201      	movs	r2, #1
 80021c2:	2140      	movs	r1, #64	; 0x40
 80021c4:	4805      	ldr	r0, [pc, #20]	; (80021dc <led7_Scan+0x110>)
 80021c6:	f002 fc17 	bl	80049f8 <HAL_GPIO_WritePin>
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000004 	.word	0x20000004
 80021d4:	200000d4 	.word	0x200000d4
 80021d8:	20000000 	.word	0x20000000
 80021dc:	40021800 	.word	0x40021800
 80021e0:	2000026c 	.word	0x2000026c

080021e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e4:	b598      	push	{r3, r4, r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e8:	f001 fb5e 	bl	80038a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ec:	f000 f842 	bl	8002274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f0:	f7ff f8ae 	bl	8001350 <MX_GPIO_Init>
  MX_TIM2_Init();
 80021f4:	f000 fb20 	bl	8002838 <MX_TIM2_Init>
  MX_SPI1_Init();
 80021f8:	f000 f9d8 	bl	80025ac <MX_SPI1_Init>
  MX_FSMC_Init();
 80021fc:	f7fe ffd8 	bl	80011b0 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002200:	f7ff f9bc 	bl	800157c <MX_I2C1_Init>
  MX_TIM13_Init();
 8002204:	f000 fb64 	bl	80028d0 <MX_TIM13_Init>
  MX_DMA_Init();
 8002208:	f7fe ffb2 	bl	8001170 <MX_DMA_Init>
  MX_ADC1_Init();
 800220c:	f7fe fde4 	bl	8000dd8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002210:	f000 fac2 	bl	8002798 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002214:	f000 f898 	bl	8002348 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 touch_Adjust();
 8002218:	f000 ff02 	bl	8003020 <touch_Adjust>
 lcd_Clear(BLACK);
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff faa1 	bl	8001764 <lcd_Clear>
 while (1)
  {
	  //scan touch screen
	  touch_Scan();
 8002222:	f001 fae3 	bl	80037ec <touch_Scan>
	  //check if touch screen is touched
	  if(touch_IsTouched() && draw_Status == DRAW){
 8002226:	f001 faeb 	bl	8003800 <touch_IsTouched>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d010      	beq.n	8002252 <main+0x6e>
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <main+0x88>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10c      	bne.n	8002252 <main+0x6e>
            //draw a point at the touch position
		  lcd_DrawPoint(touch_GetX(), touch_GetY(), RED);
 8002238:	f001 faf4 	bl	8003824 <touch_GetX>
 800223c:	4603      	mov	r3, r0
 800223e:	461c      	mov	r4, r3
 8002240:	f001 fafc 	bl	800383c <touch_GetY>
 8002244:	4603      	mov	r3, r0
 8002246:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800224a:	4619      	mov	r1, r3
 800224c:	4620      	mov	r0, r4
 800224e:	f7ff faf1 	bl	8001834 <lcd_DrawPoint>
	  }
	  // 50ms task
	  if(flag_timer2 == 1){
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <main+0x8c>)
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d1e3      	bne.n	8002222 <main+0x3e>
		  flag_timer2 = 0;
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <main+0x8c>)
 800225c:	2200      	movs	r2, #0
 800225e:	801a      	strh	r2, [r3, #0]
		  touchProcess();
 8002260:	f000 f8ca 	bl	80023f8 <touchProcess>
		  test_LedDebug();
 8002264:	f000 f880 	bl	8002368 <test_LedDebug>
	  touch_Scan();
 8002268:	e7db      	b.n	8002222 <main+0x3e>
 800226a:	bf00      	nop
 800226c:	200000d8 	.word	0x200000d8
 8002270:	200000de 	.word	0x200000de

08002274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b094      	sub	sp, #80	; 0x50
 8002278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800227a:	f107 0320 	add.w	r3, r7, #32
 800227e:	2230      	movs	r2, #48	; 0x30
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f005 fb90 	bl	80079a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <SystemClock_Config+0xcc>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	4a27      	ldr	r2, [pc, #156]	; (8002340 <SystemClock_Config+0xcc>)
 80022a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a6:	6413      	str	r3, [r2, #64]	; 0x40
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <SystemClock_Config+0xcc>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b4:	2300      	movs	r3, #0
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <SystemClock_Config+0xd0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a21      	ldr	r2, [pc, #132]	; (8002344 <SystemClock_Config+0xd0>)
 80022be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <SystemClock_Config+0xd0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022d0:	2302      	movs	r3, #2
 80022d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022d4:	2301      	movs	r3, #1
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d8:	2310      	movs	r3, #16
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022dc:	2302      	movs	r3, #2
 80022de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022e0:	2300      	movs	r3, #0
 80022e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022e4:	2308      	movs	r3, #8
 80022e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80022e8:	23a8      	movs	r3, #168	; 0xa8
 80022ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022ec:	2302      	movs	r3, #2
 80022ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022f0:	2304      	movs	r3, #4
 80022f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f4:	f107 0320 	add.w	r3, r7, #32
 80022f8:	4618      	mov	r0, r3
 80022fa:	f003 fb71 	bl	80059e0 <HAL_RCC_OscConfig>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002304:	f000 f8de 	bl	80024c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002308:	230f      	movs	r3, #15
 800230a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800230c:	2302      	movs	r3, #2
 800230e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002314:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002318:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800231a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800231e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	2105      	movs	r1, #5
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fdd2 	bl	8005ed0 <HAL_RCC_ClockConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002332:	f000 f8c7 	bl	80024c4 <Error_Handler>
  }
}
 8002336:	bf00      	nop
 8002338:	3750      	adds	r7, #80	; 0x50
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	40007000 	.word	0x40007000

08002348 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	  timer_init();
 800234c:	f000 f8c0 	bl	80024d0 <timer_init>
	  button_init();
 8002350:	f7fe ff02 	bl	8001158 <button_init>
	  lcd_init();
 8002354:	f7ff fbfe 	bl	8001b54 <lcd_init>
	  touch_init();
 8002358:	f001 fa38 	bl	80037cc <touch_init>
	  setTimer2(50);
 800235c:	2032      	movs	r0, #50	; 0x32
 800235e:	f000 f8c5 	bl	80024ec <setTimer2>
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 800236c:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <test_LedDebug+0x3c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <test_LedDebug+0x40>)
 8002374:	fb83 1302 	smull	r1, r3, r3, r2
 8002378:	10d9      	asrs	r1, r3, #3
 800237a:	17d3      	asrs	r3, r2, #31
 800237c:	1ac9      	subs	r1, r1, r3
 800237e:	460b      	mov	r3, r1
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	1ad1      	subs	r1, r2, r3
 8002388:	b2ca      	uxtb	r2, r1
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <test_LedDebug+0x3c>)
 800238c:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <test_LedDebug+0x3c>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002396:	2110      	movs	r1, #16
 8002398:	4804      	ldr	r0, [pc, #16]	; (80023ac <test_LedDebug+0x44>)
 800239a:	f002 fb46 	bl	8004a2a <HAL_GPIO_TogglePin>
	}
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200000dc 	.word	0x200000dc
 80023a8:	66666667 	.word	0x66666667
 80023ac:	40021000 	.word	0x40021000

080023b0 <isButtonClear>:

uint8_t isButtonClear(){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80023b4:	f001 fa24 	bl	8003800 <touch_IsTouched>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <isButtonClear+0x12>
 80023be:	2300      	movs	r3, #0
 80023c0:	e017      	b.n	80023f2 <isButtonClear+0x42>
	return touch_GetX() > 60 && touch_GetX() < 180 && touch_GetY() > 10 && touch_GetY() < 60;
 80023c2:	f001 fa2f 	bl	8003824 <touch_GetX>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b3c      	cmp	r3, #60	; 0x3c
 80023ca:	d910      	bls.n	80023ee <isButtonClear+0x3e>
 80023cc:	f001 fa2a 	bl	8003824 <touch_GetX>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2bb3      	cmp	r3, #179	; 0xb3
 80023d4:	d80b      	bhi.n	80023ee <isButtonClear+0x3e>
 80023d6:	f001 fa31 	bl	800383c <touch_GetY>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b0a      	cmp	r3, #10
 80023de:	d906      	bls.n	80023ee <isButtonClear+0x3e>
 80023e0:	f001 fa2c 	bl	800383c <touch_GetY>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b3b      	cmp	r3, #59	; 0x3b
 80023e8:	d801      	bhi.n	80023ee <isButtonClear+0x3e>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <isButtonClear+0x40>
 80023ee:	2300      	movs	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <touchProcess>:

void touchProcess(){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af04      	add	r7, sp, #16
	switch (draw_Status) {
 80023fe:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <touchProcess+0xc4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d048      	beq.n	8002498 <touchProcess+0xa0>
 8002406:	2b02      	cmp	r3, #2
 8002408:	dc4f      	bgt.n	80024aa <touchProcess+0xb2>
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <touchProcess+0x1c>
 800240e:	2b01      	cmp	r3, #1
 8002410:	d01a      	beq.n	8002448 <touchProcess+0x50>
			break;
		case CLEAR:
			if(!touch_IsTouched()) draw_Status = INIT;
			break;
		default:
			break;
 8002412:	e04a      	b.n	80024aa <touchProcess+0xb2>
			lcd_Fill(60, 10, 180, 60, GBLUE);
 8002414:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	233c      	movs	r3, #60	; 0x3c
 800241c:	22b4      	movs	r2, #180	; 0xb4
 800241e:	210a      	movs	r1, #10
 8002420:	203c      	movs	r0, #60	; 0x3c
 8002422:	f7ff f9d1 	bl	80017c8 <lcd_Fill>
			lcd_ShowStr(90, 20, "CLEAR", RED, BLACK, 24, 1);
 8002426:	2301      	movs	r3, #1
 8002428:	9302      	str	r3, [sp, #8]
 800242a:	2318      	movs	r3, #24
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	2300      	movs	r3, #0
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002436:	4a22      	ldr	r2, [pc, #136]	; (80024c0 <touchProcess+0xc8>)
 8002438:	2114      	movs	r1, #20
 800243a:	205a      	movs	r0, #90	; 0x5a
 800243c:	f7ff fde2 	bl	8002004 <lcd_ShowStr>
			draw_Status = DRAW;
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <touchProcess+0xc4>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]
			break;
 8002446:	e035      	b.n	80024b4 <touchProcess+0xbc>
			if(isButtonClear()){
 8002448:	f7ff ffb2 	bl	80023b0 <isButtonClear>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d02d      	beq.n	80024ae <touchProcess+0xb6>
				draw_Status = CLEAR;
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <touchProcess+0xc4>)
 8002454:	2202      	movs	r2, #2
 8002456:	601a      	str	r2, [r3, #0]
				lcd_Fill(0, 60, 240, 320, BLACK);
 8002458:	2300      	movs	r3, #0
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002460:	22f0      	movs	r2, #240	; 0xf0
 8002462:	213c      	movs	r1, #60	; 0x3c
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff f9af 	bl	80017c8 <lcd_Fill>
				lcd_Fill(60, 10, 180, 60, GREEN);
 800246a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	233c      	movs	r3, #60	; 0x3c
 8002472:	22b4      	movs	r2, #180	; 0xb4
 8002474:	210a      	movs	r1, #10
 8002476:	203c      	movs	r0, #60	; 0x3c
 8002478:	f7ff f9a6 	bl	80017c8 <lcd_Fill>
				lcd_ShowStr(90, 20, "CLEAR", RED, BLACK, 24, 1);
 800247c:	2301      	movs	r3, #1
 800247e:	9302      	str	r3, [sp, #8]
 8002480:	2318      	movs	r3, #24
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	2300      	movs	r3, #0
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800248c:	4a0c      	ldr	r2, [pc, #48]	; (80024c0 <touchProcess+0xc8>)
 800248e:	2114      	movs	r1, #20
 8002490:	205a      	movs	r0, #90	; 0x5a
 8002492:	f7ff fdb7 	bl	8002004 <lcd_ShowStr>
			break;
 8002496:	e00a      	b.n	80024ae <touchProcess+0xb6>
			if(!touch_IsTouched()) draw_Status = INIT;
 8002498:	f001 f9b2 	bl	8003800 <touch_IsTouched>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d107      	bne.n	80024b2 <touchProcess+0xba>
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <touchProcess+0xc4>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
			break;
 80024a8:	e003      	b.n	80024b2 <touchProcess+0xba>
			break;
 80024aa:	bf00      	nop
 80024ac:	e002      	b.n	80024b4 <touchProcess+0xbc>
			break;
 80024ae:	bf00      	nop
 80024b0:	e000      	b.n	80024b4 <touchProcess+0xbc>
			break;
 80024b2:	bf00      	nop
	}
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200000d8 	.word	0x200000d8
 80024c0:	08007ba0 	.word	0x08007ba0

080024c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c8:	b672      	cpsid	i
}
 80024ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024cc:	e7fe      	b.n	80024cc <Error_Handler+0x8>
	...

080024d0 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80024d4:	4803      	ldr	r0, [pc, #12]	; (80024e4 <timer_init+0x14>)
 80024d6:	f004 fa6f 	bl	80069b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80024da:	4803      	ldr	r0, [pc, #12]	; (80024e8 <timer_init+0x18>)
 80024dc:	f004 fa04 	bl	80068e8 <HAL_TIM_Base_Start>
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000354 	.word	0x20000354
 80024e8:	2000030c 	.word	0x2000030c

080024ec <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <setTimer2+0x2c>)
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <setTimer2+0x2c>)
 80024fe:	881a      	ldrh	r2, [r3, #0]
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <setTimer2+0x30>)
 8002502:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <setTimer2+0x34>)
 8002506:	2200      	movs	r2, #0
 8002508:	801a      	strh	r2, [r3, #0]
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	200000e2 	.word	0x200000e2
 800251c:	200000e0 	.word	0x200000e0
 8002520:	200000de 	.word	0x200000de

08002524 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d116      	bne.n	8002564 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d010      	beq.n	8002560 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002548:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002552:	4b07      	ldr	r3, [pc, #28]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002554:	2201      	movs	r2, #1
 8002556:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800255a:	881a      	ldrh	r2, [r3, #0]
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800255e:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002560:	f7ff fdb4 	bl	80020cc <led7_Scan>
	}
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	200000e0 	.word	0x200000e0
 8002570:	200000de 	.word	0x200000de
 8002574:	200000e2 	.word	0x200000e2

08002578 <delay_us>:

void delay_us (uint16_t us)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <delay_us+0x30>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800258a:	bf00      	nop
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <delay_us+0x30>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	429a      	cmp	r2, r3
 8002596:	d3f9      	bcc.n	800258c <delay_us+0x14>
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	2000030c 	.word	0x2000030c

080025ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <MX_SPI1_Init+0x64>)
 80025b2:	4a18      	ldr	r2, [pc, #96]	; (8002614 <MX_SPI1_Init+0x68>)
 80025b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <MX_SPI1_Init+0x64>)
 80025b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <MX_SPI1_Init+0x64>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <MX_SPI1_Init+0x64>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <MX_SPI1_Init+0x64>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <MX_SPI1_Init+0x64>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <MX_SPI1_Init+0x64>)
 80025d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <MX_SPI1_Init+0x64>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <MX_SPI1_Init+0x64>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <MX_SPI1_Init+0x64>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <MX_SPI1_Init+0x64>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <MX_SPI1_Init+0x64>)
 80025f8:	220a      	movs	r2, #10
 80025fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025fc:	4804      	ldr	r0, [pc, #16]	; (8002610 <MX_SPI1_Init+0x64>)
 80025fe:	f003 fe4f 	bl	80062a0 <HAL_SPI_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002608:	f7ff ff5c 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	2000026c 	.word	0x2000026c
 8002614:	40013000 	.word	0x40013000

08002618 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a19      	ldr	r2, [pc, #100]	; (800269c <HAL_SPI_MspInit+0x84>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d12b      	bne.n	8002692 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_SPI_MspInit+0x88>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <HAL_SPI_MspInit+0x88>)
 8002644:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_SPI_MspInit+0x88>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_SPI_MspInit+0x88>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <HAL_SPI_MspInit+0x88>)
 8002660:	f043 0302 	orr.w	r3, r3, #2
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_SPI_MspInit+0x88>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002672:	2338      	movs	r3, #56	; 0x38
 8002674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002682:	2305      	movs	r3, #5
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	4805      	ldr	r0, [pc, #20]	; (80026a4 <HAL_SPI_MspInit+0x8c>)
 800268e:	f001 ffff 	bl	8004690 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002692:	bf00      	nop
 8002694:	3728      	adds	r7, #40	; 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40013000 	.word	0x40013000
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020400 	.word	0x40020400

080026a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_MspInit+0x4c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <HAL_MspInit+0x4c>)
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_MspInit+0x4c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_MspInit+0x4c>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <HAL_MspInit+0x4c>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6413      	str	r3, [r2, #64]	; 0x40
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_MspInit+0x4c>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <NMI_Handler+0x4>

080026fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002702:	e7fe      	b.n	8002702 <HardFault_Handler+0x4>

08002704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <MemManage_Handler+0x4>

0800270a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <BusFault_Handler+0x4>

08002710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <UsageFault_Handler+0x4>

08002716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002744:	f001 f902 	bl	800394c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}

0800274c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <TIM2_IRQHandler+0x10>)
 8002752:	f004 f9fa 	bl	8006b4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000354 	.word	0x20000354

08002760 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <DMA2_Stream0_IRQHandler+0x10>)
 8002766:	f001 fd57 	bl	8004218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000012c 	.word	0x2000012c

08002774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <SystemInit+0x20>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <SystemInit+0x20>)
 8002780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800279e:	f107 0308 	add.w	r3, r7, #8
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ac:	463b      	mov	r3, r7
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027b4:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <MX_TIM1_Init+0x98>)
 80027b6:	4a1f      	ldr	r2, [pc, #124]	; (8002834 <MX_TIM1_Init+0x9c>)
 80027b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80027ba:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <MX_TIM1_Init+0x98>)
 80027bc:	2253      	movs	r2, #83	; 0x53
 80027be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <MX_TIM1_Init+0x98>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027c6:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <MX_TIM1_Init+0x98>)
 80027c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ce:	4b18      	ldr	r3, [pc, #96]	; (8002830 <MX_TIM1_Init+0x98>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027d4:	4b16      	ldr	r3, [pc, #88]	; (8002830 <MX_TIM1_Init+0x98>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <MX_TIM1_Init+0x98>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027e0:	4813      	ldr	r0, [pc, #76]	; (8002830 <MX_TIM1_Init+0x98>)
 80027e2:	f004 f831 	bl	8006848 <HAL_TIM_Base_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80027ec:	f7ff fe6a 	bl	80024c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027f6:	f107 0308 	add.w	r3, r7, #8
 80027fa:	4619      	mov	r1, r3
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <MX_TIM1_Init+0x98>)
 80027fe:	f004 fb6f 	bl	8006ee0 <HAL_TIM_ConfigClockSource>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002808:	f7ff fe5c 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280c:	2300      	movs	r3, #0
 800280e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002810:	2300      	movs	r3, #0
 8002812:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002814:	463b      	mov	r3, r7
 8002816:	4619      	mov	r1, r3
 8002818:	4805      	ldr	r0, [pc, #20]	; (8002830 <MX_TIM1_Init+0x98>)
 800281a:	f004 ff3b 	bl	8007694 <HAL_TIMEx_MasterConfigSynchronization>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002824:	f7ff fe4e 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002828:	bf00      	nop
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	2000030c 	.word	0x2000030c
 8002834:	40010000 	.word	0x40010000

08002838 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284c:	463b      	mov	r3, r7
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <MX_TIM2_Init+0x94>)
 8002856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800285a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <MX_TIM2_Init+0x94>)
 800285e:	f240 3247 	movw	r2, #839	; 0x347
 8002862:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <MX_TIM2_Init+0x94>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <MX_TIM2_Init+0x94>)
 800286c:	2263      	movs	r2, #99	; 0x63
 800286e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <MX_TIM2_Init+0x94>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <MX_TIM2_Init+0x94>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800287c:	4813      	ldr	r0, [pc, #76]	; (80028cc <MX_TIM2_Init+0x94>)
 800287e:	f003 ffe3 	bl	8006848 <HAL_TIM_Base_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002888:	f7ff fe1c 	bl	80024c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800288c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	4619      	mov	r1, r3
 8002898:	480c      	ldr	r0, [pc, #48]	; (80028cc <MX_TIM2_Init+0x94>)
 800289a:	f004 fb21 	bl	8006ee0 <HAL_TIM_ConfigClockSource>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80028a4:	f7ff fe0e 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a8:	2300      	movs	r3, #0
 80028aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028b0:	463b      	mov	r3, r7
 80028b2:	4619      	mov	r1, r3
 80028b4:	4805      	ldr	r0, [pc, #20]	; (80028cc <MX_TIM2_Init+0x94>)
 80028b6:	f004 feed 	bl	8007694 <HAL_TIMEx_MasterConfigSynchronization>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80028c0:	f7ff fe00 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028c4:	bf00      	nop
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000354 	.word	0x20000354

080028d0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
 80028e4:	615a      	str	r2, [r3, #20]
 80028e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <MX_TIM13_Init+0x94>)
 80028ea:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <MX_TIM13_Init+0x98>)
 80028ec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <MX_TIM13_Init+0x94>)
 80028f0:	f240 3247 	movw	r2, #839	; 0x347
 80028f4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f6:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <MX_TIM13_Init+0x94>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <MX_TIM13_Init+0x94>)
 80028fe:	2263      	movs	r2, #99	; 0x63
 8002900:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002902:	4b18      	ldr	r3, [pc, #96]	; (8002964 <MX_TIM13_Init+0x94>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002908:	4b16      	ldr	r3, [pc, #88]	; (8002964 <MX_TIM13_Init+0x94>)
 800290a:	2200      	movs	r2, #0
 800290c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800290e:	4815      	ldr	r0, [pc, #84]	; (8002964 <MX_TIM13_Init+0x94>)
 8002910:	f003 ff9a 	bl	8006848 <HAL_TIM_Base_Init>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800291a:	f7ff fdd3 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800291e:	4811      	ldr	r0, [pc, #68]	; (8002964 <MX_TIM13_Init+0x94>)
 8002920:	f004 f8ba 	bl	8006a98 <HAL_TIM_PWM_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800292a:	f7ff fdcb 	bl	80024c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800292e:	2360      	movs	r3, #96	; 0x60
 8002930:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	2200      	movs	r2, #0
 8002942:	4619      	mov	r1, r3
 8002944:	4807      	ldr	r0, [pc, #28]	; (8002964 <MX_TIM13_Init+0x94>)
 8002946:	f004 fa09 	bl	8006d5c <HAL_TIM_PWM_ConfigChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002950:	f7ff fdb8 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002954:	4803      	ldr	r0, [pc, #12]	; (8002964 <MX_TIM13_Init+0x94>)
 8002956:	f000 f85b 	bl	8002a10 <HAL_TIM_MspPostInit>

}
 800295a:	bf00      	nop
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200002c4 	.word	0x200002c4
 8002968:	40001c00 	.word	0x40001c00

0800296c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a22      	ldr	r2, [pc, #136]	; (8002a04 <HAL_TIM_Base_MspInit+0x98>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d10e      	bne.n	800299c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <HAL_TIM_Base_MspInit+0x9c>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	4a20      	ldr	r2, [pc, #128]	; (8002a08 <HAL_TIM_Base_MspInit+0x9c>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6453      	str	r3, [r2, #68]	; 0x44
 800298e:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_TIM_Base_MspInit+0x9c>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800299a:	e02e      	b.n	80029fa <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a4:	d116      	bne.n	80029d4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <HAL_TIM_Base_MspInit+0x9c>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	4a16      	ldr	r2, [pc, #88]	; (8002a08 <HAL_TIM_Base_MspInit+0x9c>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6413      	str	r3, [r2, #64]	; 0x40
 80029b6:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <HAL_TIM_Base_MspInit+0x9c>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2100      	movs	r1, #0
 80029c6:	201c      	movs	r0, #28
 80029c8:	f001 fb41 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029cc:	201c      	movs	r0, #28
 80029ce:	f001 fb5a 	bl	8004086 <HAL_NVIC_EnableIRQ>
}
 80029d2:	e012      	b.n	80029fa <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0c      	ldr	r2, [pc, #48]	; (8002a0c <HAL_TIM_Base_MspInit+0xa0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10d      	bne.n	80029fa <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_TIM_Base_MspInit+0x9c>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <HAL_TIM_Base_MspInit+0x9c>)
 80029e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_TIM_Base_MspInit+0x9c>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40010000 	.word	0x40010000
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40001c00 	.word	0x40001c00

08002a10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <HAL_TIM_MspPostInit+0x68>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d11e      	bne.n	8002a70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_TIM_MspPostInit+0x6c>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4a10      	ldr	r2, [pc, #64]	; (8002a7c <HAL_TIM_MspPostInit+0x6c>)
 8002a3c:	f043 0320 	orr.w	r3, r3, #32
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <HAL_TIM_MspPostInit+0x6c>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002a60:	2309      	movs	r3, #9
 8002a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a64:	f107 030c 	add.w	r3, r7, #12
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4805      	ldr	r0, [pc, #20]	; (8002a80 <HAL_TIM_MspPostInit+0x70>)
 8002a6c:	f001 fe10 	bl	8004690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002a70:	bf00      	nop
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40001c00 	.word	0x40001c00
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40021400 	.word	0x40021400

08002a84 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
 8002a96:	e025      	b.n	8002ae4 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8002a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	da06      	bge.n	8002aae <TP_Write_Byte+0x2a>
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002aa6:	4813      	ldr	r0, [pc, #76]	; (8002af4 <TP_Write_Byte+0x70>)
 8002aa8:	f001 ffa6 	bl	80049f8 <HAL_GPIO_WritePin>
 8002aac:	e005      	b.n	8002aba <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ab4:	480f      	ldr	r0, [pc, #60]	; (8002af4 <TP_Write_Byte+0x70>)
 8002ab6:	f001 ff9f 	bl	80049f8 <HAL_GPIO_WritePin>
		num<<=1;
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ac6:	480c      	ldr	r0, [pc, #48]	; (8002af8 <TP_Write_Byte+0x74>)
 8002ac8:	f001 ff96 	bl	80049f8 <HAL_GPIO_WritePin>
		delay_us(1);
 8002acc:	2001      	movs	r0, #1
 8002ace:	f7ff fd53 	bl	8002578 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ad8:	4807      	ldr	r0, [pc, #28]	; (8002af8 <TP_Write_Byte+0x74>)
 8002ada:	f001 ff8d 	bl	80049f8 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b07      	cmp	r3, #7
 8002ae8:	d9d6      	bls.n	8002a98 <TP_Write_Byte+0x14>
	}
}
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40021800 	.word	0x40021800

08002afc <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b14:	482f      	ldr	r0, [pc, #188]	; (8002bd4 <TP_Read_AD+0xd8>)
 8002b16:	f001 ff6f 	bl	80049f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b20:	482d      	ldr	r0, [pc, #180]	; (8002bd8 <TP_Read_AD+0xdc>)
 8002b22:	f001 ff69 	bl	80049f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	482a      	ldr	r0, [pc, #168]	; (8002bd4 <TP_Read_AD+0xd8>)
 8002b2c:	f001 ff64 	bl	80049f8 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ffa6 	bl	8002a84 <TP_Write_Byte>
	delay_us(6);
 8002b38:	2006      	movs	r0, #6
 8002b3a:	f7ff fd1d 	bl	8002578 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b44:	4823      	ldr	r0, [pc, #140]	; (8002bd4 <TP_Read_AD+0xd8>)
 8002b46:	f001 ff57 	bl	80049f8 <HAL_GPIO_WritePin>
	delay_us(1);
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f7ff fd14 	bl	8002578 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8002b50:	2201      	movs	r2, #1
 8002b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b56:	481f      	ldr	r0, [pc, #124]	; (8002bd4 <TP_Read_AD+0xd8>)
 8002b58:	f001 ff4e 	bl	80049f8 <HAL_GPIO_WritePin>
	delay_us(1);
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f7ff fd0b 	bl	8002578 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b68:	481a      	ldr	r0, [pc, #104]	; (8002bd4 <TP_Read_AD+0xd8>)
 8002b6a:	f001 ff45 	bl	80049f8 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]
 8002b72:	e01f      	b.n	8002bb4 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8002b74:	89bb      	ldrh	r3, [r7, #12]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b80:	4814      	ldr	r0, [pc, #80]	; (8002bd4 <TP_Read_AD+0xd8>)
 8002b82:	f001 ff39 	bl	80049f8 <HAL_GPIO_WritePin>
		delay_us(1);
 8002b86:	2001      	movs	r0, #1
 8002b88:	f7ff fcf6 	bl	8002578 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b92:	4810      	ldr	r0, [pc, #64]	; (8002bd4 <TP_Read_AD+0xd8>)
 8002b94:	f001 ff30 	bl	80049f8 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8002b98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b9c:	480e      	ldr	r0, [pc, #56]	; (8002bd8 <TP_Read_AD+0xdc>)
 8002b9e:	f001 ff13 	bl	80049c8 <HAL_GPIO_ReadPin>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <TP_Read_AD+0xb2>
 8002ba8:	89bb      	ldrh	r3, [r7, #12]
 8002baa:	3301      	adds	r3, #1
 8002bac:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	d9dc      	bls.n	8002b74 <TP_Read_AD+0x78>
	}
	Num>>=4;
 8002bba:	89bb      	ldrh	r3, [r7, #12]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	4803      	ldr	r0, [pc, #12]	; (8002bd4 <TP_Read_AD+0xd8>)
 8002bc6:	f001 ff17 	bl	80049f8 <HAL_GPIO_WritePin>
	return(Num);
 8002bca:	89bb      	ldrh	r3, [r7, #12]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021800 	.word	0x40021800
 8002bd8:	40020800 	.word	0x40020800

08002bdc <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b089      	sub	sp, #36	; 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8002bea:	2300      	movs	r3, #0
 8002bec:	83fb      	strh	r3, [r7, #30]
 8002bee:	e00f      	b.n	8002c10 <TP_Read_XOY+0x34>
 8002bf0:	8bfc      	ldrh	r4, [r7, #30]
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff81 	bl	8002afc <TP_Read_AD>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	0063      	lsls	r3, r4, #1
 8002c00:	f107 0120 	add.w	r1, r7, #32
 8002c04:	440b      	add	r3, r1
 8002c06:	f823 2c14 	strh.w	r2, [r3, #-20]
 8002c0a:	8bfb      	ldrh	r3, [r7, #30]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	83fb      	strh	r3, [r7, #30]
 8002c10:	8bfb      	ldrh	r3, [r7, #30]
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d9ec      	bls.n	8002bf0 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	83fb      	strh	r3, [r7, #30]
 8002c1a:	e03b      	b.n	8002c94 <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8002c1c:	8bfb      	ldrh	r3, [r7, #30]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	83bb      	strh	r3, [r7, #28]
 8002c22:	e031      	b.n	8002c88 <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 8002c24:	8bfb      	ldrh	r3, [r7, #30]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	f107 0220 	add.w	r2, r7, #32
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002c32:	8bbb      	ldrh	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	f107 0120 	add.w	r1, r7, #32
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d91e      	bls.n	8002c82 <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 8002c44:	8bfb      	ldrh	r3, [r7, #30]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	f107 0220 	add.w	r2, r7, #32
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002c52:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8002c54:	8bbb      	ldrh	r3, [r7, #28]
 8002c56:	8bfa      	ldrh	r2, [r7, #30]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	f107 0120 	add.w	r1, r7, #32
 8002c5e:	440b      	add	r3, r1
 8002c60:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8002c64:	0053      	lsls	r3, r2, #1
 8002c66:	f107 0220 	add.w	r2, r7, #32
 8002c6a:	4413      	add	r3, r2
 8002c6c:	460a      	mov	r2, r1
 8002c6e:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8002c72:	8bbb      	ldrh	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	f107 0220 	add.w	r2, r7, #32
 8002c7a:	4413      	add	r3, r2
 8002c7c:	8b3a      	ldrh	r2, [r7, #24]
 8002c7e:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8002c82:	8bbb      	ldrh	r3, [r7, #28]
 8002c84:	3301      	adds	r3, #1
 8002c86:	83bb      	strh	r3, [r7, #28]
 8002c88:	8bbb      	ldrh	r3, [r7, #28]
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d9ca      	bls.n	8002c24 <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 8002c8e:	8bfb      	ldrh	r3, [r7, #30]
 8002c90:	3301      	adds	r3, #1
 8002c92:	83fb      	strh	r3, [r7, #30]
 8002c94:	8bfb      	ldrh	r3, [r7, #30]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d9c0      	bls.n	8002c1c <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	83fb      	strh	r3, [r7, #30]
 8002ca2:	e00c      	b.n	8002cbe <TP_Read_XOY+0xe2>
 8002ca4:	8bfb      	ldrh	r3, [r7, #30]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	f107 0220 	add.w	r2, r7, #32
 8002cac:	4413      	add	r3, r2
 8002cae:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002cb2:	8b7b      	ldrh	r3, [r7, #26]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	837b      	strh	r3, [r7, #26]
 8002cb8:	8bfb      	ldrh	r3, [r7, #30]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	83fb      	strh	r3, [r7, #30]
 8002cbe:	8bfb      	ldrh	r3, [r7, #30]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d9ef      	bls.n	8002ca4 <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8002cc4:	8b7b      	ldrh	r3, [r7, #26]
 8002cc6:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <TP_Read_XOY+0x100>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	833b      	strh	r3, [r7, #24]
	return temp;
 8002cd0:	8b3b      	ldrh	r3, [r7, #24]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	; 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd90      	pop	{r4, r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	aaaaaaab 	.word	0xaaaaaaab

08002ce0 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <TP_Read_XY+0x3c>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ff74 	bl	8002bdc <TP_Read_XOY>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <TP_Read_XY+0x40>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff6d 	bl	8002bdc <TP_Read_XOY>
 8002d02:	4603      	mov	r3, r0
 8002d04:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	89fa      	ldrh	r2, [r7, #14]
 8002d0a:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	89ba      	ldrh	r2, [r7, #12]
 8002d10:	801a      	strh	r2, [r3, #0]
	return 1;
 8002d12:	2301      	movs	r3, #1
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000040 	.word	0x20000040
 8002d20:	20000041 	.word	0x20000041

08002d24 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8002d2e:	f107 0212 	add.w	r2, r7, #18
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ffd1 	bl	8002ce0 <TP_Read_XY>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8002d42:	7dfb      	ldrb	r3, [r7, #23]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <TP_Read_XY2+0x28>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e049      	b.n	8002de0 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8002d4c:	f107 020e 	add.w	r2, r7, #14
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ffc2 	bl	8002ce0 <TP_Read_XY>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <TP_Read_XY2+0x46>
 8002d66:	2300      	movs	r3, #0
 8002d68:	e03a      	b.n	8002de0 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8002d6a:	8a3a      	ldrh	r2, [r7, #16]
 8002d6c:	8abb      	ldrh	r3, [r7, #20]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d804      	bhi.n	8002d7c <TP_Read_XY2+0x58>
 8002d72:	8a3b      	ldrh	r3, [r7, #16]
 8002d74:	3363      	adds	r3, #99	; 0x63
 8002d76:	8aba      	ldrh	r2, [r7, #20]
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	da08      	bge.n	8002d8e <TP_Read_XY2+0x6a>
 8002d7c:	8aba      	ldrh	r2, [r7, #20]
 8002d7e:	8a3b      	ldrh	r3, [r7, #16]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d82c      	bhi.n	8002dde <TP_Read_XY2+0xba>
 8002d84:	8abb      	ldrh	r3, [r7, #20]
 8002d86:	3363      	adds	r3, #99	; 0x63
 8002d88:	8a3a      	ldrh	r2, [r7, #16]
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	db27      	blt.n	8002dde <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8002d8e:	89fa      	ldrh	r2, [r7, #14]
 8002d90:	8a7b      	ldrh	r3, [r7, #18]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d804      	bhi.n	8002da0 <TP_Read_XY2+0x7c>
 8002d96:	89fb      	ldrh	r3, [r7, #14]
 8002d98:	3363      	adds	r3, #99	; 0x63
 8002d9a:	8a7a      	ldrh	r2, [r7, #18]
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	da08      	bge.n	8002db2 <TP_Read_XY2+0x8e>
 8002da0:	8a7a      	ldrh	r2, [r7, #18]
 8002da2:	89fb      	ldrh	r3, [r7, #14]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d81a      	bhi.n	8002dde <TP_Read_XY2+0xba>
 8002da8:	8a7b      	ldrh	r3, [r7, #18]
 8002daa:	3363      	adds	r3, #99	; 0x63
 8002dac:	89fa      	ldrh	r2, [r7, #14]
 8002dae:	4293      	cmp	r3, r2
 8002db0:	db15      	blt.n	8002dde <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8002db2:	8abb      	ldrh	r3, [r7, #20]
 8002db4:	461a      	mov	r2, r3
 8002db6:	8a3b      	ldrh	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	0fda      	lsrs	r2, r3, #31
 8002dbc:	4413      	add	r3, r2
 8002dbe:	105b      	asrs	r3, r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8002dc6:	8a7b      	ldrh	r3, [r7, #18]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	89fb      	ldrh	r3, [r7, #14]
 8002dcc:	4413      	add	r3, r2
 8002dce:	0fda      	lsrs	r2, r3, #31
 8002dd0:	4413      	add	r3, r2
 8002dd2:	105b      	asrs	r3, r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	801a      	strh	r2, [r3, #0]
		return 1;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <TP_Read_XY2+0xbc>
	}else return 0;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	4603      	mov	r3, r0
 8002df0:	80fb      	strh	r3, [r7, #6]
 8002df2:	460b      	mov	r3, r1
 8002df4:	80bb      	strh	r3, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	3b0c      	subs	r3, #12
 8002dfe:	b298      	uxth	r0, r3
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	330d      	adds	r3, #13
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	88bc      	ldrh	r4, [r7, #4]
 8002e08:	88b9      	ldrh	r1, [r7, #4]
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	4623      	mov	r3, r4
 8002e10:	f7fe fd27 	bl	8001862 <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8002e14:	88bb      	ldrh	r3, [r7, #4]
 8002e16:	3b0c      	subs	r3, #12
 8002e18:	b299      	uxth	r1, r3
 8002e1a:	88bb      	ldrh	r3, [r7, #4]
 8002e1c:	330d      	adds	r3, #13
 8002e1e:	b29c      	uxth	r4, r3
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	88f8      	ldrh	r0, [r7, #6]
 8002e24:	887b      	ldrh	r3, [r7, #2]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	4623      	mov	r3, r4
 8002e2a:	f7fe fd1a 	bl	8001862 <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	3301      	adds	r3, #1
 8002e32:	b298      	uxth	r0, r3
 8002e34:	88bb      	ldrh	r3, [r7, #4]
 8002e36:	3301      	adds	r3, #1
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f7fe fcf9 	bl	8001834 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b298      	uxth	r0, r3
 8002e48:	88bb      	ldrh	r3, [r7, #4]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	4619      	mov	r1, r3
 8002e52:	f7fe fcef 	bl	8001834 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	b298      	uxth	r0, r3
 8002e5c:	88bb      	ldrh	r3, [r7, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	4619      	mov	r1, r3
 8002e66:	f7fe fce5 	bl	8001834 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b298      	uxth	r0, r3
 8002e70:	88bb      	ldrh	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7fe fcdb 	bl	8001834 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 8002e7e:	88f8      	ldrh	r0, [r7, #6]
 8002e80:	88b9      	ldrh	r1, [r7, #4]
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	2300      	movs	r3, #0
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	2306      	movs	r3, #6
 8002e8a:	f7ff f84e 	bl	8001f2a <lcd_DrawCircle>
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd90      	pop	{r4, r7, pc}
	...

08002e98 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8002ea2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ea6:	4843      	ldr	r0, [pc, #268]	; (8002fb4 <TP_Scan+0x11c>)
 8002ea8:	f001 fd8e 	bl	80049c8 <HAL_GPIO_ReadPin>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d157      	bne.n	8002f62 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <TP_Scan+0x2a>
 8002eb8:	493f      	ldr	r1, [pc, #252]	; (8002fb8 <TP_Scan+0x120>)
 8002eba:	4840      	ldr	r0, [pc, #256]	; (8002fbc <TP_Scan+0x124>)
 8002ebc:	f7ff ff32 	bl	8002d24 <TP_Read_XY2>
 8002ec0:	e03c      	b.n	8002f3c <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8002ec2:	493d      	ldr	r1, [pc, #244]	; (8002fb8 <TP_Scan+0x120>)
 8002ec4:	483d      	ldr	r0, [pc, #244]	; (8002fbc <TP_Scan+0x124>)
 8002ec6:	f7ff ff2d 	bl	8002d24 <TP_Read_XY2>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d035      	beq.n	8002f3c <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <TP_Scan+0x128>)
 8002ed2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002ed6:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <TP_Scan+0x128>)
 8002ed8:	899b      	ldrh	r3, [r3, #12]
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ee6:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <TP_Scan+0x128>)
 8002ee8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002eec:	ee07 3a90 	vmov	s15, r3
 8002ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002efc:	ee17 3a90 	vmov	r3, s15
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <TP_Scan+0x128>)
 8002f04:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8002f06:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <TP_Scan+0x128>)
 8002f08:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002f0c:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <TP_Scan+0x128>)
 8002f0e:	8adb      	ldrh	r3, [r3, #22]
 8002f10:	ee07 3a90 	vmov	s15, r3
 8002f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f1c:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <TP_Scan+0x128>)
 8002f1e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f32:	ee17 3a90 	vmov	r3, s15
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <TP_Scan+0x128>)
 8002f3a:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8002f3c:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <TP_Scan+0x128>)
 8002f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db2a      	blt.n	8002f9e <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <TP_Scan+0x128>)
 8002f4a:	22c0      	movs	r2, #192	; 0xc0
 8002f4c:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <TP_Scan+0x128>)
 8002f52:	899a      	ldrh	r2, [r3, #12]
 8002f54:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <TP_Scan+0x128>)
 8002f56:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <TP_Scan+0x128>)
 8002f5a:	8ada      	ldrh	r2, [r3, #22]
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <TP_Scan+0x128>)
 8002f5e:	83da      	strh	r2, [r3, #30]
 8002f60:	e01d      	b.n	8002f9e <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8002f62:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <TP_Scan+0x128>)
 8002f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f68:	b25b      	sxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	da09      	bge.n	8002f82 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <TP_Scan+0x128>)
 8002f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <TP_Scan+0x128>)
 8002f7c:	f883 2020 	strb.w	r2, [r3, #32]
 8002f80:	e00d      	b.n	8002f9e <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8002f82:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <TP_Scan+0x128>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8002f88:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <TP_Scan+0x128>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <TP_Scan+0x128>)
 8002f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f94:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <TP_Scan+0x128>)
 8002f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f9c:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <TP_Scan+0x128>)
 8002fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002fa8:	b2db      	uxtb	r3, r3
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40020800 	.word	0x40020800
 8002fb8:	20000022 	.word	0x20000022
 8002fbc:	20000018 	.word	0x20000018
 8002fc0:	2000000c 	.word	0x2000000c

08002fc4 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8002fc8:	220e      	movs	r2, #14
 8002fca:	4905      	ldr	r1, [pc, #20]	; (8002fe0 <TP_Save_Adjdata+0x1c>)
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f7fe f8a3 	bl	8001118 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	200e      	movs	r0, #14
 8002fd6:	f7fe f83f 	bl	8001058 <at24c_WriteOneByte>
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000030 	.word	0x20000030

08002fe4 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8002fee:	200e      	movs	r0, #14
 8002ff0:	f7fe f816 	bl	8001020 <at24c_ReadOneByte>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8002ffe:	220e      	movs	r2, #14
 8003000:	4905      	ldr	r1, [pc, #20]	; (8003018 <TP_Get_Adjdata+0x34>)
 8003002:	2000      	movs	r0, #0
 8003004:	f7fe f869 	bl	80010da <at24c_Read>
		return 1;
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <TP_Get_Adjdata+0x2a>
	}
	return 0;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000030 	.word	0x20000030
 800301c:	00000000 	.word	0x00000000

08003020 <touch_Adjust>:


void touch_Adjust(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08e      	sub	sp, #56	; 0x38
 8003024:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8003026:	2300      	movs	r3, #0
 8003028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 800302c:	2300      	movs	r3, #0
 800302e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8003032:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <touch_Adjust+0x198>)
 8003034:	881a      	ldrh	r2, [r3, #0]
 8003036:	4b60      	ldr	r3, [pc, #384]	; (80031b8 <touch_Adjust+0x198>)
 8003038:	885b      	ldrh	r3, [r3, #2]
 800303a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800303e:	9100      	str	r1, [sp, #0]
 8003040:	2100      	movs	r1, #0
 8003042:	2000      	movs	r0, #0
 8003044:	f7fe fbc0 	bl	80017c8 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8003048:	2300      	movs	r3, #0
 800304a:	9302      	str	r3, [sp, #8]
 800304c:	2310      	movs	r3, #16
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800305a:	4a58      	ldr	r2, [pc, #352]	; (80031bc <touch_Adjust+0x19c>)
 800305c:	2128      	movs	r1, #40	; 0x28
 800305e:	2005      	movs	r0, #5
 8003060:	f7fe ffd0 	bl	8002004 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8003064:	2300      	movs	r3, #0
 8003066:	9302      	str	r3, [sp, #8]
 8003068:	2310      	movs	r3, #16
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003076:	4a52      	ldr	r2, [pc, #328]	; (80031c0 <touch_Adjust+0x1a0>)
 8003078:	2141      	movs	r1, #65	; 0x41
 800307a:	2005      	movs	r0, #5
 800307c:	f7fe ffc2 	bl	8002004 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8003080:	2300      	movs	r3, #0
 8003082:	9302      	str	r3, [sp, #8]
 8003084:	2310      	movs	r3, #16
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003092:	4a4c      	ldr	r2, [pc, #304]	; (80031c4 <touch_Adjust+0x1a4>)
 8003094:	215a      	movs	r1, #90	; 0x5a
 8003096:	2005      	movs	r0, #5
 8003098:	f7fe ffb4 	bl	8002004 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 800309c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80030a0:	2114      	movs	r1, #20
 80030a2:	2014      	movs	r0, #20
 80030a4:	f7ff fea0 	bl	8002de8 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 80030a8:	4b47      	ldr	r3, [pc, #284]	; (80031c8 <touch_Adjust+0x1a8>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 80030b0:	4b45      	ldr	r3, [pc, #276]	; (80031c8 <touch_Adjust+0x1a8>)
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 80030b8:	2032      	movs	r0, #50	; 0x32
 80030ba:	f000 fc67 	bl	800398c <HAL_Delay>
		tp_dev.scan(1);
 80030be:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <touch_Adjust+0x1a8>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2001      	movs	r0, #1
 80030c4:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 80030c6:	4b40      	ldr	r3, [pc, #256]	; (80031c8 <touch_Adjust+0x1a8>)
 80030c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	f040 835e 	bne.w	8003792 <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 80030d6:	4b3c      	ldr	r3, [pc, #240]	; (80031c8 <touch_Adjust+0x1a8>)
 80030d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <touch_Adjust+0x1a8>)
 80030e4:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 80030e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ec:	4a36      	ldr	r2, [pc, #216]	; (80031c8 <touch_Adjust+0x1a8>)
 80030ee:	8992      	ldrh	r2, [r2, #12]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80030f6:	440b      	add	r3, r1
 80030f8:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 80030fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003100:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <touch_Adjust+0x1a8>)
 8003102:	8ad2      	ldrh	r2, [r2, #22]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800310a:	440b      	add	r3, r1
 800310c:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8003110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003114:	3301      	adds	r3, #1
 8003116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 800311a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800311e:	3b01      	subs	r3, #1
 8003120:	2b03      	cmp	r3, #3
 8003122:	d8c9      	bhi.n	80030b8 <touch_Adjust+0x98>
 8003124:	a201      	add	r2, pc, #4	; (adr r2, 800312c <touch_Adjust+0x10c>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	0800313d 	.word	0x0800313d
 8003130:	0800315f 	.word	0x0800315f
 8003134:	08003189 	.word	0x08003189
 8003138:	080031cd 	.word	0x080031cd
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 800313c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003140:	2114      	movs	r1, #20
 8003142:	2014      	movs	r0, #20
 8003144:	f7ff fe50 	bl	8002de8 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <touch_Adjust+0x198>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	3b14      	subs	r3, #20
 800314e:	b29b      	uxth	r3, r3
 8003150:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003154:	2114      	movs	r1, #20
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fe46 	bl	8002de8 <TP_Drow_Touch_Point>
					break;
 800315c:	e31a      	b.n	8003794 <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 800315e:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <touch_Adjust+0x198>)
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	3b14      	subs	r3, #20
 8003164:	b29b      	uxth	r3, r3
 8003166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800316a:	2114      	movs	r1, #20
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fe3b 	bl	8002de8 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <touch_Adjust+0x198>)
 8003174:	885b      	ldrh	r3, [r3, #2]
 8003176:	3b14      	subs	r3, #20
 8003178:	b29b      	uxth	r3, r3
 800317a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800317e:	4619      	mov	r1, r3
 8003180:	2014      	movs	r0, #20
 8003182:	f7ff fe31 	bl	8002de8 <TP_Drow_Touch_Point>
					break;
 8003186:	e305      	b.n	8003794 <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <touch_Adjust+0x198>)
 800318a:	885b      	ldrh	r3, [r3, #2]
 800318c:	3b14      	subs	r3, #20
 800318e:	b29b      	uxth	r3, r3
 8003190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003194:	4619      	mov	r1, r3
 8003196:	2014      	movs	r0, #20
 8003198:	f7ff fe26 	bl	8002de8 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <touch_Adjust+0x198>)
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	3b14      	subs	r3, #20
 80031a2:	b298      	uxth	r0, r3
 80031a4:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <touch_Adjust+0x198>)
 80031a6:	885b      	ldrh	r3, [r3, #2]
 80031a8:	3b14      	subs	r3, #20
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80031b0:	4619      	mov	r1, r3
 80031b2:	f7ff fe19 	bl	8002de8 <TP_Drow_Touch_Point>
					break;
 80031b6:	e2ed      	b.n	8003794 <touch_Adjust+0x774>
 80031b8:	20000230 	.word	0x20000230
 80031bc:	08007ba8 	.word	0x08007ba8
 80031c0:	08007bc4 	.word	0x08007bc4
 80031c4:	08007bdc 	.word	0x08007bdc
 80031c8:	2000000c 	.word	0x2000000c
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 80031cc:	883b      	ldrh	r3, [r7, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	88bb      	ldrh	r3, [r7, #4]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bfb8      	it	lt
 80031d8:	425b      	neglt	r3, r3
 80031da:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 80031dc:	887b      	ldrh	r3, [r7, #2]
 80031de:	461a      	mov	r2, r3
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bfb8      	it	lt
 80031e8:	425b      	neglt	r3, r3
 80031ea:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	fb03 f303 	mul.w	r3, r3, r3
 80031f2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	fb03 f303 	mul.w	r3, r3, r3
 80031fa:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80031fc:	6a3a      	ldr	r2, [r7, #32]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd f922 	bl	800044c <__aeabi_ui2d>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	ec43 2b10 	vmov	d0, r2, r3
 8003210:	f004 fbd2 	bl	80079b8 <sqrt>
 8003214:	ec53 2b10 	vmov	r2, r3, d0
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	f7fd fc40 	bl	8000aa0 <__aeabi_d2uiz>
 8003220:	4603      	mov	r3, r0
 8003222:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 8003224:	893b      	ldrh	r3, [r7, #8]
 8003226:	461a      	mov	r2, r3
 8003228:	89bb      	ldrh	r3, [r7, #12]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	bfb8      	it	lt
 8003230:	425b      	neglt	r3, r3
 8003232:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 8003234:	897b      	ldrh	r3, [r7, #10]
 8003236:	461a      	mov	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	bfb8      	it	lt
 8003240:	425b      	neglt	r3, r3
 8003242:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	fb03 f303 	mul.w	r3, r3, r3
 800324a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	fb03 f303 	mul.w	r3, r3, r3
 8003252:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003254:	6a3a      	ldr	r2, [r7, #32]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd f8f6 	bl	800044c <__aeabi_ui2d>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	ec43 2b10 	vmov	d0, r2, r3
 8003268:	f004 fba6 	bl	80079b8 <sqrt>
 800326c:	ec53 2b10 	vmov	r2, r3, d0
 8003270:	4610      	mov	r0, r2
 8003272:	4619      	mov	r1, r3
 8003274:	f7fd fc14 	bl	8000aa0 <__aeabi_d2uiz>
 8003278:	4603      	mov	r3, r0
 800327a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800327c:	8b7b      	ldrh	r3, [r7, #26]
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003286:	8b3b      	ldrh	r3, [r7, #24]
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003290:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003294:	ee16 0a90 	vmov	r0, s13
 8003298:	f7fd f8fa 	bl	8000490 <__aeabi_f2d>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 80032a4:	a384      	add	r3, pc, #528	; (adr r3, 80034b8 <touch_Adjust+0x498>)
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032ae:	f7fd fbb9 	bl	8000a24 <__aeabi_dcmplt>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10f      	bne.n	80032d8 <touch_Adjust+0x2b8>
 80032b8:	a381      	add	r3, pc, #516	; (adr r3, 80034c0 <touch_Adjust+0x4a0>)
 80032ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032c2:	f7fd fbcd 	bl	8000a60 <__aeabi_dcmpgt>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <touch_Adjust+0x2b8>
 80032cc:	8b7b      	ldrh	r3, [r7, #26]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <touch_Adjust+0x2b8>
 80032d2:	8b3b      	ldrh	r3, [r7, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d136      	bne.n	8003346 <touch_Adjust+0x326>
					{
						cnt=0;
 80032d8:	2300      	movs	r3, #0
 80032da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80032de:	4b7a      	ldr	r3, [pc, #488]	; (80034c8 <touch_Adjust+0x4a8>)
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	3b14      	subs	r3, #20
 80032e4:	b298      	uxth	r0, r3
 80032e6:	4b78      	ldr	r3, [pc, #480]	; (80034c8 <touch_Adjust+0x4a8>)
 80032e8:	885b      	ldrh	r3, [r3, #2]
 80032ea:	3b14      	subs	r3, #20
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032f2:	4619      	mov	r1, r3
 80032f4:	f7ff fd78 	bl	8002de8 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80032f8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80032fc:	2114      	movs	r1, #20
 80032fe:	2014      	movs	r0, #20
 8003300:	f7ff fd72 	bl	8002de8 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003304:	2300      	movs	r3, #0
 8003306:	9302      	str	r3, [sp, #8]
 8003308:	2310      	movs	r3, #16
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003316:	4a6d      	ldr	r2, [pc, #436]	; (80034cc <touch_Adjust+0x4ac>)
 8003318:	2128      	movs	r1, #40	; 0x28
 800331a:	2005      	movs	r0, #5
 800331c:	f7fe fe72 	bl	8002004 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003320:	2300      	movs	r3, #0
 8003322:	9302      	str	r3, [sp, #8]
 8003324:	2310      	movs	r3, #16
 8003326:	9301      	str	r3, [sp, #4]
 8003328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003332:	4a67      	ldr	r2, [pc, #412]	; (80034d0 <touch_Adjust+0x4b0>)
 8003334:	213c      	movs	r1, #60	; 0x3c
 8003336:	2005      	movs	r0, #5
 8003338:	f7fe fe64 	bl	8002004 <lcd_ShowStr>
						HAL_Delay(1000);
 800333c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003340:	f000 fb24 	bl	800398c <HAL_Delay>
 						continue;
 8003344:	e226      	b.n	8003794 <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8003346:	883b      	ldrh	r3, [r7, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	893b      	ldrh	r3, [r7, #8]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	bfb8      	it	lt
 8003352:	425b      	neglt	r3, r3
 8003354:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	461a      	mov	r2, r3
 800335a:	897b      	ldrh	r3, [r7, #10]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	bfb8      	it	lt
 8003362:	425b      	neglt	r3, r3
 8003364:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	fb03 f303 	mul.w	r3, r3, r3
 800336c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	fb03 f303 	mul.w	r3, r3, r3
 8003374:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003376:	6a3a      	ldr	r2, [r7, #32]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4413      	add	r3, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd f865 	bl	800044c <__aeabi_ui2d>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	ec43 2b10 	vmov	d0, r2, r3
 800338a:	f004 fb15 	bl	80079b8 <sqrt>
 800338e:	ec53 2b10 	vmov	r2, r3, d0
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f7fd fb83 	bl	8000aa0 <__aeabi_d2uiz>
 800339a:	4603      	mov	r3, r0
 800339c:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 800339e:	88bb      	ldrh	r3, [r7, #4]
 80033a0:	461a      	mov	r2, r3
 80033a2:	89bb      	ldrh	r3, [r7, #12]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bfb8      	it	lt
 80033aa:	425b      	neglt	r3, r3
 80033ac:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	461a      	mov	r2, r3
 80033b2:	89fb      	ldrh	r3, [r7, #14]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	bfb8      	it	lt
 80033ba:	425b      	neglt	r3, r3
 80033bc:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	fb03 f303 	mul.w	r3, r3, r3
 80033c4:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fb03 f303 	mul.w	r3, r3, r3
 80033cc:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80033ce:	6a3a      	ldr	r2, [r7, #32]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd f839 	bl	800044c <__aeabi_ui2d>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	ec43 2b10 	vmov	d0, r2, r3
 80033e2:	f004 fae9 	bl	80079b8 <sqrt>
 80033e6:	ec53 2b10 	vmov	r2, r3, d0
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7fd fb57 	bl	8000aa0 <__aeabi_d2uiz>
 80033f2:	4603      	mov	r3, r0
 80033f4:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80033f6:	8b7b      	ldrh	r3, [r7, #26]
 80033f8:	ee07 3a90 	vmov	s15, r3
 80033fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003400:	8b3b      	ldrh	r3, [r7, #24]
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800340a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800340e:	ee16 0a90 	vmov	r0, s13
 8003412:	f7fd f83d 	bl	8000490 <__aeabi_f2d>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 800341e:	a326      	add	r3, pc, #152	; (adr r3, 80034b8 <touch_Adjust+0x498>)
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003428:	f7fd fafc 	bl	8000a24 <__aeabi_dcmplt>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <touch_Adjust+0x426>
 8003432:	a323      	add	r3, pc, #140	; (adr r3, 80034c0 <touch_Adjust+0x4a0>)
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800343c:	f7fd fb10 	bl	8000a60 <__aeabi_dcmpgt>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d046      	beq.n	80034d4 <touch_Adjust+0x4b4>
					{
						cnt=0;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800344c:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <touch_Adjust+0x4a8>)
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	3b14      	subs	r3, #20
 8003452:	b298      	uxth	r0, r3
 8003454:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <touch_Adjust+0x4a8>)
 8003456:	885b      	ldrh	r3, [r3, #2]
 8003458:	3b14      	subs	r3, #20
 800345a:	b29b      	uxth	r3, r3
 800345c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003460:	4619      	mov	r1, r3
 8003462:	f7ff fcc1 	bl	8002de8 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003466:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800346a:	2114      	movs	r1, #20
 800346c:	2014      	movs	r0, #20
 800346e:	f7ff fcbb 	bl	8002de8 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003472:	2300      	movs	r3, #0
 8003474:	9302      	str	r3, [sp, #8]
 8003476:	2310      	movs	r3, #16
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003484:	4a11      	ldr	r2, [pc, #68]	; (80034cc <touch_Adjust+0x4ac>)
 8003486:	2128      	movs	r1, #40	; 0x28
 8003488:	2005      	movs	r0, #5
 800348a:	f7fe fdbb 	bl	8002004 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 800348e:	2300      	movs	r3, #0
 8003490:	9302      	str	r3, [sp, #8]
 8003492:	2310      	movs	r3, #16
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034a0:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <touch_Adjust+0x4b0>)
 80034a2:	213c      	movs	r1, #60	; 0x3c
 80034a4:	2005      	movs	r0, #5
 80034a6:	f7fe fdad 	bl	8002004 <lcd_ShowStr>
						HAL_Delay(1000);
 80034aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034ae:	f000 fa6d 	bl	800398c <HAL_Delay>
						continue;
 80034b2:	e16f      	b.n	8003794 <touch_Adjust+0x774>
 80034b4:	f3af 8000 	nop.w
 80034b8:	66666666 	.word	0x66666666
 80034bc:	3fee6666 	.word	0x3fee6666
 80034c0:	cccccccd 	.word	0xcccccccd
 80034c4:	3ff0cccc 	.word	0x3ff0cccc
 80034c8:	20000230 	.word	0x20000230
 80034cc:	08007bf0 	.word	0x08007bf0
 80034d0:	08007c10 	.word	0x08007c10
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 80034d4:	88bb      	ldrh	r3, [r7, #4]
 80034d6:	461a      	mov	r2, r3
 80034d8:	893b      	ldrh	r3, [r7, #8]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bfb8      	it	lt
 80034e0:	425b      	neglt	r3, r3
 80034e2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	461a      	mov	r2, r3
 80034e8:	897b      	ldrh	r3, [r7, #10]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bfb8      	it	lt
 80034f0:	425b      	neglt	r3, r3
 80034f2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	fb03 f303 	mul.w	r3, r3, r3
 80034fa:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	fb03 f303 	mul.w	r3, r3, r3
 8003502:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003504:	6a3a      	ldr	r2, [r7, #32]
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	4618      	mov	r0, r3
 800350c:	f7fc ff9e 	bl	800044c <__aeabi_ui2d>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	ec43 2b10 	vmov	d0, r2, r3
 8003518:	f004 fa4e 	bl	80079b8 <sqrt>
 800351c:	ec53 2b10 	vmov	r2, r3, d0
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	f7fd fabc 	bl	8000aa0 <__aeabi_d2uiz>
 8003528:	4603      	mov	r3, r0
 800352a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 800352c:	883b      	ldrh	r3, [r7, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	89bb      	ldrh	r3, [r7, #12]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	bfb8      	it	lt
 8003538:	425b      	neglt	r3, r3
 800353a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 800353c:	887b      	ldrh	r3, [r7, #2]
 800353e:	461a      	mov	r2, r3
 8003540:	89fb      	ldrh	r3, [r7, #14]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	bfb8      	it	lt
 8003548:	425b      	neglt	r3, r3
 800354a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	fb03 f303 	mul.w	r3, r3, r3
 8003552:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	fb03 f303 	mul.w	r3, r3, r3
 800355a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 800355c:	6a3a      	ldr	r2, [r7, #32]
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4413      	add	r3, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f7fc ff72 	bl	800044c <__aeabi_ui2d>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	ec43 2b10 	vmov	d0, r2, r3
 8003570:	f004 fa22 	bl	80079b8 <sqrt>
 8003574:	ec53 2b10 	vmov	r2, r3, d0
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	f7fd fa90 	bl	8000aa0 <__aeabi_d2uiz>
 8003580:	4603      	mov	r3, r0
 8003582:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003584:	8b7b      	ldrh	r3, [r7, #26]
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800358e:	8b3b      	ldrh	r3, [r7, #24]
 8003590:	ee07 3a90 	vmov	s15, r3
 8003594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003598:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800359c:	ee16 0a90 	vmov	r0, s13
 80035a0:	f7fc ff76 	bl	8000490 <__aeabi_f2d>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 80035ac:	a383      	add	r3, pc, #524	; (adr r3, 80037bc <touch_Adjust+0x79c>)
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035b6:	f7fd fa35 	bl	8000a24 <__aeabi_dcmplt>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <touch_Adjust+0x5b4>
 80035c0:	a380      	add	r3, pc, #512	; (adr r3, 80037c4 <touch_Adjust+0x7a4>)
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035ca:	f7fd fa49 	bl	8000a60 <__aeabi_dcmpgt>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d036      	beq.n	8003642 <touch_Adjust+0x622>
					{
						cnt=0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80035da:	4b71      	ldr	r3, [pc, #452]	; (80037a0 <touch_Adjust+0x780>)
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	3b14      	subs	r3, #20
 80035e0:	b298      	uxth	r0, r3
 80035e2:	4b6f      	ldr	r3, [pc, #444]	; (80037a0 <touch_Adjust+0x780>)
 80035e4:	885b      	ldrh	r3, [r3, #2]
 80035e6:	3b14      	subs	r3, #20
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ee:	4619      	mov	r1, r3
 80035f0:	f7ff fbfa 	bl	8002de8 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80035f4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80035f8:	2114      	movs	r1, #20
 80035fa:	2014      	movs	r0, #20
 80035fc:	f7ff fbf4 	bl	8002de8 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003600:	2300      	movs	r3, #0
 8003602:	9302      	str	r3, [sp, #8]
 8003604:	2310      	movs	r3, #16
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003612:	4a64      	ldr	r2, [pc, #400]	; (80037a4 <touch_Adjust+0x784>)
 8003614:	2128      	movs	r1, #40	; 0x28
 8003616:	2005      	movs	r0, #5
 8003618:	f7fe fcf4 	bl	8002004 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 800361c:	2300      	movs	r3, #0
 800361e:	9302      	str	r3, [sp, #8]
 8003620:	2310      	movs	r3, #16
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800362e:	4a5e      	ldr	r2, [pc, #376]	; (80037a8 <touch_Adjust+0x788>)
 8003630:	213c      	movs	r1, #60	; 0x3c
 8003632:	2005      	movs	r0, #5
 8003634:	f7fe fce6 	bl	8002004 <lcd_ShowStr>

						HAL_Delay(1000);
 8003638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800363c:	f000 f9a6 	bl	800398c <HAL_Delay>
 							continue;
 8003640:	e0a8      	b.n	8003794 <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8003642:	4b57      	ldr	r3, [pc, #348]	; (80037a0 <touch_Adjust+0x780>)
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	3b28      	subs	r3, #40	; 0x28
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003650:	88bb      	ldrh	r3, [r7, #4]
 8003652:	461a      	mov	r2, r3
 8003654:	883b      	ldrh	r3, [r7, #0]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	ee07 3a90 	vmov	s15, r3
 800365c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003664:	4b51      	ldr	r3, [pc, #324]	; (80037ac <touch_Adjust+0x78c>)
 8003666:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 800366a:	4b4d      	ldr	r3, [pc, #308]	; (80037a0 <touch_Adjust+0x780>)
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	ee07 3a90 	vmov	s15, r3
 8003672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003676:	4b4d      	ldr	r3, [pc, #308]	; (80037ac <touch_Adjust+0x78c>)
 8003678:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800367c:	88bb      	ldrh	r3, [r7, #4]
 800367e:	461a      	mov	r2, r3
 8003680:	883b      	ldrh	r3, [r7, #0]
 8003682:	4413      	add	r3, r2
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800368c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003690:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003694:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003698:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800369c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a0:	ee17 3a90 	vmov	r3, s15
 80036a4:	b21a      	sxth	r2, r3
 80036a6:	4b41      	ldr	r3, [pc, #260]	; (80037ac <touch_Adjust+0x78c>)
 80036a8:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 80036aa:	4b3d      	ldr	r3, [pc, #244]	; (80037a0 <touch_Adjust+0x780>)
 80036ac:	885b      	ldrh	r3, [r3, #2]
 80036ae:	3b28      	subs	r3, #40	; 0x28
 80036b0:	ee07 3a90 	vmov	s15, r3
 80036b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80036b8:	897b      	ldrh	r3, [r7, #10]
 80036ba:	461a      	mov	r2, r3
 80036bc:	887b      	ldrh	r3, [r7, #2]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	ee07 3a90 	vmov	s15, r3
 80036c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036cc:	4b37      	ldr	r3, [pc, #220]	; (80037ac <touch_Adjust+0x78c>)
 80036ce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 80036d2:	4b33      	ldr	r3, [pc, #204]	; (80037a0 <touch_Adjust+0x780>)
 80036d4:	885b      	ldrh	r3, [r3, #2]
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036de:	4b33      	ldr	r3, [pc, #204]	; (80037ac <touch_Adjust+0x78c>)
 80036e0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80036e4:	897b      	ldrh	r3, [r7, #10]
 80036e6:	461a      	mov	r2, r3
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	4413      	add	r3, r2
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003708:	ee17 3a90 	vmov	r3, s15
 800370c:	b21a      	sxth	r2, r3
 800370e:	4b27      	ldr	r3, [pc, #156]	; (80037ac <touch_Adjust+0x78c>)
 8003710:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003712:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <touch_Adjust+0x780>)
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	3b14      	subs	r3, #20
 8003718:	b298      	uxth	r0, r3
 800371a:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <touch_Adjust+0x780>)
 800371c:	885b      	ldrh	r3, [r3, #2]
 800371e:	3b14      	subs	r3, #20
 8003720:	b29b      	uxth	r3, r3
 8003722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003726:	4619      	mov	r1, r3
 8003728:	f7ff fb5e 	bl	8002de8 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 800372c:	2300      	movs	r3, #0
 800372e:	9302      	str	r3, [sp, #8]
 8003730:	2310      	movs	r3, #16
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800373e:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <touch_Adjust+0x790>)
 8003740:	2128      	movs	r1, #40	; 0x28
 8003742:	2005      	movs	r0, #5
 8003744:	f7fe fc5e 	bl	8002004 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8003748:	2300      	movs	r3, #0
 800374a:	9302      	str	r3, [sp, #8]
 800374c:	2310      	movs	r3, #16
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800375a:	4a16      	ldr	r2, [pc, #88]	; (80037b4 <touch_Adjust+0x794>)
 800375c:	213c      	movs	r1, #60	; 0x3c
 800375e:	2005      	movs	r0, #5
 8003760:	f7fe fc50 	bl	8002004 <lcd_ShowStr>
					HAL_Delay(1000);
 8003764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003768:	f000 f910 	bl	800398c <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 800376c:	2300      	movs	r3, #0
 800376e:	9302      	str	r3, [sp, #8]
 8003770:	2310      	movs	r3, #16
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800377e:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <touch_Adjust+0x798>)
 8003780:	2128      	movs	r1, #40	; 0x28
 8003782:	2005      	movs	r0, #5
 8003784:	f7fe fc3e 	bl	8002004 <lcd_ShowStr>
					TP_Save_Adjdata();
 8003788:	f7ff fc1c 	bl	8002fc4 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 800378c:	f7ff fc2a 	bl	8002fe4 <TP_Get_Adjdata>
					return;
 8003790:	e001      	b.n	8003796 <touch_Adjust+0x776>
			}
		}
 8003792:	bf00      	nop
		HAL_Delay(50);
 8003794:	e490      	b.n	80030b8 <touch_Adjust+0x98>
 	}
}
 8003796:	3728      	adds	r7, #40	; 0x28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	f3af 8000 	nop.w
 80037a0:	20000230 	.word	0x20000230
 80037a4:	08007bf0 	.word	0x08007bf0
 80037a8:	08007c10 	.word	0x08007c10
 80037ac:	2000000c 	.word	0x2000000c
 80037b0:	08007c30 	.word	0x08007c30
 80037b4:	08007c50 	.word	0x08007c50
 80037b8:	08007c70 	.word	0x08007c70
 80037bc:	66666666 	.word	0x66666666
 80037c0:	3fee6666 	.word	0x3fee6666
 80037c4:	cccccccd 	.word	0xcccccccd
 80037c8:	3ff0cccc 	.word	0x3ff0cccc

080037cc <touch_init>:

void touch_init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 80037d0:	4904      	ldr	r1, [pc, #16]	; (80037e4 <touch_init+0x18>)
 80037d2:	4805      	ldr	r0, [pc, #20]	; (80037e8 <touch_init+0x1c>)
 80037d4:	f7ff fa84 	bl	8002ce0 <TP_Read_XY>
	at24c_init();
 80037d8:	f7fd fc1c 	bl	8001014 <at24c_init>
	TP_Get_Adjdata();
 80037dc:	f7ff fc02 	bl	8002fe4 <TP_Get_Adjdata>
}
 80037e0:	bf00      	nop
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000022 	.word	0x20000022
 80037e8:	20000018 	.word	0x20000018

080037ec <touch_Scan>:

void touch_Scan(){
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 80037f0:	4b02      	ldr	r3, [pc, #8]	; (80037fc <touch_Scan+0x10>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2000      	movs	r0, #0
 80037f6:	4798      	blx	r3
}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	2000000c 	.word	0x2000000c

08003800 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8003804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003808:	4805      	ldr	r0, [pc, #20]	; (8003820 <touch_IsTouched+0x20>)
 800380a:	f001 f8dd 	bl	80049c8 <HAL_GPIO_ReadPin>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
}
 800381a:	4618      	mov	r0, r3
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40020800 	.word	0x40020800

08003824 <touch_GetX>:

uint16_t touch_GetX(){
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <touch_GetX+0x14>)
 800382a:	899b      	ldrh	r3, [r3, #12]
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	2000000c 	.word	0x2000000c

0800383c <touch_GetY>:

uint16_t touch_GetY(){
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <touch_GetY+0x14>)
 8003842:	8adb      	ldrh	r3, [r3, #22]
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	2000000c 	.word	0x2000000c

08003854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800388c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003858:	480d      	ldr	r0, [pc, #52]	; (8003890 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800385a:	490e      	ldr	r1, [pc, #56]	; (8003894 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800385c:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800385e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003860:	e002      	b.n	8003868 <LoopCopyDataInit>

08003862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003866:	3304      	adds	r3, #4

08003868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800386a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800386c:	d3f9      	bcc.n	8003862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800386e:	4a0b      	ldr	r2, [pc, #44]	; (800389c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003870:	4c0b      	ldr	r4, [pc, #44]	; (80038a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003874:	e001      	b.n	800387a <LoopFillZerobss>

08003876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003878:	3204      	adds	r2, #4

0800387a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800387a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800387c:	d3fb      	bcc.n	8003876 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800387e:	f7fe ff79 	bl	8002774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003882:	f004 f86d 	bl	8007960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003886:	f7fe fcad 	bl	80021e4 <main>
  bx  lr    
 800388a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800388c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003894:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8003898:	0800ac38 	.word	0x0800ac38
  ldr r2, =_sbss
 800389c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80038a0:	200003a0 	.word	0x200003a0

080038a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038a4:	e7fe      	b.n	80038a4 <ADC_IRQHandler>
	...

080038a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038ac:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <HAL_Init+0x40>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <HAL_Init+0x40>)
 80038b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_Init+0x40>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <HAL_Init+0x40>)
 80038be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <HAL_Init+0x40>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <HAL_Init+0x40>)
 80038ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d0:	2003      	movs	r0, #3
 80038d2:	f000 fbb1 	bl	8004038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038d6:	200f      	movs	r0, #15
 80038d8:	f000 f808 	bl	80038ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038dc:	f7fe fee4 	bl	80026a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40023c00 	.word	0x40023c00

080038ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_InitTick+0x54>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_InitTick+0x58>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	4619      	mov	r1, r3
 80038fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003902:	fbb3 f3f1 	udiv	r3, r3, r1
 8003906:	fbb2 f3f3 	udiv	r3, r2, r3
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fbc9 	bl	80040a2 <HAL_SYSTICK_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e00e      	b.n	8003938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b0f      	cmp	r3, #15
 800391e:	d80a      	bhi.n	8003936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003920:	2200      	movs	r2, #0
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	f000 fb91 	bl	800404e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800392c:	4a06      	ldr	r2, [pc, #24]	; (8003948 <HAL_InitTick+0x5c>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e000      	b.n	8003938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000008 	.word	0x20000008
 8003944:	20000048 	.word	0x20000048
 8003948:	20000044 	.word	0x20000044

0800394c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_IncTick+0x20>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_IncTick+0x24>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4413      	add	r3, r2
 800395c:	4a04      	ldr	r2, [pc, #16]	; (8003970 <HAL_IncTick+0x24>)
 800395e:	6013      	str	r3, [r2, #0]
}
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20000048 	.word	0x20000048
 8003970:	2000039c 	.word	0x2000039c

08003974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return uwTick;
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_GetTick+0x14>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	2000039c 	.word	0x2000039c

0800398c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003994:	f7ff ffee 	bl	8003974 <HAL_GetTick>
 8003998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d005      	beq.n	80039b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_Delay+0x44>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039b2:	bf00      	nop
 80039b4:	f7ff ffde 	bl	8003974 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d8f7      	bhi.n	80039b4 <HAL_Delay+0x28>
  {
  }
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000048 	.word	0x20000048

080039d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e033      	b.n	8003a52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fd fa7a 	bl	8000eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d118      	bne.n	8003a44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a1a:	f023 0302 	bic.w	r3, r3, #2
 8003a1e:	f043 0202 	orr.w	r2, r3, #2
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f93a 	bl	8003ca0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f023 0303 	bic.w	r3, r3, #3
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
 8003a42:	e001      	b.n	8003a48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x1c>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e105      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x228>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b09      	cmp	r3, #9
 8003a86:	d925      	bls.n	8003ad4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68d9      	ldr	r1, [r3, #12]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	4613      	mov	r3, r2
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3b1e      	subs	r3, #30
 8003a9e:	2207      	movs	r2, #7
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43da      	mvns	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	400a      	ands	r2, r1
 8003aac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68d9      	ldr	r1, [r3, #12]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	4618      	mov	r0, r3
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	4403      	add	r3, r0
 8003ac6:	3b1e      	subs	r3, #30
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	e022      	b.n	8003b1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6919      	ldr	r1, [r3, #16]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	4413      	add	r3, r2
 8003ae8:	2207      	movs	r2, #7
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43da      	mvns	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	400a      	ands	r2, r1
 8003af6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6919      	ldr	r1, [r3, #16]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	4618      	mov	r0, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4403      	add	r3, r0
 8003b10:	409a      	lsls	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d824      	bhi.n	8003b6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	3b05      	subs	r3, #5
 8003b34:	221f      	movs	r2, #31
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43da      	mvns	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	400a      	ands	r2, r1
 8003b42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	4618      	mov	r0, r3
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3b05      	subs	r3, #5
 8003b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	635a      	str	r2, [r3, #52]	; 0x34
 8003b6a:	e04c      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b0c      	cmp	r3, #12
 8003b72:	d824      	bhi.n	8003bbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	3b23      	subs	r3, #35	; 0x23
 8003b86:	221f      	movs	r2, #31
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43da      	mvns	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	400a      	ands	r2, r1
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	3b23      	subs	r3, #35	; 0x23
 8003bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
 8003bbc:	e023      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	3b41      	subs	r3, #65	; 0x41
 8003bd0:	221f      	movs	r2, #31
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43da      	mvns	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	400a      	ands	r2, r1
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	4618      	mov	r0, r3
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3b41      	subs	r3, #65	; 0x41
 8003bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c06:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <HAL_ADC_ConfigChannel+0x234>)
 8003c08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a21      	ldr	r2, [pc, #132]	; (8003c94 <HAL_ADC_ConfigChannel+0x238>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d109      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x1cc>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b12      	cmp	r3, #18
 8003c1a:	d105      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	; (8003c94 <HAL_ADC_ConfigChannel+0x238>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d123      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x21e>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d003      	beq.n	8003c42 <HAL_ADC_ConfigChannel+0x1e6>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b11      	cmp	r3, #17
 8003c40:	d11b      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d111      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <HAL_ADC_ConfigChannel+0x23c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a10      	ldr	r2, [pc, #64]	; (8003c9c <HAL_ADC_ConfigChannel+0x240>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	0c9a      	lsrs	r2, r3, #18
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c6c:	e002      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f9      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	40012300 	.word	0x40012300
 8003c94:	40012000 	.word	0x40012000
 8003c98:	20000008 	.word	0x20000008
 8003c9c:	431bde83 	.word	0x431bde83

08003ca0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ca8:	4b79      	ldr	r3, [pc, #484]	; (8003e90 <ADC_Init+0x1f0>)
 8003caa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	021a      	lsls	r2, r3, #8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6899      	ldr	r1, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	4a58      	ldr	r2, [pc, #352]	; (8003e94 <ADC_Init+0x1f4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6899      	ldr	r1, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6899      	ldr	r1, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	609a      	str	r2, [r3, #8]
 8003d7c:	e00f      	b.n	8003d9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0202 	bic.w	r2, r2, #2
 8003dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6899      	ldr	r1, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	7e1b      	ldrb	r3, [r3, #24]
 8003db8:	005a      	lsls	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01b      	beq.n	8003e04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003dea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6859      	ldr	r1, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	3b01      	subs	r3, #1
 8003df8:	035a      	lsls	r2, r3, #13
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	e007      	b.n	8003e14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	051a      	lsls	r2, r3, #20
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6899      	ldr	r1, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e56:	025a      	lsls	r2, r3, #9
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6899      	ldr	r1, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	029a      	lsls	r2, r3, #10
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	609a      	str	r2, [r3, #8]
}
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40012300 	.word	0x40012300
 8003e94:	0f000001 	.word	0x0f000001

08003e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <__NVIC_SetPriorityGrouping+0x44>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eca:	4a04      	ldr	r2, [pc, #16]	; (8003edc <__NVIC_SetPriorityGrouping+0x44>)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	60d3      	str	r3, [r2, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee4:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	0a1b      	lsrs	r3, r3, #8
 8003eea:	f003 0307 	and.w	r3, r3, #7
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	db0b      	blt.n	8003f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	4907      	ldr	r1, [pc, #28]	; (8003f34 <__NVIC_EnableIRQ+0x38>)
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	e000e100 	.word	0xe000e100

08003f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	6039      	str	r1, [r7, #0]
 8003f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	db0a      	blt.n	8003f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	490c      	ldr	r1, [pc, #48]	; (8003f84 <__NVIC_SetPriority+0x4c>)
 8003f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f56:	0112      	lsls	r2, r2, #4
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f60:	e00a      	b.n	8003f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4908      	ldr	r1, [pc, #32]	; (8003f88 <__NVIC_SetPriority+0x50>)
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	3b04      	subs	r3, #4
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	440b      	add	r3, r1
 8003f76:	761a      	strb	r2, [r3, #24]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	e000e100 	.word	0xe000e100
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	; 0x24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f1c3 0307 	rsb	r3, r3, #7
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	bf28      	it	cs
 8003faa:	2304      	movcs	r3, #4
 8003fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d902      	bls.n	8003fbc <NVIC_EncodePriority+0x30>
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3b03      	subs	r3, #3
 8003fba:	e000      	b.n	8003fbe <NVIC_EncodePriority+0x32>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43da      	mvns	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	401a      	ands	r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	43d9      	mvns	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe4:	4313      	orrs	r3, r2
         );
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3724      	adds	r7, #36	; 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004004:	d301      	bcc.n	800400a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004006:	2301      	movs	r3, #1
 8004008:	e00f      	b.n	800402a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <SysTick_Config+0x40>)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004012:	210f      	movs	r1, #15
 8004014:	f04f 30ff 	mov.w	r0, #4294967295
 8004018:	f7ff ff8e 	bl	8003f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <SysTick_Config+0x40>)
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004022:	4b04      	ldr	r3, [pc, #16]	; (8004034 <SysTick_Config+0x40>)
 8004024:	2207      	movs	r2, #7
 8004026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	e000e010 	.word	0xe000e010

08004038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ff29 	bl	8003e98 <__NVIC_SetPriorityGrouping>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800404e:	b580      	push	{r7, lr}
 8004050:	b086      	sub	sp, #24
 8004052:	af00      	add	r7, sp, #0
 8004054:	4603      	mov	r3, r0
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004060:	f7ff ff3e 	bl	8003ee0 <__NVIC_GetPriorityGrouping>
 8004064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68b9      	ldr	r1, [r7, #8]
 800406a:	6978      	ldr	r0, [r7, #20]
 800406c:	f7ff ff8e 	bl	8003f8c <NVIC_EncodePriority>
 8004070:	4602      	mov	r2, r0
 8004072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff5d 	bl	8003f38 <__NVIC_SetPriority>
}
 800407e:	bf00      	nop
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	4603      	mov	r3, r0
 800408e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff31 	bl	8003efc <__NVIC_EnableIRQ>
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff ffa2 	bl	8003ff4 <SysTick_Config>
 80040b0:	4603      	mov	r3, r0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040c8:	f7ff fc54 	bl	8003974 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e099      	b.n	800420c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040f8:	e00f      	b.n	800411a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040fa:	f7ff fc3b 	bl	8003974 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b05      	cmp	r3, #5
 8004106:	d908      	bls.n	800411a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2203      	movs	r2, #3
 8004112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e078      	b.n	800420c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e8      	bne.n	80040fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4b38      	ldr	r3, [pc, #224]	; (8004214 <HAL_DMA_Init+0x158>)
 8004134:	4013      	ands	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004146:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800415e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	2b04      	cmp	r3, #4
 8004172:	d107      	bne.n	8004184 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	4313      	orrs	r3, r2
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f023 0307 	bic.w	r3, r3, #7
 800419a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d117      	bne.n	80041de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00e      	beq.n	80041de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f9e9 	bl	8004598 <DMA_CheckFifoParam>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2240      	movs	r2, #64	; 0x40
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041da:	2301      	movs	r3, #1
 80041dc:	e016      	b.n	800420c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f9a0 	bl	800452c <DMA_CalcBaseAndBitshift>
 80041ec:	4603      	mov	r3, r0
 80041ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	223f      	movs	r2, #63	; 0x3f
 80041f6:	409a      	lsls	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	f010803f 	.word	0xf010803f

08004218 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004224:	4b92      	ldr	r3, [pc, #584]	; (8004470 <HAL_DMA_IRQHandler+0x258>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a92      	ldr	r2, [pc, #584]	; (8004474 <HAL_DMA_IRQHandler+0x25c>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0a9b      	lsrs	r3, r3, #10
 8004230:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004242:	2208      	movs	r2, #8
 8004244:	409a      	lsls	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4013      	ands	r3, r2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01a      	beq.n	8004284 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d013      	beq.n	8004284 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0204 	bic.w	r2, r2, #4
 800426a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004270:	2208      	movs	r2, #8
 8004272:	409a      	lsls	r2, r3
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004288:	2201      	movs	r2, #1
 800428a:	409a      	lsls	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d012      	beq.n	80042ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00b      	beq.n	80042ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a6:	2201      	movs	r2, #1
 80042a8:	409a      	lsls	r2, r3
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b2:	f043 0202 	orr.w	r2, r3, #2
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042be:	2204      	movs	r2, #4
 80042c0:	409a      	lsls	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d012      	beq.n	80042f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00b      	beq.n	80042f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	2204      	movs	r2, #4
 80042de:	409a      	lsls	r2, r3
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	f043 0204 	orr.w	r2, r3, #4
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f4:	2210      	movs	r2, #16
 80042f6:	409a      	lsls	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d043      	beq.n	8004388 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d03c      	beq.n	8004388 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004312:	2210      	movs	r2, #16
 8004314:	409a      	lsls	r2, r3
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d018      	beq.n	800435a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d108      	bne.n	8004348 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d024      	beq.n	8004388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	4798      	blx	r3
 8004346:	e01f      	b.n	8004388 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01b      	beq.n	8004388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
 8004358:	e016      	b.n	8004388 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d107      	bne.n	8004378 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0208 	bic.w	r2, r2, #8
 8004376:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438c:	2220      	movs	r2, #32
 800438e:	409a      	lsls	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4013      	ands	r3, r2
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 808e 	beq.w	80044b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8086 	beq.w	80044b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ae:	2220      	movs	r2, #32
 80043b0:	409a      	lsls	r2, r3
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b05      	cmp	r3, #5
 80043c0:	d136      	bne.n	8004430 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0216 	bic.w	r2, r2, #22
 80043d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <HAL_DMA_IRQHandler+0x1da>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d007      	beq.n	8004402 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0208 	bic.w	r2, r2, #8
 8004400:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004406:	223f      	movs	r2, #63	; 0x3f
 8004408:	409a      	lsls	r2, r3
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004422:	2b00      	cmp	r3, #0
 8004424:	d07d      	beq.n	8004522 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	4798      	blx	r3
        }
        return;
 800442e:	e078      	b.n	8004522 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01c      	beq.n	8004478 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d108      	bne.n	800445e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004450:	2b00      	cmp	r3, #0
 8004452:	d030      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4798      	blx	r3
 800445c:	e02b      	b.n	80044b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d027      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
 800446e:	e022      	b.n	80044b6 <HAL_DMA_IRQHandler+0x29e>
 8004470:	20000008 	.word	0x20000008
 8004474:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10f      	bne.n	80044a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0210 	bic.w	r2, r2, #16
 8004494:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d032      	beq.n	8004524 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d022      	beq.n	8004510 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2205      	movs	r2, #5
 80044ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d307      	bcc.n	80044fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f2      	bne.n	80044e2 <HAL_DMA_IRQHandler+0x2ca>
 80044fc:	e000      	b.n	8004500 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80044fe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
 8004520:	e000      	b.n	8004524 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004522:	bf00      	nop
    }
  }
}
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop

0800452c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	3b10      	subs	r3, #16
 800453c:	4a14      	ldr	r2, [pc, #80]	; (8004590 <DMA_CalcBaseAndBitshift+0x64>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004546:	4a13      	ldr	r2, [pc, #76]	; (8004594 <DMA_CalcBaseAndBitshift+0x68>)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d909      	bls.n	800456e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	1d1a      	adds	r2, r3, #4
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	659a      	str	r2, [r3, #88]	; 0x58
 800456c:	e007      	b.n	800457e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004576:	f023 0303 	bic.w	r3, r3, #3
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	aaaaaaab 	.word	0xaaaaaaab
 8004594:	0800ac20 	.word	0x0800ac20

08004598 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d11f      	bne.n	80045f2 <DMA_CheckFifoParam+0x5a>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d856      	bhi.n	8004666 <DMA_CheckFifoParam+0xce>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <DMA_CheckFifoParam+0x28>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045e3 	.word	0x080045e3
 80045c8:	080045d1 	.word	0x080045d1
 80045cc:	08004667 	.word	0x08004667
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d046      	beq.n	800466a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e0:	e043      	b.n	800466a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ea:	d140      	bne.n	800466e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f0:	e03d      	b.n	800466e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fa:	d121      	bne.n	8004640 <DMA_CheckFifoParam+0xa8>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d837      	bhi.n	8004672 <DMA_CheckFifoParam+0xda>
 8004602:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <DMA_CheckFifoParam+0x70>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	08004619 	.word	0x08004619
 800460c:	0800461f 	.word	0x0800461f
 8004610:	08004619 	.word	0x08004619
 8004614:	08004631 	.word	0x08004631
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      break;
 800461c:	e030      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d025      	beq.n	8004676 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800462e:	e022      	b.n	8004676 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004638:	d11f      	bne.n	800467a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800463e:	e01c      	b.n	800467a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d903      	bls.n	800464e <DMA_CheckFifoParam+0xb6>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d003      	beq.n	8004654 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800464c:	e018      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
      break;
 8004652:	e015      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00e      	beq.n	800467e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
      break;
 8004664:	e00b      	b.n	800467e <DMA_CheckFifoParam+0xe6>
      break;
 8004666:	bf00      	nop
 8004668:	e00a      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 800466a:	bf00      	nop
 800466c:	e008      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 800466e:	bf00      	nop
 8004670:	e006      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 8004672:	bf00      	nop
 8004674:	e004      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 8004676:	bf00      	nop
 8004678:	e002      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;   
 800467a:	bf00      	nop
 800467c:	e000      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 800467e:	bf00      	nop
    }
  } 
  
  return status; 
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop

08004690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	; 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046a6:	2300      	movs	r3, #0
 80046a8:	61fb      	str	r3, [r7, #28]
 80046aa:	e16b      	b.n	8004984 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046ac:	2201      	movs	r2, #1
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4013      	ands	r3, r2
 80046be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	f040 815a 	bne.w	800497e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d005      	beq.n	80046e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d130      	bne.n	8004744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	2203      	movs	r2, #3
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4313      	orrs	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004718:	2201      	movs	r2, #1
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	091b      	lsrs	r3, r3, #4
 800472e:	f003 0201 	and.w	r2, r3, #1
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b03      	cmp	r3, #3
 800474e:	d017      	beq.n	8004780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2203      	movs	r2, #3
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d123      	bne.n	80047d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	08da      	lsrs	r2, r3, #3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3208      	adds	r2, #8
 8004794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	220f      	movs	r2, #15
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	08da      	lsrs	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3208      	adds	r2, #8
 80047ce:	69b9      	ldr	r1, [r7, #24]
 80047d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	2203      	movs	r2, #3
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4013      	ands	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 0203 	and.w	r2, r3, #3
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4313      	orrs	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80b4 	beq.w	800497e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	4b60      	ldr	r3, [pc, #384]	; (800499c <HAL_GPIO_Init+0x30c>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	4a5f      	ldr	r2, [pc, #380]	; (800499c <HAL_GPIO_Init+0x30c>)
 8004820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004824:	6453      	str	r3, [r2, #68]	; 0x44
 8004826:	4b5d      	ldr	r3, [pc, #372]	; (800499c <HAL_GPIO_Init+0x30c>)
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004832:	4a5b      	ldr	r2, [pc, #364]	; (80049a0 <HAL_GPIO_Init+0x310>)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	089b      	lsrs	r3, r3, #2
 8004838:	3302      	adds	r3, #2
 800483a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	220f      	movs	r2, #15
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43db      	mvns	r3, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4013      	ands	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a52      	ldr	r2, [pc, #328]	; (80049a4 <HAL_GPIO_Init+0x314>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d02b      	beq.n	80048b6 <HAL_GPIO_Init+0x226>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a51      	ldr	r2, [pc, #324]	; (80049a8 <HAL_GPIO_Init+0x318>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d025      	beq.n	80048b2 <HAL_GPIO_Init+0x222>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a50      	ldr	r2, [pc, #320]	; (80049ac <HAL_GPIO_Init+0x31c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d01f      	beq.n	80048ae <HAL_GPIO_Init+0x21e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a4f      	ldr	r2, [pc, #316]	; (80049b0 <HAL_GPIO_Init+0x320>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d019      	beq.n	80048aa <HAL_GPIO_Init+0x21a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a4e      	ldr	r2, [pc, #312]	; (80049b4 <HAL_GPIO_Init+0x324>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d013      	beq.n	80048a6 <HAL_GPIO_Init+0x216>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a4d      	ldr	r2, [pc, #308]	; (80049b8 <HAL_GPIO_Init+0x328>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00d      	beq.n	80048a2 <HAL_GPIO_Init+0x212>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a4c      	ldr	r2, [pc, #304]	; (80049bc <HAL_GPIO_Init+0x32c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <HAL_GPIO_Init+0x20e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a4b      	ldr	r2, [pc, #300]	; (80049c0 <HAL_GPIO_Init+0x330>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_GPIO_Init+0x20a>
 8004896:	2307      	movs	r3, #7
 8004898:	e00e      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 800489a:	2308      	movs	r3, #8
 800489c:	e00c      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 800489e:	2306      	movs	r3, #6
 80048a0:	e00a      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 80048a2:	2305      	movs	r3, #5
 80048a4:	e008      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 80048a6:	2304      	movs	r3, #4
 80048a8:	e006      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 80048aa:	2303      	movs	r3, #3
 80048ac:	e004      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e002      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <HAL_GPIO_Init+0x228>
 80048b6:	2300      	movs	r3, #0
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	f002 0203 	and.w	r2, r2, #3
 80048be:	0092      	lsls	r2, r2, #2
 80048c0:	4093      	lsls	r3, r2
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048c8:	4935      	ldr	r1, [pc, #212]	; (80049a0 <HAL_GPIO_Init+0x310>)
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	089b      	lsrs	r3, r3, #2
 80048ce:	3302      	adds	r3, #2
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048d6:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <HAL_GPIO_Init+0x334>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	43db      	mvns	r3, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048fa:	4a32      	ldr	r2, [pc, #200]	; (80049c4 <HAL_GPIO_Init+0x334>)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004900:	4b30      	ldr	r3, [pc, #192]	; (80049c4 <HAL_GPIO_Init+0x334>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004924:	4a27      	ldr	r2, [pc, #156]	; (80049c4 <HAL_GPIO_Init+0x334>)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800492a:	4b26      	ldr	r3, [pc, #152]	; (80049c4 <HAL_GPIO_Init+0x334>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	43db      	mvns	r3, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4013      	ands	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800494e:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <HAL_GPIO_Init+0x334>)
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004954:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <HAL_GPIO_Init+0x334>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004978:	4a12      	ldr	r2, [pc, #72]	; (80049c4 <HAL_GPIO_Init+0x334>)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3301      	adds	r3, #1
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b0f      	cmp	r3, #15
 8004988:	f67f ae90 	bls.w	80046ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	3724      	adds	r7, #36	; 0x24
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40023800 	.word	0x40023800
 80049a0:	40013800 	.word	0x40013800
 80049a4:	40020000 	.word	0x40020000
 80049a8:	40020400 	.word	0x40020400
 80049ac:	40020800 	.word	0x40020800
 80049b0:	40020c00 	.word	0x40020c00
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40021400 	.word	0x40021400
 80049bc:	40021800 	.word	0x40021800
 80049c0:	40021c00 	.word	0x40021c00
 80049c4:	40013c00 	.word	0x40013c00

080049c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	887b      	ldrh	r3, [r7, #2]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
 80049e4:	e001      	b.n	80049ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049e6:	2300      	movs	r3, #0
 80049e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	807b      	strh	r3, [r7, #2]
 8004a04:	4613      	mov	r3, r2
 8004a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a08:	787b      	ldrb	r3, [r7, #1]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a0e:	887a      	ldrh	r2, [r7, #2]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a14:	e003      	b.n	8004a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a16:	887b      	ldrh	r3, [r7, #2]
 8004a18:	041a      	lsls	r2, r3, #16
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	619a      	str	r2, [r3, #24]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	460b      	mov	r3, r1
 8004a34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a3c:	887a      	ldrh	r2, [r7, #2]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4013      	ands	r3, r2
 8004a42:	041a      	lsls	r2, r3, #16
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	43d9      	mvns	r1, r3
 8004a48:	887b      	ldrh	r3, [r7, #2]
 8004a4a:	400b      	ands	r3, r1
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	619a      	str	r2, [r3, #24]
}
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e12b      	b.n	8004cca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fc fda6 	bl	80015d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2224      	movs	r2, #36	; 0x24
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ab2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ac4:	f001 fbd8 	bl	8006278 <HAL_RCC_GetPCLK1Freq>
 8004ac8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4a81      	ldr	r2, [pc, #516]	; (8004cd4 <HAL_I2C_Init+0x274>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d807      	bhi.n	8004ae4 <HAL_I2C_Init+0x84>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a80      	ldr	r2, [pc, #512]	; (8004cd8 <HAL_I2C_Init+0x278>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	bf94      	ite	ls
 8004adc:	2301      	movls	r3, #1
 8004ade:	2300      	movhi	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	e006      	b.n	8004af2 <HAL_I2C_Init+0x92>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4a7d      	ldr	r2, [pc, #500]	; (8004cdc <HAL_I2C_Init+0x27c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	bf94      	ite	ls
 8004aec:	2301      	movls	r3, #1
 8004aee:	2300      	movhi	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e0e7      	b.n	8004cca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4a78      	ldr	r2, [pc, #480]	; (8004ce0 <HAL_I2C_Init+0x280>)
 8004afe:	fba2 2303 	umull	r2, r3, r2, r3
 8004b02:	0c9b      	lsrs	r3, r3, #18
 8004b04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4a6a      	ldr	r2, [pc, #424]	; (8004cd4 <HAL_I2C_Init+0x274>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d802      	bhi.n	8004b34 <HAL_I2C_Init+0xd4>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	3301      	adds	r3, #1
 8004b32:	e009      	b.n	8004b48 <HAL_I2C_Init+0xe8>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	4a69      	ldr	r2, [pc, #420]	; (8004ce4 <HAL_I2C_Init+0x284>)
 8004b40:	fba2 2303 	umull	r2, r3, r2, r3
 8004b44:	099b      	lsrs	r3, r3, #6
 8004b46:	3301      	adds	r3, #1
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	495c      	ldr	r1, [pc, #368]	; (8004cd4 <HAL_I2C_Init+0x274>)
 8004b64:	428b      	cmp	r3, r1
 8004b66:	d819      	bhi.n	8004b9c <HAL_I2C_Init+0x13c>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1e59      	subs	r1, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b76:	1c59      	adds	r1, r3, #1
 8004b78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b7c:	400b      	ands	r3, r1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_I2C_Init+0x138>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1e59      	subs	r1, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b90:	3301      	adds	r3, #1
 8004b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b96:	e051      	b.n	8004c3c <HAL_I2C_Init+0x1dc>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	e04f      	b.n	8004c3c <HAL_I2C_Init+0x1dc>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d111      	bne.n	8004bc8 <HAL_I2C_Init+0x168>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1e58      	subs	r0, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6859      	ldr	r1, [r3, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	440b      	add	r3, r1
 8004bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	e012      	b.n	8004bee <HAL_I2C_Init+0x18e>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	1e58      	subs	r0, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6859      	ldr	r1, [r3, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	0099      	lsls	r1, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bde:	3301      	adds	r3, #1
 8004be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf0c      	ite	eq
 8004be8:	2301      	moveq	r3, #1
 8004bea:	2300      	movne	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_I2C_Init+0x196>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e022      	b.n	8004c3c <HAL_I2C_Init+0x1dc>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10e      	bne.n	8004c1c <HAL_I2C_Init+0x1bc>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1e58      	subs	r0, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6859      	ldr	r1, [r3, #4]
 8004c06:	460b      	mov	r3, r1
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	440b      	add	r3, r1
 8004c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c10:	3301      	adds	r3, #1
 8004c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1a:	e00f      	b.n	8004c3c <HAL_I2C_Init+0x1dc>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1e58      	subs	r0, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	0099      	lsls	r1, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c32:	3301      	adds	r3, #1
 8004c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	6809      	ldr	r1, [r1, #0]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6911      	ldr	r1, [r2, #16]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68d2      	ldr	r2, [r2, #12]
 8004c76:	4311      	orrs	r1, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695a      	ldr	r2, [r3, #20]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	000186a0 	.word	0x000186a0
 8004cd8:	001e847f 	.word	0x001e847f
 8004cdc:	003d08ff 	.word	0x003d08ff
 8004ce0:	431bde83 	.word	0x431bde83
 8004ce4:	10624dd3 	.word	0x10624dd3

08004ce8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	817b      	strh	r3, [r7, #10]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	813b      	strh	r3, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d02:	f7fe fe37 	bl	8003974 <HAL_GetTick>
 8004d06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	f040 80d9 	bne.w	8004ec8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	2319      	movs	r3, #25
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	496d      	ldr	r1, [pc, #436]	; (8004ed4 <HAL_I2C_Mem_Write+0x1ec>)
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fc7f 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e0cc      	b.n	8004eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_I2C_Mem_Write+0x56>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e0c5      	b.n	8004eca <HAL_I2C_Mem_Write+0x1e2>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d007      	beq.n	8004d64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2221      	movs	r2, #33	; 0x21
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2240      	movs	r2, #64	; 0x40
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a3a      	ldr	r2, [r7, #32]
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4a4d      	ldr	r2, [pc, #308]	; (8004ed8 <HAL_I2C_Mem_Write+0x1f0>)
 8004da4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004da6:	88f8      	ldrh	r0, [r7, #6]
 8004da8:	893a      	ldrh	r2, [r7, #8]
 8004daa:	8979      	ldrh	r1, [r7, #10]
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	4603      	mov	r3, r0
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fab6 	bl	8005328 <I2C_RequestMemoryWrite>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d052      	beq.n	8004e68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e081      	b.n	8004eca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 fd00 	bl	80057d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00d      	beq.n	8004df2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d107      	bne.n	8004dee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e06b      	b.n	8004eca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	781a      	ldrb	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d11b      	bne.n	8004e68 <HAL_I2C_Mem_Write+0x180>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d017      	beq.n	8004e68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	781a      	ldrb	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1aa      	bne.n	8004dc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 fcec 	bl	8005852 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d107      	bne.n	8004e98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e016      	b.n	8004eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e000      	b.n	8004eca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ec8:	2302      	movs	r3, #2
  }
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	00100002 	.word	0x00100002
 8004ed8:	ffff0000 	.word	0xffff0000

08004edc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	; 0x30
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4603      	mov	r3, r0
 8004eec:	817b      	strh	r3, [r7, #10]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	813b      	strh	r3, [r7, #8]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ef6:	f7fe fd3d 	bl	8003974 <HAL_GetTick>
 8004efa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	f040 8208 	bne.w	800531a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	2319      	movs	r3, #25
 8004f10:	2201      	movs	r2, #1
 8004f12:	497b      	ldr	r1, [pc, #492]	; (8005100 <HAL_I2C_Mem_Read+0x224>)
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 fb85 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f20:	2302      	movs	r3, #2
 8004f22:	e1fb      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_I2C_Mem_Read+0x56>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e1f4      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d007      	beq.n	8004f58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2222      	movs	r2, #34	; 0x22
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2240      	movs	r2, #64	; 0x40
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a5b      	ldr	r2, [pc, #364]	; (8005104 <HAL_I2C_Mem_Read+0x228>)
 8004f98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f9a:	88f8      	ldrh	r0, [r7, #6]
 8004f9c:	893a      	ldrh	r2, [r7, #8]
 8004f9e:	8979      	ldrh	r1, [r7, #10]
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	4603      	mov	r3, r0
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fa52 	bl	8005454 <I2C_RequestMemoryRead>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e1b0      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d113      	bne.n	8004fea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	623b      	str	r3, [r7, #32]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	623b      	str	r3, [r7, #32]
 8004fd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	e184      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d11b      	bne.n	800502a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005000:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e164      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502e:	2b02      	cmp	r3, #2
 8005030:	d11b      	bne.n	800506a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005040:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005052:	2300      	movs	r3, #0
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	e144      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005080:	e138      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005086:	2b03      	cmp	r3, #3
 8005088:	f200 80f1 	bhi.w	800526e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005090:	2b01      	cmp	r3, #1
 8005092:	d123      	bne.n	80050dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fc1b 	bl	80058d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e139      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050da:	e10b      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d14e      	bne.n	8005182 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	2200      	movs	r2, #0
 80050ec:	4906      	ldr	r1, [pc, #24]	; (8005108 <HAL_I2C_Mem_Read+0x22c>)
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fa98 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e10e      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
 80050fe:	bf00      	nop
 8005100:	00100002 	.word	0x00100002
 8005104:	ffff0000 	.word	0xffff0000
 8005108:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005180:	e0b8      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	2200      	movs	r2, #0
 800518a:	4966      	ldr	r1, [pc, #408]	; (8005324 <HAL_I2C_Mem_Read+0x448>)
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fa49 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0bf      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	2200      	movs	r2, #0
 80051e6:	494f      	ldr	r1, [pc, #316]	; (8005324 <HAL_I2C_Mem_Read+0x448>)
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 fa1b 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e091      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800526c:	e042      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fb2e 	bl	80058d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e04c      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d118      	bne.n	80052f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f47f aec2 	bne.w	8005082 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e000      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800531a:	2302      	movs	r3, #2
  }
}
 800531c:	4618      	mov	r0, r3
 800531e:	3728      	adds	r7, #40	; 0x28
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	00010004 	.word	0x00010004

08005328 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	4608      	mov	r0, r1
 8005332:	4611      	mov	r1, r2
 8005334:	461a      	mov	r2, r3
 8005336:	4603      	mov	r3, r0
 8005338:	817b      	strh	r3, [r7, #10]
 800533a:	460b      	mov	r3, r1
 800533c:	813b      	strh	r3, [r7, #8]
 800533e:	4613      	mov	r3, r2
 8005340:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005350:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	2200      	movs	r2, #0
 800535a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 f960 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00d      	beq.n	8005386 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005378:	d103      	bne.n	8005382 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e05f      	b.n	8005446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005386:	897b      	ldrh	r3, [r7, #10]
 8005388:	b2db      	uxtb	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005394:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	6a3a      	ldr	r2, [r7, #32]
 800539a:	492d      	ldr	r1, [pc, #180]	; (8005450 <I2C_RequestMemoryWrite+0x128>)
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f998 	bl	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e04c      	b.n	8005446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c4:	6a39      	ldr	r1, [r7, #32]
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 fa02 	bl	80057d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00d      	beq.n	80053ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d107      	bne.n	80053ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e02b      	b.n	8005446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d105      	bne.n	8005400 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053f4:	893b      	ldrh	r3, [r7, #8]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	611a      	str	r2, [r3, #16]
 80053fe:	e021      	b.n	8005444 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005400:	893b      	ldrh	r3, [r7, #8]
 8005402:	0a1b      	lsrs	r3, r3, #8
 8005404:	b29b      	uxth	r3, r3
 8005406:	b2da      	uxtb	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800540e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005410:	6a39      	ldr	r1, [r7, #32]
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f9dc 	bl	80057d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00d      	beq.n	800543a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	2b04      	cmp	r3, #4
 8005424:	d107      	bne.n	8005436 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005434:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e005      	b.n	8005446 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800543a:	893b      	ldrh	r3, [r7, #8]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	00010002 	.word	0x00010002

08005454 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	4608      	mov	r0, r1
 800545e:	4611      	mov	r1, r2
 8005460:	461a      	mov	r2, r3
 8005462:	4603      	mov	r3, r0
 8005464:	817b      	strh	r3, [r7, #10]
 8005466:	460b      	mov	r3, r1
 8005468:	813b      	strh	r3, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800547c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800548c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	2200      	movs	r2, #0
 8005496:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f8c2 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b4:	d103      	bne.n	80054be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e0aa      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054c2:	897b      	ldrh	r3, [r7, #10]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	6a3a      	ldr	r2, [r7, #32]
 80054d6:	4952      	ldr	r1, [pc, #328]	; (8005620 <I2C_RequestMemoryRead+0x1cc>)
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f8fa 	bl	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e097      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005500:	6a39      	ldr	r1, [r7, #32]
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f964 	bl	80057d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00d      	beq.n	800552a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	2b04      	cmp	r3, #4
 8005514:	d107      	bne.n	8005526 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005524:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e076      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d105      	bne.n	800553c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005530:	893b      	ldrh	r3, [r7, #8]
 8005532:	b2da      	uxtb	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	611a      	str	r2, [r3, #16]
 800553a:	e021      	b.n	8005580 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800553c:	893b      	ldrh	r3, [r7, #8]
 800553e:	0a1b      	lsrs	r3, r3, #8
 8005540:	b29b      	uxth	r3, r3
 8005542:	b2da      	uxtb	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800554a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554c:	6a39      	ldr	r1, [r7, #32]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f93e 	bl	80057d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00d      	beq.n	8005576 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	2b04      	cmp	r3, #4
 8005560:	d107      	bne.n	8005572 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005570:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e050      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005576:	893b      	ldrh	r3, [r7, #8]
 8005578:	b2da      	uxtb	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	6a39      	ldr	r1, [r7, #32]
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f923 	bl	80057d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00d      	beq.n	80055ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	2b04      	cmp	r3, #4
 8005596:	d107      	bne.n	80055a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e035      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f82b 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00d      	beq.n	80055f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e2:	d103      	bne.n	80055ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e013      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055f0:	897b      	ldrh	r3, [r7, #10]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	6a3a      	ldr	r2, [r7, #32]
 8005604:	4906      	ldr	r1, [pc, #24]	; (8005620 <I2C_RequestMemoryRead+0x1cc>)
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f863 	bl	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	00010002 	.word	0x00010002

08005624 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	4613      	mov	r3, r2
 8005632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005634:	e025      	b.n	8005682 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563c:	d021      	beq.n	8005682 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563e:	f7fe f999 	bl	8003974 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d302      	bcc.n	8005654 <I2C_WaitOnFlagUntilTimeout+0x30>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d116      	bne.n	8005682 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f043 0220 	orr.w	r2, r3, #32
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e023      	b.n	80056ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	0c1b      	lsrs	r3, r3, #16
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	d10d      	bne.n	80056a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	43da      	mvns	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4013      	ands	r3, r2
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	e00c      	b.n	80056c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	43da      	mvns	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4013      	ands	r3, r2
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	bf0c      	ite	eq
 80056ba:	2301      	moveq	r3, #1
 80056bc:	2300      	movne	r3, #0
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	461a      	mov	r2, r3
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d0b6      	beq.n	8005636 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056e0:	e051      	b.n	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f0:	d123      	bne.n	800573a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005700:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800570a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f043 0204 	orr.w	r2, r3, #4
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e046      	b.n	80057c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005740:	d021      	beq.n	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005742:	f7fe f917 	bl	8003974 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	429a      	cmp	r2, r3
 8005750:	d302      	bcc.n	8005758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d116      	bne.n	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e020      	b.n	80057c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	0c1b      	lsrs	r3, r3, #16
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10c      	bne.n	80057aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	43da      	mvns	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4013      	ands	r3, r2
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf14      	ite	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	2300      	moveq	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	e00b      	b.n	80057c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	43da      	mvns	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	4013      	ands	r3, r2
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bf14      	ite	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	2300      	moveq	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d18d      	bne.n	80056e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057dc:	e02d      	b.n	800583a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 f8ce 	bl	8005980 <I2C_IsAcknowledgeFailed>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e02d      	b.n	800584a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d021      	beq.n	800583a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f6:	f7fe f8bd 	bl	8003974 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d116      	bne.n	800583a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f043 0220 	orr.w	r2, r3, #32
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e007      	b.n	800584a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005844:	2b80      	cmp	r3, #128	; 0x80
 8005846:	d1ca      	bne.n	80057de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800585e:	e02d      	b.n	80058bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f88d 	bl	8005980 <I2C_IsAcknowledgeFailed>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e02d      	b.n	80058cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005876:	d021      	beq.n	80058bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005878:	f7fe f87c 	bl	8003974 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	429a      	cmp	r2, r3
 8005886:	d302      	bcc.n	800588e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d116      	bne.n	80058bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	f043 0220 	orr.w	r2, r3, #32
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e007      	b.n	80058cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d1ca      	bne.n	8005860 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058e0:	e042      	b.n	8005968 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b10      	cmp	r3, #16
 80058ee:	d119      	bne.n	8005924 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0210 	mvn.w	r2, #16
 80058f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e029      	b.n	8005978 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005924:	f7fe f826 	bl	8003974 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	d302      	bcc.n	800593a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	f043 0220 	orr.w	r2, r3, #32
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e007      	b.n	8005978 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b40      	cmp	r3, #64	; 0x40
 8005974:	d1b5      	bne.n	80058e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005996:	d11b      	bne.n	80059d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	f043 0204 	orr.w	r2, r3, #4
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
	...

080059e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e264      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d075      	beq.n	8005aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059fe:	4ba3      	ldr	r3, [pc, #652]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d00c      	beq.n	8005a24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a0a:	4ba0      	ldr	r3, [pc, #640]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d112      	bne.n	8005a3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a16:	4b9d      	ldr	r3, [pc, #628]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a22:	d10b      	bne.n	8005a3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a24:	4b99      	ldr	r3, [pc, #612]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d05b      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x108>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d157      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e23f      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a44:	d106      	bne.n	8005a54 <HAL_RCC_OscConfig+0x74>
 8005a46:	4b91      	ldr	r3, [pc, #580]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a90      	ldr	r2, [pc, #576]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	e01d      	b.n	8005a90 <HAL_RCC_OscConfig+0xb0>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a5c:	d10c      	bne.n	8005a78 <HAL_RCC_OscConfig+0x98>
 8005a5e:	4b8b      	ldr	r3, [pc, #556]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a8a      	ldr	r2, [pc, #552]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	4b88      	ldr	r3, [pc, #544]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a87      	ldr	r2, [pc, #540]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	e00b      	b.n	8005a90 <HAL_RCC_OscConfig+0xb0>
 8005a78:	4b84      	ldr	r3, [pc, #528]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a83      	ldr	r2, [pc, #524]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	4b81      	ldr	r3, [pc, #516]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a80      	ldr	r2, [pc, #512]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d013      	beq.n	8005ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a98:	f7fd ff6c 	bl	8003974 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aa0:	f7fd ff68 	bl	8003974 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b64      	cmp	r3, #100	; 0x64
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e204      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ab2:	4b76      	ldr	r3, [pc, #472]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCC_OscConfig+0xc0>
 8005abe:	e014      	b.n	8005aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac0:	f7fd ff58 	bl	8003974 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ac8:	f7fd ff54 	bl	8003974 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b64      	cmp	r3, #100	; 0x64
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e1f0      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ada:	4b6c      	ldr	r3, [pc, #432]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f0      	bne.n	8005ac8 <HAL_RCC_OscConfig+0xe8>
 8005ae6:	e000      	b.n	8005aea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d063      	beq.n	8005bbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005af6:	4b65      	ldr	r3, [pc, #404]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 030c 	and.w	r3, r3, #12
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00b      	beq.n	8005b1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b02:	4b62      	ldr	r3, [pc, #392]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d11c      	bne.n	8005b48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b0e:	4b5f      	ldr	r3, [pc, #380]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d116      	bne.n	8005b48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b1a:	4b5c      	ldr	r3, [pc, #368]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <HAL_RCC_OscConfig+0x152>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d001      	beq.n	8005b32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e1c4      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b32:	4b56      	ldr	r3, [pc, #344]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	4952      	ldr	r1, [pc, #328]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b46:	e03a      	b.n	8005bbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d020      	beq.n	8005b92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b50:	4b4f      	ldr	r3, [pc, #316]	; (8005c90 <HAL_RCC_OscConfig+0x2b0>)
 8005b52:	2201      	movs	r2, #1
 8005b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b56:	f7fd ff0d 	bl	8003974 <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b5e:	f7fd ff09 	bl	8003974 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e1a5      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b70:	4b46      	ldr	r3, [pc, #280]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0f0      	beq.n	8005b5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b7c:	4b43      	ldr	r3, [pc, #268]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	4940      	ldr	r1, [pc, #256]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	600b      	str	r3, [r1, #0]
 8005b90:	e015      	b.n	8005bbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b92:	4b3f      	ldr	r3, [pc, #252]	; (8005c90 <HAL_RCC_OscConfig+0x2b0>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b98:	f7fd feec 	bl	8003974 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ba0:	f7fd fee8 	bl	8003974 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e184      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bb2:	4b36      	ldr	r3, [pc, #216]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1f0      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d030      	beq.n	8005c2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d016      	beq.n	8005c00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bd2:	4b30      	ldr	r3, [pc, #192]	; (8005c94 <HAL_RCC_OscConfig+0x2b4>)
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd8:	f7fd fecc 	bl	8003974 <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005be0:	f7fd fec8 	bl	8003974 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e164      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bf2:	4b26      	ldr	r3, [pc, #152]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f0      	beq.n	8005be0 <HAL_RCC_OscConfig+0x200>
 8005bfe:	e015      	b.n	8005c2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c00:	4b24      	ldr	r3, [pc, #144]	; (8005c94 <HAL_RCC_OscConfig+0x2b4>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c06:	f7fd feb5 	bl	8003974 <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c0e:	f7fd feb1 	bl	8003974 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e14d      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c20:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f0      	bne.n	8005c0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80a0 	beq.w	8005d7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c3e:	4b13      	ldr	r3, [pc, #76]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10f      	bne.n	8005c6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60bb      	str	r3, [r7, #8]
 8005c4e:	4b0f      	ldr	r3, [pc, #60]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	4a0e      	ldr	r2, [pc, #56]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c58:	6413      	str	r3, [r2, #64]	; 0x40
 8005c5a:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <HAL_RCC_OscConfig+0x2ac>)
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c62:	60bb      	str	r3, [r7, #8]
 8005c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c66:	2301      	movs	r3, #1
 8005c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_RCC_OscConfig+0x2b8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d121      	bne.n	8005cba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c76:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <HAL_RCC_OscConfig+0x2b8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a07      	ldr	r2, [pc, #28]	; (8005c98 <HAL_RCC_OscConfig+0x2b8>)
 8005c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c82:	f7fd fe77 	bl	8003974 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c88:	e011      	b.n	8005cae <HAL_RCC_OscConfig+0x2ce>
 8005c8a:	bf00      	nop
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	42470000 	.word	0x42470000
 8005c94:	42470e80 	.word	0x42470e80
 8005c98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9c:	f7fd fe6a 	bl	8003974 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e106      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cae:	4b85      	ldr	r3, [pc, #532]	; (8005ec4 <HAL_RCC_OscConfig+0x4e4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0f0      	beq.n	8005c9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d106      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x2f0>
 8005cc2:	4b81      	ldr	r3, [pc, #516]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc6:	4a80      	ldr	r2, [pc, #512]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005cc8:	f043 0301 	orr.w	r3, r3, #1
 8005ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cce:	e01c      	b.n	8005d0a <HAL_RCC_OscConfig+0x32a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b05      	cmp	r3, #5
 8005cd6:	d10c      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x312>
 8005cd8:	4b7b      	ldr	r3, [pc, #492]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cdc:	4a7a      	ldr	r2, [pc, #488]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005cde:	f043 0304 	orr.w	r3, r3, #4
 8005ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce4:	4b78      	ldr	r3, [pc, #480]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	4a77      	ldr	r2, [pc, #476]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005cea:	f043 0301 	orr.w	r3, r3, #1
 8005cee:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf0:	e00b      	b.n	8005d0a <HAL_RCC_OscConfig+0x32a>
 8005cf2:	4b75      	ldr	r3, [pc, #468]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf6:	4a74      	ldr	r2, [pc, #464]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cfe:	4b72      	ldr	r3, [pc, #456]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d02:	4a71      	ldr	r2, [pc, #452]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005d04:	f023 0304 	bic.w	r3, r3, #4
 8005d08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d015      	beq.n	8005d3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d12:	f7fd fe2f 	bl	8003974 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d18:	e00a      	b.n	8005d30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d1a:	f7fd fe2b 	bl	8003974 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e0c5      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d30:	4b65      	ldr	r3, [pc, #404]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0ee      	beq.n	8005d1a <HAL_RCC_OscConfig+0x33a>
 8005d3c:	e014      	b.n	8005d68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d3e:	f7fd fe19 	bl	8003974 <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d44:	e00a      	b.n	8005d5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d46:	f7fd fe15 	bl	8003974 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e0af      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d5c:	4b5a      	ldr	r3, [pc, #360]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1ee      	bne.n	8005d46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d68:	7dfb      	ldrb	r3, [r7, #23]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d105      	bne.n	8005d7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d6e:	4b56      	ldr	r3, [pc, #344]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	4a55      	ldr	r2, [pc, #340]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 809b 	beq.w	8005eba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d84:	4b50      	ldr	r3, [pc, #320]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f003 030c 	and.w	r3, r3, #12
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d05c      	beq.n	8005e4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d141      	bne.n	8005e1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d98:	4b4c      	ldr	r3, [pc, #304]	; (8005ecc <HAL_RCC_OscConfig+0x4ec>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9e:	f7fd fde9 	bl	8003974 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da6:	f7fd fde5 	bl	8003974 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e081      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db8:	4b43      	ldr	r3, [pc, #268]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1f0      	bne.n	8005da6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	019b      	lsls	r3, r3, #6
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	041b      	lsls	r3, r3, #16
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	061b      	lsls	r3, r3, #24
 8005de8:	4937      	ldr	r1, [pc, #220]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dee:	4b37      	ldr	r3, [pc, #220]	; (8005ecc <HAL_RCC_OscConfig+0x4ec>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df4:	f7fd fdbe 	bl	8003974 <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dfc:	f7fd fdba 	bl	8003974 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e056      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e0e:	4b2e      	ldr	r3, [pc, #184]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f0      	beq.n	8005dfc <HAL_RCC_OscConfig+0x41c>
 8005e1a:	e04e      	b.n	8005eba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ecc <HAL_RCC_OscConfig+0x4ec>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e22:	f7fd fda7 	bl	8003974 <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e28:	e008      	b.n	8005e3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e2a:	f7fd fda3 	bl	8003974 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e03f      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e3c:	4b22      	ldr	r3, [pc, #136]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1f0      	bne.n	8005e2a <HAL_RCC_OscConfig+0x44a>
 8005e48:	e037      	b.n	8005eba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e032      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e56:	4b1c      	ldr	r3, [pc, #112]	; (8005ec8 <HAL_RCC_OscConfig+0x4e8>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d028      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d121      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d11a      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e86:	4013      	ands	r3, r2
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e8c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d111      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	085b      	lsrs	r3, r3, #1
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d001      	beq.n	8005eba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40007000 	.word	0x40007000
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	42470060 	.word	0x42470060

08005ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0cc      	b.n	800607e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee4:	4b68      	ldr	r3, [pc, #416]	; (8006088 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d90c      	bls.n	8005f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef2:	4b65      	ldr	r3, [pc, #404]	; (8006088 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efa:	4b63      	ldr	r3, [pc, #396]	; (8006088 <HAL_RCC_ClockConfig+0x1b8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d001      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0b8      	b.n	800607e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d020      	beq.n	8005f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f24:	4b59      	ldr	r3, [pc, #356]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	4a58      	ldr	r2, [pc, #352]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0308 	and.w	r3, r3, #8
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d005      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f3c:	4b53      	ldr	r3, [pc, #332]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	4a52      	ldr	r2, [pc, #328]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f48:	4b50      	ldr	r3, [pc, #320]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	494d      	ldr	r1, [pc, #308]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d044      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d107      	bne.n	8005f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f6e:	4b47      	ldr	r3, [pc, #284]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d119      	bne.n	8005fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e07f      	b.n	800607e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d003      	beq.n	8005f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d107      	bne.n	8005f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f8e:	4b3f      	ldr	r3, [pc, #252]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d109      	bne.n	8005fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e06f      	b.n	800607e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f9e:	4b3b      	ldr	r3, [pc, #236]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e067      	b.n	800607e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fae:	4b37      	ldr	r3, [pc, #220]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f023 0203 	bic.w	r2, r3, #3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	4934      	ldr	r1, [pc, #208]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fc0:	f7fd fcd8 	bl	8003974 <HAL_GetTick>
 8005fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc6:	e00a      	b.n	8005fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fc8:	f7fd fcd4 	bl	8003974 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e04f      	b.n	800607e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fde:	4b2b      	ldr	r3, [pc, #172]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 020c 	and.w	r2, r3, #12
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d1eb      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ff0:	4b25      	ldr	r3, [pc, #148]	; (8006088 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d20c      	bcs.n	8006018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ffe:	4b22      	ldr	r3, [pc, #136]	; (8006088 <HAL_RCC_ClockConfig+0x1b8>)
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006006:	4b20      	ldr	r3, [pc, #128]	; (8006088 <HAL_RCC_ClockConfig+0x1b8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d001      	beq.n	8006018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e032      	b.n	800607e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d008      	beq.n	8006036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006024:	4b19      	ldr	r3, [pc, #100]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	4916      	ldr	r1, [pc, #88]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8006032:	4313      	orrs	r3, r2
 8006034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006042:	4b12      	ldr	r3, [pc, #72]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	490e      	ldr	r1, [pc, #56]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 8006052:	4313      	orrs	r3, r2
 8006054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006056:	f000 f821 	bl	800609c <HAL_RCC_GetSysClockFreq>
 800605a:	4602      	mov	r2, r0
 800605c:	4b0b      	ldr	r3, [pc, #44]	; (800608c <HAL_RCC_ClockConfig+0x1bc>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	091b      	lsrs	r3, r3, #4
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	490a      	ldr	r1, [pc, #40]	; (8006090 <HAL_RCC_ClockConfig+0x1c0>)
 8006068:	5ccb      	ldrb	r3, [r1, r3]
 800606a:	fa22 f303 	lsr.w	r3, r2, r3
 800606e:	4a09      	ldr	r2, [pc, #36]	; (8006094 <HAL_RCC_ClockConfig+0x1c4>)
 8006070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006072:	4b09      	ldr	r3, [pc, #36]	; (8006098 <HAL_RCC_ClockConfig+0x1c8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f7fd fc38 	bl	80038ec <HAL_InitTick>

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40023c00 	.word	0x40023c00
 800608c:	40023800 	.word	0x40023800
 8006090:	0800ac08 	.word	0x0800ac08
 8006094:	20000008 	.word	0x20000008
 8006098:	20000044 	.word	0x20000044

0800609c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800609c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	607b      	str	r3, [r7, #4]
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	2300      	movs	r3, #0
 80060ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060b4:	4b67      	ldr	r3, [pc, #412]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 030c 	and.w	r3, r3, #12
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d00d      	beq.n	80060dc <HAL_RCC_GetSysClockFreq+0x40>
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	f200 80bd 	bhi.w	8006240 <HAL_RCC_GetSysClockFreq+0x1a4>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <HAL_RCC_GetSysClockFreq+0x34>
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d003      	beq.n	80060d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80060ce:	e0b7      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060d0:	4b61      	ldr	r3, [pc, #388]	; (8006258 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80060d2:	60bb      	str	r3, [r7, #8]
       break;
 80060d4:	e0b7      	b.n	8006246 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060d6:	4b61      	ldr	r3, [pc, #388]	; (800625c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80060d8:	60bb      	str	r3, [r7, #8]
      break;
 80060da:	e0b4      	b.n	8006246 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060dc:	4b5d      	ldr	r3, [pc, #372]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060e6:	4b5b      	ldr	r3, [pc, #364]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d04d      	beq.n	800618e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060f2:	4b58      	ldr	r3, [pc, #352]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	099b      	lsrs	r3, r3, #6
 80060f8:	461a      	mov	r2, r3
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006102:	f04f 0100 	mov.w	r1, #0
 8006106:	ea02 0800 	and.w	r8, r2, r0
 800610a:	ea03 0901 	and.w	r9, r3, r1
 800610e:	4640      	mov	r0, r8
 8006110:	4649      	mov	r1, r9
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	014b      	lsls	r3, r1, #5
 800611c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006120:	0142      	lsls	r2, r0, #5
 8006122:	4610      	mov	r0, r2
 8006124:	4619      	mov	r1, r3
 8006126:	ebb0 0008 	subs.w	r0, r0, r8
 800612a:	eb61 0109 	sbc.w	r1, r1, r9
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	f04f 0300 	mov.w	r3, #0
 8006136:	018b      	lsls	r3, r1, #6
 8006138:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800613c:	0182      	lsls	r2, r0, #6
 800613e:	1a12      	subs	r2, r2, r0
 8006140:	eb63 0301 	sbc.w	r3, r3, r1
 8006144:	f04f 0000 	mov.w	r0, #0
 8006148:	f04f 0100 	mov.w	r1, #0
 800614c:	00d9      	lsls	r1, r3, #3
 800614e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006152:	00d0      	lsls	r0, r2, #3
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	eb12 0208 	adds.w	r2, r2, r8
 800615c:	eb43 0309 	adc.w	r3, r3, r9
 8006160:	f04f 0000 	mov.w	r0, #0
 8006164:	f04f 0100 	mov.w	r1, #0
 8006168:	0259      	lsls	r1, r3, #9
 800616a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800616e:	0250      	lsls	r0, r2, #9
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4610      	mov	r0, r2
 8006176:	4619      	mov	r1, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	461a      	mov	r2, r3
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	f7fa fcae 	bl	8000ae0 <__aeabi_uldivmod>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4613      	mov	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	e04a      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800618e:	4b31      	ldr	r3, [pc, #196]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	099b      	lsrs	r3, r3, #6
 8006194:	461a      	mov	r2, r3
 8006196:	f04f 0300 	mov.w	r3, #0
 800619a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800619e:	f04f 0100 	mov.w	r1, #0
 80061a2:	ea02 0400 	and.w	r4, r2, r0
 80061a6:	ea03 0501 	and.w	r5, r3, r1
 80061aa:	4620      	mov	r0, r4
 80061ac:	4629      	mov	r1, r5
 80061ae:	f04f 0200 	mov.w	r2, #0
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	014b      	lsls	r3, r1, #5
 80061b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061bc:	0142      	lsls	r2, r0, #5
 80061be:	4610      	mov	r0, r2
 80061c0:	4619      	mov	r1, r3
 80061c2:	1b00      	subs	r0, r0, r4
 80061c4:	eb61 0105 	sbc.w	r1, r1, r5
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	f04f 0300 	mov.w	r3, #0
 80061d0:	018b      	lsls	r3, r1, #6
 80061d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061d6:	0182      	lsls	r2, r0, #6
 80061d8:	1a12      	subs	r2, r2, r0
 80061da:	eb63 0301 	sbc.w	r3, r3, r1
 80061de:	f04f 0000 	mov.w	r0, #0
 80061e2:	f04f 0100 	mov.w	r1, #0
 80061e6:	00d9      	lsls	r1, r3, #3
 80061e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061ec:	00d0      	lsls	r0, r2, #3
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	1912      	adds	r2, r2, r4
 80061f4:	eb45 0303 	adc.w	r3, r5, r3
 80061f8:	f04f 0000 	mov.w	r0, #0
 80061fc:	f04f 0100 	mov.w	r1, #0
 8006200:	0299      	lsls	r1, r3, #10
 8006202:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006206:	0290      	lsls	r0, r2, #10
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4610      	mov	r0, r2
 800620e:	4619      	mov	r1, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	461a      	mov	r2, r3
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	f7fa fc62 	bl	8000ae0 <__aeabi_uldivmod>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4613      	mov	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006224:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	0c1b      	lsrs	r3, r3, #16
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	3301      	adds	r3, #1
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	fbb2 f3f3 	udiv	r3, r2, r3
 800623c:	60bb      	str	r3, [r7, #8]
      break;
 800623e:	e002      	b.n	8006246 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006240:	4b05      	ldr	r3, [pc, #20]	; (8006258 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006242:	60bb      	str	r3, [r7, #8]
      break;
 8006244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006246:	68bb      	ldr	r3, [r7, #8]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006252:	bf00      	nop
 8006254:	40023800 	.word	0x40023800
 8006258:	00f42400 	.word	0x00f42400
 800625c:	007a1200 	.word	0x007a1200

08006260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006264:	4b03      	ldr	r3, [pc, #12]	; (8006274 <HAL_RCC_GetHCLKFreq+0x14>)
 8006266:	681b      	ldr	r3, [r3, #0]
}
 8006268:	4618      	mov	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000008 	.word	0x20000008

08006278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800627c:	f7ff fff0 	bl	8006260 <HAL_RCC_GetHCLKFreq>
 8006280:	4602      	mov	r2, r0
 8006282:	4b05      	ldr	r3, [pc, #20]	; (8006298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	0a9b      	lsrs	r3, r3, #10
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	4903      	ldr	r1, [pc, #12]	; (800629c <HAL_RCC_GetPCLK1Freq+0x24>)
 800628e:	5ccb      	ldrb	r3, [r1, r3]
 8006290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006294:	4618      	mov	r0, r3
 8006296:	bd80      	pop	{r7, pc}
 8006298:	40023800 	.word	0x40023800
 800629c:	0800ac18 	.word	0x0800ac18

080062a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e07b      	b.n	80063aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d108      	bne.n	80062cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062c2:	d009      	beq.n	80062d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	61da      	str	r2, [r3, #28]
 80062ca:	e005      	b.n	80062d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d106      	bne.n	80062f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fc f990 	bl	8002618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800630e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	431a      	orrs	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635c:	ea42 0103 	orr.w	r1, r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	0c1b      	lsrs	r3, r3, #16
 8006376:	f003 0104 	and.w	r1, r3, #4
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	f003 0210 	and.w	r2, r3, #16
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006398:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b088      	sub	sp, #32
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	603b      	str	r3, [r7, #0]
 80063be:	4613      	mov	r3, r2
 80063c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_SPI_Transmit+0x22>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e126      	b.n	8006622 <HAL_SPI_Transmit+0x270>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063dc:	f7fd faca 	bl	8003974 <HAL_GetTick>
 80063e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d002      	beq.n	80063f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063f2:	2302      	movs	r3, #2
 80063f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063f6:	e10b      	b.n	8006610 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <HAL_SPI_Transmit+0x52>
 80063fe:	88fb      	ldrh	r3, [r7, #6]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006408:	e102      	b.n	8006610 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2203      	movs	r2, #3
 800640e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	88fa      	ldrh	r2, [r7, #6]
 8006422:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006450:	d10f      	bne.n	8006472 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006460:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006470:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647c:	2b40      	cmp	r3, #64	; 0x40
 800647e:	d007      	beq.n	8006490 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800648e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006498:	d14b      	bne.n	8006532 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_SPI_Transmit+0xf6>
 80064a2:	8afb      	ldrh	r3, [r7, #22]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d13e      	bne.n	8006526 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	881a      	ldrh	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	1c9a      	adds	r2, r3, #2
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064cc:	e02b      	b.n	8006526 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d112      	bne.n	8006502 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e0:	881a      	ldrh	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	1c9a      	adds	r2, r3, #2
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8006500:	e011      	b.n	8006526 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006502:	f7fd fa37 	bl	8003974 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d803      	bhi.n	800651a <HAL_SPI_Transmit+0x168>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d102      	bne.n	8006520 <HAL_SPI_Transmit+0x16e>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006524:	e074      	b.n	8006610 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800652a:	b29b      	uxth	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1ce      	bne.n	80064ce <HAL_SPI_Transmit+0x11c>
 8006530:	e04c      	b.n	80065cc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <HAL_SPI_Transmit+0x18e>
 800653a:	8afb      	ldrh	r3, [r7, #22]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d140      	bne.n	80065c2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	330c      	adds	r3, #12
 800654a:	7812      	ldrb	r2, [r2, #0]
 800654c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800655c:	b29b      	uxth	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006566:	e02c      	b.n	80065c2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b02      	cmp	r3, #2
 8006574:	d113      	bne.n	800659e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	330c      	adds	r3, #12
 8006580:	7812      	ldrb	r2, [r2, #0]
 8006582:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	86da      	strh	r2, [r3, #54]	; 0x36
 800659c:	e011      	b.n	80065c2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800659e:	f7fd f9e9 	bl	8003974 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d803      	bhi.n	80065b6 <HAL_SPI_Transmit+0x204>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b4:	d102      	bne.n	80065bc <HAL_SPI_Transmit+0x20a>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065c0:	e026      	b.n	8006610 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1cd      	bne.n	8006568 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f8b3 	bl	800673c <SPI_EndRxTxTransaction>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2220      	movs	r2, #32
 80065e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065ea:	2300      	movs	r3, #0
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e000      	b.n	8006610 <HAL_SPI_Transmit+0x25e>
  }

error:
 800660e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006620:	7ffb      	ldrb	r3, [r7, #31]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	4613      	mov	r3, r2
 800663a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800663c:	f7fd f99a 	bl	8003974 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	1a9b      	subs	r3, r3, r2
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	4413      	add	r3, r2
 800664a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800664c:	f7fd f992 	bl	8003974 <HAL_GetTick>
 8006650:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006652:	4b39      	ldr	r3, [pc, #228]	; (8006738 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	015b      	lsls	r3, r3, #5
 8006658:	0d1b      	lsrs	r3, r3, #20
 800665a:	69fa      	ldr	r2, [r7, #28]
 800665c:	fb02 f303 	mul.w	r3, r2, r3
 8006660:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006662:	e054      	b.n	800670e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666a:	d050      	beq.n	800670e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800666c:	f7fd f982 	bl	8003974 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	429a      	cmp	r2, r3
 800667a:	d902      	bls.n	8006682 <SPI_WaitFlagStateUntilTimeout+0x56>
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d13d      	bne.n	80066fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006690:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800669a:	d111      	bne.n	80066c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a4:	d004      	beq.n	80066b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ae:	d107      	bne.n	80066c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066c8:	d10f      	bne.n	80066ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e017      	b.n	800672e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	3b01      	subs	r3, #1
 800670c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4013      	ands	r3, r2
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	429a      	cmp	r2, r3
 800671c:	bf0c      	ite	eq
 800671e:	2301      	moveq	r3, #1
 8006720:	2300      	movne	r3, #0
 8006722:	b2db      	uxtb	r3, r3
 8006724:	461a      	mov	r2, r3
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	429a      	cmp	r2, r3
 800672a:	d19b      	bne.n	8006664 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3720      	adds	r7, #32
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000008 	.word	0x20000008

0800673c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006748:	4b1b      	ldr	r3, [pc, #108]	; (80067b8 <SPI_EndRxTxTransaction+0x7c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a1b      	ldr	r2, [pc, #108]	; (80067bc <SPI_EndRxTxTransaction+0x80>)
 800674e:	fba2 2303 	umull	r2, r3, r2, r3
 8006752:	0d5b      	lsrs	r3, r3, #21
 8006754:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006758:	fb02 f303 	mul.w	r3, r2, r3
 800675c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006766:	d112      	bne.n	800678e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2200      	movs	r2, #0
 8006770:	2180      	movs	r1, #128	; 0x80
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f7ff ff5a 	bl	800662c <SPI_WaitFlagStateUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d016      	beq.n	80067ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006782:	f043 0220 	orr.w	r2, r3, #32
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e00f      	b.n	80067ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	3b01      	subs	r3, #1
 8006798:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a4:	2b80      	cmp	r3, #128	; 0x80
 80067a6:	d0f2      	beq.n	800678e <SPI_EndRxTxTransaction+0x52>
 80067a8:	e000      	b.n	80067ac <SPI_EndRxTxTransaction+0x70>
        break;
 80067aa:	bf00      	nop
  }

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20000008 	.word	0x20000008
 80067bc:	165e9f81 	.word	0x165e9f81

080067c0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e034      	b.n	8006840 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d106      	bne.n	80067f0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f7fa fda6 	bl	800133c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3308      	adds	r3, #8
 80067f8:	4619      	mov	r1, r3
 80067fa:	4610      	mov	r0, r2
 80067fc:	f000 ffda 	bl	80077b4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	461a      	mov	r2, r3
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	f001 f824 	bl	8007858 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6858      	ldr	r0, [r3, #4]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	f001 f859 	bl	80078d4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	6892      	ldr	r2, [r2, #8]
 800682a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	6892      	ldr	r2, [r2, #8]
 8006836:	f041 0101 	orr.w	r1, r1, #1
 800683a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e041      	b.n	80068de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fc f87c 	bl	800296c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f000 fc1a 	bl	80070c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d001      	beq.n	8006900 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e046      	b.n	800698e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a23      	ldr	r2, [pc, #140]	; (800699c <HAL_TIM_Base_Start+0xb4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d022      	beq.n	8006958 <HAL_TIM_Base_Start+0x70>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691a:	d01d      	beq.n	8006958 <HAL_TIM_Base_Start+0x70>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a1f      	ldr	r2, [pc, #124]	; (80069a0 <HAL_TIM_Base_Start+0xb8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d018      	beq.n	8006958 <HAL_TIM_Base_Start+0x70>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1e      	ldr	r2, [pc, #120]	; (80069a4 <HAL_TIM_Base_Start+0xbc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d013      	beq.n	8006958 <HAL_TIM_Base_Start+0x70>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1c      	ldr	r2, [pc, #112]	; (80069a8 <HAL_TIM_Base_Start+0xc0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00e      	beq.n	8006958 <HAL_TIM_Base_Start+0x70>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1b      	ldr	r2, [pc, #108]	; (80069ac <HAL_TIM_Base_Start+0xc4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d009      	beq.n	8006958 <HAL_TIM_Base_Start+0x70>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a19      	ldr	r2, [pc, #100]	; (80069b0 <HAL_TIM_Base_Start+0xc8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d004      	beq.n	8006958 <HAL_TIM_Base_Start+0x70>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a18      	ldr	r2, [pc, #96]	; (80069b4 <HAL_TIM_Base_Start+0xcc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d111      	bne.n	800697c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b06      	cmp	r3, #6
 8006968:	d010      	beq.n	800698c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f042 0201 	orr.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800697a:	e007      	b.n	800698c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40010000 	.word	0x40010000
 80069a0:	40000400 	.word	0x40000400
 80069a4:	40000800 	.word	0x40000800
 80069a8:	40000c00 	.word	0x40000c00
 80069ac:	40010400 	.word	0x40010400
 80069b0:	40014000 	.word	0x40014000
 80069b4:	40001800 	.word	0x40001800

080069b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d001      	beq.n	80069d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e04e      	b.n	8006a6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a23      	ldr	r2, [pc, #140]	; (8006a7c <HAL_TIM_Base_Start_IT+0xc4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d022      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fa:	d01d      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a1f      	ldr	r2, [pc, #124]	; (8006a80 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d018      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a1e      	ldr	r2, [pc, #120]	; (8006a84 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d013      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a1c      	ldr	r2, [pc, #112]	; (8006a88 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00e      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a1b      	ldr	r2, [pc, #108]	; (8006a8c <HAL_TIM_Base_Start_IT+0xd4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d009      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a19      	ldr	r2, [pc, #100]	; (8006a90 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d004      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a18      	ldr	r2, [pc, #96]	; (8006a94 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d111      	bne.n	8006a5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 0307 	and.w	r3, r3, #7
 8006a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b06      	cmp	r3, #6
 8006a48:	d010      	beq.n	8006a6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0201 	orr.w	r2, r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5a:	e007      	b.n	8006a6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0201 	orr.w	r2, r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	40010000 	.word	0x40010000
 8006a80:	40000400 	.word	0x40000400
 8006a84:	40000800 	.word	0x40000800
 8006a88:	40000c00 	.word	0x40000c00
 8006a8c:	40010400 	.word	0x40010400
 8006a90:	40014000 	.word	0x40014000
 8006a94:	40001800 	.word	0x40001800

08006a98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e041      	b.n	8006b2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d106      	bne.n	8006ac4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f839 	bl	8006b36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f000 faf2 	bl	80070c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d122      	bne.n	8006ba6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d11b      	bne.n	8006ba6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f06f 0202 	mvn.w	r2, #2
 8006b76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fa78 	bl	8007082 <HAL_TIM_IC_CaptureCallback>
 8006b92:	e005      	b.n	8006ba0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fa6a 	bl	800706e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fa7b 	bl	8007096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d122      	bne.n	8006bfa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d11b      	bne.n	8006bfa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f06f 0204 	mvn.w	r2, #4
 8006bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fa4e 	bl	8007082 <HAL_TIM_IC_CaptureCallback>
 8006be6:	e005      	b.n	8006bf4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fa40 	bl	800706e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fa51 	bl	8007096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f003 0308 	and.w	r3, r3, #8
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d122      	bne.n	8006c4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	d11b      	bne.n	8006c4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f06f 0208 	mvn.w	r2, #8
 8006c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2204      	movs	r2, #4
 8006c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	f003 0303 	and.w	r3, r3, #3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fa24 	bl	8007082 <HAL_TIM_IC_CaptureCallback>
 8006c3a:	e005      	b.n	8006c48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fa16 	bl	800706e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fa27 	bl	8007096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	f003 0310 	and.w	r3, r3, #16
 8006c58:	2b10      	cmp	r3, #16
 8006c5a:	d122      	bne.n	8006ca2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f003 0310 	and.w	r3, r3, #16
 8006c66:	2b10      	cmp	r3, #16
 8006c68:	d11b      	bne.n	8006ca2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f06f 0210 	mvn.w	r2, #16
 8006c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2208      	movs	r2, #8
 8006c78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f9fa 	bl	8007082 <HAL_TIM_IC_CaptureCallback>
 8006c8e:	e005      	b.n	8006c9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f9ec 	bl	800706e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9fd 	bl	8007096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d10e      	bne.n	8006cce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d107      	bne.n	8006cce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f06f 0201 	mvn.w	r2, #1
 8006cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7fb fc2b 	bl	8002524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd8:	2b80      	cmp	r3, #128	; 0x80
 8006cda:	d10e      	bne.n	8006cfa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce6:	2b80      	cmp	r3, #128	; 0x80
 8006ce8:	d107      	bne.n	8006cfa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fd53 	bl	80077a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d04:	2b40      	cmp	r3, #64	; 0x40
 8006d06:	d10e      	bne.n	8006d26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d12:	2b40      	cmp	r3, #64	; 0x40
 8006d14:	d107      	bne.n	8006d26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f9c2 	bl	80070aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d10e      	bne.n	8006d52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	d107      	bne.n	8006d52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f06f 0220 	mvn.w	r2, #32
 8006d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fd1d 	bl	800778c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e0ae      	b.n	8006ed8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b0c      	cmp	r3, #12
 8006d86:	f200 809f 	bhi.w	8006ec8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d8a:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d90:	08006dc5 	.word	0x08006dc5
 8006d94:	08006ec9 	.word	0x08006ec9
 8006d98:	08006ec9 	.word	0x08006ec9
 8006d9c:	08006ec9 	.word	0x08006ec9
 8006da0:	08006e05 	.word	0x08006e05
 8006da4:	08006ec9 	.word	0x08006ec9
 8006da8:	08006ec9 	.word	0x08006ec9
 8006dac:	08006ec9 	.word	0x08006ec9
 8006db0:	08006e47 	.word	0x08006e47
 8006db4:	08006ec9 	.word	0x08006ec9
 8006db8:	08006ec9 	.word	0x08006ec9
 8006dbc:	08006ec9 	.word	0x08006ec9
 8006dc0:	08006e87 	.word	0x08006e87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fa18 	bl	8007200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699a      	ldr	r2, [r3, #24]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0208 	orr.w	r2, r2, #8
 8006dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0204 	bic.w	r2, r2, #4
 8006dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6999      	ldr	r1, [r3, #24]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	691a      	ldr	r2, [r3, #16]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	619a      	str	r2, [r3, #24]
      break;
 8006e02:	e064      	b.n	8006ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 fa68 	bl	80072e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	699a      	ldr	r2, [r3, #24]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6999      	ldr	r1, [r3, #24]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	021a      	lsls	r2, r3, #8
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	619a      	str	r2, [r3, #24]
      break;
 8006e44:	e043      	b.n	8006ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68b9      	ldr	r1, [r7, #8]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fabd 	bl	80073cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69da      	ldr	r2, [r3, #28]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0208 	orr.w	r2, r2, #8
 8006e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	69da      	ldr	r2, [r3, #28]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0204 	bic.w	r2, r2, #4
 8006e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69d9      	ldr	r1, [r3, #28]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	61da      	str	r2, [r3, #28]
      break;
 8006e84:	e023      	b.n	8006ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68b9      	ldr	r1, [r7, #8]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fb11 	bl	80074b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69da      	ldr	r2, [r3, #28]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	69d9      	ldr	r1, [r3, #28]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	021a      	lsls	r2, r3, #8
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	61da      	str	r2, [r3, #28]
      break;
 8006ec6:	e002      	b.n	8006ece <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	75fb      	strb	r3, [r7, #23]
      break;
 8006ecc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_TIM_ConfigClockSource+0x1c>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e0b4      	b.n	8007066 <HAL_TIM_ConfigClockSource+0x186>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f34:	d03e      	beq.n	8006fb4 <HAL_TIM_ConfigClockSource+0xd4>
 8006f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f3a:	f200 8087 	bhi.w	800704c <HAL_TIM_ConfigClockSource+0x16c>
 8006f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f42:	f000 8086 	beq.w	8007052 <HAL_TIM_ConfigClockSource+0x172>
 8006f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4a:	d87f      	bhi.n	800704c <HAL_TIM_ConfigClockSource+0x16c>
 8006f4c:	2b70      	cmp	r3, #112	; 0x70
 8006f4e:	d01a      	beq.n	8006f86 <HAL_TIM_ConfigClockSource+0xa6>
 8006f50:	2b70      	cmp	r3, #112	; 0x70
 8006f52:	d87b      	bhi.n	800704c <HAL_TIM_ConfigClockSource+0x16c>
 8006f54:	2b60      	cmp	r3, #96	; 0x60
 8006f56:	d050      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x11a>
 8006f58:	2b60      	cmp	r3, #96	; 0x60
 8006f5a:	d877      	bhi.n	800704c <HAL_TIM_ConfigClockSource+0x16c>
 8006f5c:	2b50      	cmp	r3, #80	; 0x50
 8006f5e:	d03c      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0xfa>
 8006f60:	2b50      	cmp	r3, #80	; 0x50
 8006f62:	d873      	bhi.n	800704c <HAL_TIM_ConfigClockSource+0x16c>
 8006f64:	2b40      	cmp	r3, #64	; 0x40
 8006f66:	d058      	beq.n	800701a <HAL_TIM_ConfigClockSource+0x13a>
 8006f68:	2b40      	cmp	r3, #64	; 0x40
 8006f6a:	d86f      	bhi.n	800704c <HAL_TIM_ConfigClockSource+0x16c>
 8006f6c:	2b30      	cmp	r3, #48	; 0x30
 8006f6e:	d064      	beq.n	800703a <HAL_TIM_ConfigClockSource+0x15a>
 8006f70:	2b30      	cmp	r3, #48	; 0x30
 8006f72:	d86b      	bhi.n	800704c <HAL_TIM_ConfigClockSource+0x16c>
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	d060      	beq.n	800703a <HAL_TIM_ConfigClockSource+0x15a>
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d867      	bhi.n	800704c <HAL_TIM_ConfigClockSource+0x16c>
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d05c      	beq.n	800703a <HAL_TIM_ConfigClockSource+0x15a>
 8006f80:	2b10      	cmp	r3, #16
 8006f82:	d05a      	beq.n	800703a <HAL_TIM_ConfigClockSource+0x15a>
 8006f84:	e062      	b.n	800704c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6899      	ldr	r1, [r3, #8]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f000 fb5d 	bl	8007654 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	609a      	str	r2, [r3, #8]
      break;
 8006fb2:	e04f      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6818      	ldr	r0, [r3, #0]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	6899      	ldr	r1, [r3, #8]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f000 fb46 	bl	8007654 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fd6:	609a      	str	r2, [r3, #8]
      break;
 8006fd8:	e03c      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	6859      	ldr	r1, [r3, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f000 faba 	bl	8007560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2150      	movs	r1, #80	; 0x50
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fb13 	bl	800761e <TIM_ITRx_SetConfig>
      break;
 8006ff8:	e02c      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6818      	ldr	r0, [r3, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	6859      	ldr	r1, [r3, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	461a      	mov	r2, r3
 8007008:	f000 fad9 	bl	80075be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2160      	movs	r1, #96	; 0x60
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fb03 	bl	800761e <TIM_ITRx_SetConfig>
      break;
 8007018:	e01c      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	6859      	ldr	r1, [r3, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	461a      	mov	r2, r3
 8007028:	f000 fa9a 	bl	8007560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2140      	movs	r1, #64	; 0x40
 8007032:	4618      	mov	r0, r3
 8007034:	f000 faf3 	bl	800761e <TIM_ITRx_SetConfig>
      break;
 8007038:	e00c      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4619      	mov	r1, r3
 8007044:	4610      	mov	r0, r2
 8007046:	f000 faea 	bl	800761e <TIM_ITRx_SetConfig>
      break;
 800704a:	e003      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	73fb      	strb	r3, [r7, #15]
      break;
 8007050:	e000      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007082:	b480      	push	{r7}
 8007084:	b083      	sub	sp, #12
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800708a:	bf00      	nop
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b083      	sub	sp, #12
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070b2:	bf00      	nop
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
	...

080070c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a40      	ldr	r2, [pc, #256]	; (80071d4 <TIM_Base_SetConfig+0x114>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d013      	beq.n	8007100 <TIM_Base_SetConfig+0x40>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070de:	d00f      	beq.n	8007100 <TIM_Base_SetConfig+0x40>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a3d      	ldr	r2, [pc, #244]	; (80071d8 <TIM_Base_SetConfig+0x118>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00b      	beq.n	8007100 <TIM_Base_SetConfig+0x40>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a3c      	ldr	r2, [pc, #240]	; (80071dc <TIM_Base_SetConfig+0x11c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d007      	beq.n	8007100 <TIM_Base_SetConfig+0x40>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a3b      	ldr	r2, [pc, #236]	; (80071e0 <TIM_Base_SetConfig+0x120>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d003      	beq.n	8007100 <TIM_Base_SetConfig+0x40>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a3a      	ldr	r2, [pc, #232]	; (80071e4 <TIM_Base_SetConfig+0x124>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d108      	bne.n	8007112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a2f      	ldr	r2, [pc, #188]	; (80071d4 <TIM_Base_SetConfig+0x114>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d02b      	beq.n	8007172 <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007120:	d027      	beq.n	8007172 <TIM_Base_SetConfig+0xb2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a2c      	ldr	r2, [pc, #176]	; (80071d8 <TIM_Base_SetConfig+0x118>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d023      	beq.n	8007172 <TIM_Base_SetConfig+0xb2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a2b      	ldr	r2, [pc, #172]	; (80071dc <TIM_Base_SetConfig+0x11c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01f      	beq.n	8007172 <TIM_Base_SetConfig+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a2a      	ldr	r2, [pc, #168]	; (80071e0 <TIM_Base_SetConfig+0x120>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d01b      	beq.n	8007172 <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a29      	ldr	r2, [pc, #164]	; (80071e4 <TIM_Base_SetConfig+0x124>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d017      	beq.n	8007172 <TIM_Base_SetConfig+0xb2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a28      	ldr	r2, [pc, #160]	; (80071e8 <TIM_Base_SetConfig+0x128>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <TIM_Base_SetConfig+0xb2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a27      	ldr	r2, [pc, #156]	; (80071ec <TIM_Base_SetConfig+0x12c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00f      	beq.n	8007172 <TIM_Base_SetConfig+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a26      	ldr	r2, [pc, #152]	; (80071f0 <TIM_Base_SetConfig+0x130>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00b      	beq.n	8007172 <TIM_Base_SetConfig+0xb2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a25      	ldr	r2, [pc, #148]	; (80071f4 <TIM_Base_SetConfig+0x134>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d007      	beq.n	8007172 <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a24      	ldr	r2, [pc, #144]	; (80071f8 <TIM_Base_SetConfig+0x138>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d003      	beq.n	8007172 <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a23      	ldr	r2, [pc, #140]	; (80071fc <TIM_Base_SetConfig+0x13c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d108      	bne.n	8007184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	4313      	orrs	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a0a      	ldr	r2, [pc, #40]	; (80071d4 <TIM_Base_SetConfig+0x114>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <TIM_Base_SetConfig+0xf8>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a0c      	ldr	r2, [pc, #48]	; (80071e4 <TIM_Base_SetConfig+0x124>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d103      	bne.n	80071c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	615a      	str	r2, [r3, #20]
}
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40010000 	.word	0x40010000
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800
 80071e0:	40000c00 	.word	0x40000c00
 80071e4:	40010400 	.word	0x40010400
 80071e8:	40014000 	.word	0x40014000
 80071ec:	40014400 	.word	0x40014400
 80071f0:	40014800 	.word	0x40014800
 80071f4:	40001800 	.word	0x40001800
 80071f8:	40001c00 	.word	0x40001c00
 80071fc:	40002000 	.word	0x40002000

08007200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	f023 0201 	bic.w	r2, r3, #1
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0303 	bic.w	r3, r3, #3
 8007236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f023 0302 	bic.w	r3, r3, #2
 8007248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a20      	ldr	r2, [pc, #128]	; (80072d8 <TIM_OC1_SetConfig+0xd8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d003      	beq.n	8007264 <TIM_OC1_SetConfig+0x64>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a1f      	ldr	r2, [pc, #124]	; (80072dc <TIM_OC1_SetConfig+0xdc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d10c      	bne.n	800727e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f023 0308 	bic.w	r3, r3, #8
 800726a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f023 0304 	bic.w	r3, r3, #4
 800727c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a15      	ldr	r2, [pc, #84]	; (80072d8 <TIM_OC1_SetConfig+0xd8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d003      	beq.n	800728e <TIM_OC1_SetConfig+0x8e>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a14      	ldr	r2, [pc, #80]	; (80072dc <TIM_OC1_SetConfig+0xdc>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d111      	bne.n	80072b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800729c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	621a      	str	r2, [r3, #32]
}
 80072cc:	bf00      	nop
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	40010000 	.word	0x40010000
 80072dc:	40010400 	.word	0x40010400

080072e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	f023 0210 	bic.w	r2, r3, #16
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800730e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f023 0320 	bic.w	r3, r3, #32
 800732a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a22      	ldr	r2, [pc, #136]	; (80073c4 <TIM_OC2_SetConfig+0xe4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_OC2_SetConfig+0x68>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a21      	ldr	r2, [pc, #132]	; (80073c8 <TIM_OC2_SetConfig+0xe8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d10d      	bne.n	8007364 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800734e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	011b      	lsls	r3, r3, #4
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007362:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a17      	ldr	r2, [pc, #92]	; (80073c4 <TIM_OC2_SetConfig+0xe4>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d003      	beq.n	8007374 <TIM_OC2_SetConfig+0x94>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a16      	ldr	r2, [pc, #88]	; (80073c8 <TIM_OC2_SetConfig+0xe8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d113      	bne.n	800739c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800737a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	4313      	orrs	r3, r2
 800738e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	621a      	str	r2, [r3, #32]
}
 80073b6:	bf00      	nop
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40010000 	.word	0x40010000
 80073c8:	40010400 	.word	0x40010400

080073cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 0303 	bic.w	r3, r3, #3
 8007402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	4313      	orrs	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	021b      	lsls	r3, r3, #8
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a21      	ldr	r2, [pc, #132]	; (80074ac <TIM_OC3_SetConfig+0xe0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d003      	beq.n	8007432 <TIM_OC3_SetConfig+0x66>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a20      	ldr	r2, [pc, #128]	; (80074b0 <TIM_OC3_SetConfig+0xe4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d10d      	bne.n	800744e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	021b      	lsls	r3, r3, #8
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	4313      	orrs	r3, r2
 8007444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800744c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a16      	ldr	r2, [pc, #88]	; (80074ac <TIM_OC3_SetConfig+0xe0>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d003      	beq.n	800745e <TIM_OC3_SetConfig+0x92>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a15      	ldr	r2, [pc, #84]	; (80074b0 <TIM_OC3_SetConfig+0xe4>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d113      	bne.n	8007486 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800746c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	011b      	lsls	r3, r3, #4
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	4313      	orrs	r3, r2
 8007478:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4313      	orrs	r3, r2
 8007484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	621a      	str	r2, [r3, #32]
}
 80074a0:	bf00      	nop
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	40010000 	.word	0x40010000
 80074b0:	40010400 	.word	0x40010400

080074b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	021b      	lsls	r3, r3, #8
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	031b      	lsls	r3, r3, #12
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4313      	orrs	r3, r2
 800750a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a12      	ldr	r2, [pc, #72]	; (8007558 <TIM_OC4_SetConfig+0xa4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d003      	beq.n	800751c <TIM_OC4_SetConfig+0x68>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a11      	ldr	r2, [pc, #68]	; (800755c <TIM_OC4_SetConfig+0xa8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d109      	bne.n	8007530 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	019b      	lsls	r3, r3, #6
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	621a      	str	r2, [r3, #32]
}
 800754a:	bf00      	nop
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	40010000 	.word	0x40010000
 800755c:	40010400 	.word	0x40010400

08007560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f023 0201 	bic.w	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800758a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	4313      	orrs	r3, r2
 8007594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f023 030a 	bic.w	r3, r3, #10
 800759c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075be:	b480      	push	{r7}
 80075c0:	b087      	sub	sp, #28
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	f023 0210 	bic.w	r2, r3, #16
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	031b      	lsls	r3, r3, #12
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	011b      	lsls	r3, r3, #4
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	621a      	str	r2, [r3, #32]
}
 8007612:	bf00      	nop
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800761e:	b480      	push	{r7}
 8007620:	b085      	sub	sp, #20
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4313      	orrs	r3, r2
 800763c:	f043 0307 	orr.w	r3, r3, #7
 8007640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	609a      	str	r2, [r3, #8]
}
 8007648:	bf00      	nop
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800766e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	021a      	lsls	r2, r3, #8
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	431a      	orrs	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4313      	orrs	r3, r2
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	609a      	str	r2, [r3, #8]
}
 8007688:	bf00      	nop
 800768a:	371c      	adds	r7, #28
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e05a      	b.n	8007762 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a21      	ldr	r2, [pc, #132]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d022      	beq.n	8007736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f8:	d01d      	beq.n	8007736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d018      	beq.n	8007736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1b      	ldr	r2, [pc, #108]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d013      	beq.n	8007736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a1a      	ldr	r2, [pc, #104]	; (800777c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00e      	beq.n	8007736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a18      	ldr	r2, [pc, #96]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d009      	beq.n	8007736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a17      	ldr	r2, [pc, #92]	; (8007784 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d004      	beq.n	8007736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a15      	ldr	r2, [pc, #84]	; (8007788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d10c      	bne.n	8007750 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800773c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	4313      	orrs	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	40010000 	.word	0x40010000
 8007774:	40000400 	.word	0x40000400
 8007778:	40000800 	.word	0x40000800
 800777c:	40000c00 	.word	0x40000c00
 8007780:	40010400 	.word	0x40010400
 8007784:	40014000 	.word	0x40014000
 8007788:	40001800 	.word	0x40001800

0800778c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077cc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4b20      	ldr	r3, [pc, #128]	; (8007854 <FSMC_NORSRAM_Init+0xa0>)
 80077d2:	4013      	ands	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80077de:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80077e4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80077ea:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80077f0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80077f6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80077fc:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007802:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007808:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800780e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007814:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800781a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007820:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	4313      	orrs	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	2b08      	cmp	r3, #8
 800782e:	d103      	bne.n	8007838 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007836:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68f9      	ldr	r1, [r7, #12]
 8007840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	fff00080 	.word	0xfff00080

08007858 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007864:	2300      	movs	r3, #0
 8007866:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007872:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800787a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007886:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800788e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007896:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	3b01      	subs	r3, #1
 800789e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80078a0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	3b02      	subs	r3, #2
 80078a8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80078aa:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80078b0:	4313      	orrs	r3, r2
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6979      	ldr	r1, [r7, #20]
 80078c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
	...

080078d4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078ec:	d122      	bne.n	8007934 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	4b15      	ldr	r3, [pc, #84]	; (8007950 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800790a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007912:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800791a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007920:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	4313      	orrs	r3, r2
 8007926:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6979      	ldr	r1, [r7, #20]
 800792e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007932:	e005      	b.n	8007940 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800793c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	cff00000 	.word	0xcff00000

08007954 <__errno>:
 8007954:	4b01      	ldr	r3, [pc, #4]	; (800795c <__errno+0x8>)
 8007956:	6818      	ldr	r0, [r3, #0]
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	2000004c 	.word	0x2000004c

08007960 <__libc_init_array>:
 8007960:	b570      	push	{r4, r5, r6, lr}
 8007962:	4d0d      	ldr	r5, [pc, #52]	; (8007998 <__libc_init_array+0x38>)
 8007964:	4c0d      	ldr	r4, [pc, #52]	; (800799c <__libc_init_array+0x3c>)
 8007966:	1b64      	subs	r4, r4, r5
 8007968:	10a4      	asrs	r4, r4, #2
 800796a:	2600      	movs	r6, #0
 800796c:	42a6      	cmp	r6, r4
 800796e:	d109      	bne.n	8007984 <__libc_init_array+0x24>
 8007970:	4d0b      	ldr	r5, [pc, #44]	; (80079a0 <__libc_init_array+0x40>)
 8007972:	4c0c      	ldr	r4, [pc, #48]	; (80079a4 <__libc_init_array+0x44>)
 8007974:	f000 f908 	bl	8007b88 <_init>
 8007978:	1b64      	subs	r4, r4, r5
 800797a:	10a4      	asrs	r4, r4, #2
 800797c:	2600      	movs	r6, #0
 800797e:	42a6      	cmp	r6, r4
 8007980:	d105      	bne.n	800798e <__libc_init_array+0x2e>
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	f855 3b04 	ldr.w	r3, [r5], #4
 8007988:	4798      	blx	r3
 800798a:	3601      	adds	r6, #1
 800798c:	e7ee      	b.n	800796c <__libc_init_array+0xc>
 800798e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007992:	4798      	blx	r3
 8007994:	3601      	adds	r6, #1
 8007996:	e7f2      	b.n	800797e <__libc_init_array+0x1e>
 8007998:	0800ac30 	.word	0x0800ac30
 800799c:	0800ac30 	.word	0x0800ac30
 80079a0:	0800ac30 	.word	0x0800ac30
 80079a4:	0800ac34 	.word	0x0800ac34

080079a8 <memset>:
 80079a8:	4402      	add	r2, r0
 80079aa:	4603      	mov	r3, r0
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d100      	bne.n	80079b2 <memset+0xa>
 80079b0:	4770      	bx	lr
 80079b2:	f803 1b01 	strb.w	r1, [r3], #1
 80079b6:	e7f9      	b.n	80079ac <memset+0x4>

080079b8 <sqrt>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	ed2d 8b02 	vpush	{d8}
 80079be:	ec55 4b10 	vmov	r4, r5, d0
 80079c2:	f000 f82d 	bl	8007a20 <__ieee754_sqrt>
 80079c6:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <sqrt+0x64>)
 80079c8:	eeb0 8a40 	vmov.f32	s16, s0
 80079cc:	eef0 8a60 	vmov.f32	s17, s1
 80079d0:	f993 3000 	ldrsb.w	r3, [r3]
 80079d4:	3301      	adds	r3, #1
 80079d6:	d019      	beq.n	8007a0c <sqrt+0x54>
 80079d8:	4622      	mov	r2, r4
 80079da:	462b      	mov	r3, r5
 80079dc:	4620      	mov	r0, r4
 80079de:	4629      	mov	r1, r5
 80079e0:	f7f9 f848 	bl	8000a74 <__aeabi_dcmpun>
 80079e4:	b990      	cbnz	r0, 8007a0c <sqrt+0x54>
 80079e6:	2200      	movs	r2, #0
 80079e8:	2300      	movs	r3, #0
 80079ea:	4620      	mov	r0, r4
 80079ec:	4629      	mov	r1, r5
 80079ee:	f7f9 f819 	bl	8000a24 <__aeabi_dcmplt>
 80079f2:	b158      	cbz	r0, 8007a0c <sqrt+0x54>
 80079f4:	f7ff ffae 	bl	8007954 <__errno>
 80079f8:	2321      	movs	r3, #33	; 0x21
 80079fa:	6003      	str	r3, [r0, #0]
 80079fc:	2200      	movs	r2, #0
 80079fe:	2300      	movs	r3, #0
 8007a00:	4610      	mov	r0, r2
 8007a02:	4619      	mov	r1, r3
 8007a04:	f7f8 fec6 	bl	8000794 <__aeabi_ddiv>
 8007a08:	ec41 0b18 	vmov	d8, r0, r1
 8007a0c:	eeb0 0a48 	vmov.f32	s0, s16
 8007a10:	eef0 0a68 	vmov.f32	s1, s17
 8007a14:	ecbd 8b02 	vpop	{d8}
 8007a18:	bd38      	pop	{r3, r4, r5, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200000b0 	.word	0x200000b0

08007a20 <__ieee754_sqrt>:
 8007a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a24:	ec55 4b10 	vmov	r4, r5, d0
 8007a28:	4e56      	ldr	r6, [pc, #344]	; (8007b84 <__ieee754_sqrt+0x164>)
 8007a2a:	43ae      	bics	r6, r5
 8007a2c:	ee10 0a10 	vmov	r0, s0
 8007a30:	ee10 3a10 	vmov	r3, s0
 8007a34:	4629      	mov	r1, r5
 8007a36:	462a      	mov	r2, r5
 8007a38:	d110      	bne.n	8007a5c <__ieee754_sqrt+0x3c>
 8007a3a:	ee10 2a10 	vmov	r2, s0
 8007a3e:	462b      	mov	r3, r5
 8007a40:	f7f8 fd7e 	bl	8000540 <__aeabi_dmul>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4620      	mov	r0, r4
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	f7f8 fbc2 	bl	80001d4 <__adddf3>
 8007a50:	4604      	mov	r4, r0
 8007a52:	460d      	mov	r5, r1
 8007a54:	ec45 4b10 	vmov	d0, r4, r5
 8007a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	dc10      	bgt.n	8007a82 <__ieee754_sqrt+0x62>
 8007a60:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007a64:	4330      	orrs	r0, r6
 8007a66:	d0f5      	beq.n	8007a54 <__ieee754_sqrt+0x34>
 8007a68:	b15d      	cbz	r5, 8007a82 <__ieee754_sqrt+0x62>
 8007a6a:	ee10 2a10 	vmov	r2, s0
 8007a6e:	462b      	mov	r3, r5
 8007a70:	ee10 0a10 	vmov	r0, s0
 8007a74:	f7f8 fbac 	bl	80001d0 <__aeabi_dsub>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	f7f8 fe8a 	bl	8000794 <__aeabi_ddiv>
 8007a80:	e7e6      	b.n	8007a50 <__ieee754_sqrt+0x30>
 8007a82:	1509      	asrs	r1, r1, #20
 8007a84:	d076      	beq.n	8007b74 <__ieee754_sqrt+0x154>
 8007a86:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007a8a:	07ce      	lsls	r6, r1, #31
 8007a8c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007a90:	bf5e      	ittt	pl
 8007a92:	0fda      	lsrpl	r2, r3, #31
 8007a94:	005b      	lslpl	r3, r3, #1
 8007a96:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007a9a:	0fda      	lsrs	r2, r3, #31
 8007a9c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007aa0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	106d      	asrs	r5, r5, #1
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	f04f 0e16 	mov.w	lr, #22
 8007aae:	4684      	mov	ip, r0
 8007ab0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ab4:	eb0c 0401 	add.w	r4, ip, r1
 8007ab8:	4294      	cmp	r4, r2
 8007aba:	bfde      	ittt	le
 8007abc:	1b12      	suble	r2, r2, r4
 8007abe:	eb04 0c01 	addle.w	ip, r4, r1
 8007ac2:	1840      	addle	r0, r0, r1
 8007ac4:	0052      	lsls	r2, r2, #1
 8007ac6:	f1be 0e01 	subs.w	lr, lr, #1
 8007aca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007ace:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007ad2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007ad6:	d1ed      	bne.n	8007ab4 <__ieee754_sqrt+0x94>
 8007ad8:	4671      	mov	r1, lr
 8007ada:	2720      	movs	r7, #32
 8007adc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007ae0:	4562      	cmp	r2, ip
 8007ae2:	eb04 060e 	add.w	r6, r4, lr
 8007ae6:	dc02      	bgt.n	8007aee <__ieee754_sqrt+0xce>
 8007ae8:	d113      	bne.n	8007b12 <__ieee754_sqrt+0xf2>
 8007aea:	429e      	cmp	r6, r3
 8007aec:	d811      	bhi.n	8007b12 <__ieee754_sqrt+0xf2>
 8007aee:	2e00      	cmp	r6, #0
 8007af0:	eb06 0e04 	add.w	lr, r6, r4
 8007af4:	da43      	bge.n	8007b7e <__ieee754_sqrt+0x15e>
 8007af6:	f1be 0f00 	cmp.w	lr, #0
 8007afa:	db40      	blt.n	8007b7e <__ieee754_sqrt+0x15e>
 8007afc:	f10c 0801 	add.w	r8, ip, #1
 8007b00:	eba2 020c 	sub.w	r2, r2, ip
 8007b04:	429e      	cmp	r6, r3
 8007b06:	bf88      	it	hi
 8007b08:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007b0c:	1b9b      	subs	r3, r3, r6
 8007b0e:	4421      	add	r1, r4
 8007b10:	46c4      	mov	ip, r8
 8007b12:	0052      	lsls	r2, r2, #1
 8007b14:	3f01      	subs	r7, #1
 8007b16:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007b1a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007b1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b22:	d1dd      	bne.n	8007ae0 <__ieee754_sqrt+0xc0>
 8007b24:	4313      	orrs	r3, r2
 8007b26:	d006      	beq.n	8007b36 <__ieee754_sqrt+0x116>
 8007b28:	1c4c      	adds	r4, r1, #1
 8007b2a:	bf13      	iteet	ne
 8007b2c:	3101      	addne	r1, #1
 8007b2e:	3001      	addeq	r0, #1
 8007b30:	4639      	moveq	r1, r7
 8007b32:	f021 0101 	bicne.w	r1, r1, #1
 8007b36:	1043      	asrs	r3, r0, #1
 8007b38:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007b3c:	0849      	lsrs	r1, r1, #1
 8007b3e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007b42:	07c2      	lsls	r2, r0, #31
 8007b44:	bf48      	it	mi
 8007b46:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007b4a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007b4e:	460c      	mov	r4, r1
 8007b50:	463d      	mov	r5, r7
 8007b52:	e77f      	b.n	8007a54 <__ieee754_sqrt+0x34>
 8007b54:	0ada      	lsrs	r2, r3, #11
 8007b56:	3815      	subs	r0, #21
 8007b58:	055b      	lsls	r3, r3, #21
 8007b5a:	2a00      	cmp	r2, #0
 8007b5c:	d0fa      	beq.n	8007b54 <__ieee754_sqrt+0x134>
 8007b5e:	02d7      	lsls	r7, r2, #11
 8007b60:	d50a      	bpl.n	8007b78 <__ieee754_sqrt+0x158>
 8007b62:	f1c1 0420 	rsb	r4, r1, #32
 8007b66:	fa23 f404 	lsr.w	r4, r3, r4
 8007b6a:	1e4d      	subs	r5, r1, #1
 8007b6c:	408b      	lsls	r3, r1
 8007b6e:	4322      	orrs	r2, r4
 8007b70:	1b41      	subs	r1, r0, r5
 8007b72:	e788      	b.n	8007a86 <__ieee754_sqrt+0x66>
 8007b74:	4608      	mov	r0, r1
 8007b76:	e7f0      	b.n	8007b5a <__ieee754_sqrt+0x13a>
 8007b78:	0052      	lsls	r2, r2, #1
 8007b7a:	3101      	adds	r1, #1
 8007b7c:	e7ef      	b.n	8007b5e <__ieee754_sqrt+0x13e>
 8007b7e:	46e0      	mov	r8, ip
 8007b80:	e7be      	b.n	8007b00 <__ieee754_sqrt+0xe0>
 8007b82:	bf00      	nop
 8007b84:	7ff00000 	.word	0x7ff00000

08007b88 <_init>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	bf00      	nop
 8007b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8e:	bc08      	pop	{r3}
 8007b90:	469e      	mov	lr, r3
 8007b92:	4770      	bx	lr

08007b94 <_fini>:
 8007b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b96:	bf00      	nop
 8007b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9a:	bc08      	pop	{r3}
 8007b9c:	469e      	mov	lr, r3
 8007b9e:	4770      	bx	lr
